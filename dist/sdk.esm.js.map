{"version":3,"file":"sdk.esm.js","sources":["../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/constants.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n   public static networkCCYAmount(chainId:ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      tokenAmounts[0].token.chainId === 56 ? 'Cake-LP' : 'Requiem-LP',\n      tokenAmounts[0].token.chainId === 56 ? 'Pancake LPs' : 'Requiem LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import JSBI from 'jsbi'\nimport { Token } from './entities'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x9067e2C2bf8531283AB97C34EaA74599E0004842',\n}\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0x0bE04001Ad4725c697b6c6bD8Bc23d9848992CA0', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0x66960440491bCc68BD30B2b0B08fF9e7aB3F9078', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xCCf7ed44c5A0f3Cb5c9a9B9f765F8D836fb93BA1', 6, 'TUSD', 'True USD'),\n  ]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n"],"names":["validateSolidityTypeInstance","value","solidityType","JSBI","greaterThanOrEqual","ZERO","invariant","lessThanOrEqual","SOLIDITY_TYPE_MAXIMA","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","BigInt","toString","sqrt","y","SolidityType","uint256","z","x","greaterThan","THREE","add","divide","TWO","ONE","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","name","uint8","ChainId","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","NETWORK_CCY","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","Rounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","TEN","ether","networkCCYAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","FACTORY_ADDRESS","keccak256","pack","INIT_CODE_HASH","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","FEES_NUMERATOR","FEES_DENOMINATOR","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","MINIMUM_LIQUIDITY","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","FIVE","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","_100","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","TradeType","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}