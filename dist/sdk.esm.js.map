{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/stablesFetcher.ts","../src/routerV3.ts","../src/entities/stables.ts","../src/entities/stablePairWrapper.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x9067e2C2bf8531283AB97C34EaA74599E0004842',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xDf65aC8079A71f5174A35dE3D29e5458d03D5787'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { RouteV3 } from 'entities/routeV3'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n// import { Pair } from 'entities'\nimport { StablePairWrapper } from 'entities/stablePairWrapper'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV3(route: RouteV3): Price {\n    const prices: Price[] = []\n    for (const [i, source] of route.sources.entries()) {\n      prices.push(\n        route.path[i].equals(source.token0)\n          ? (source.type === 'Pair'\n            ? new Price(source.reserve0.currency, source.reserve1.currency, source.reserve0.raw, source.reserve1.raw)\n            // here we need the recorded prcing bases\n            : new Price(source.reserve0.currency, source.reserve1.currency, (source as StablePairWrapper).pricingBasesIn[0].raw, (source as StablePairWrapper).pricingBasesOut[1].raw))\n          : (source.type === 'Pair' ?\n            new Price(source.reserve1.currency, source.reserve0.currency, source.reserve1.raw, source.reserve0.raw)\n            // pricing base for stablePriceWrapper\n            : new Price(source.reserve0.currency, source.reserve1.currency, (source as StablePairWrapper).pricingBasesIn[1].raw, (source as StablePairWrapper).pricingBasesOut[0].raw))\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport {Source} from './source'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair implements Source{\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly type:string\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      tokenAmounts[0].token.chainId === 56 ? 'Cake-LP' : 'Requiem-LP',\n      tokenAmounts[0].token.chainId === 56 ? 'Pancake LPs' : 'Requiem LPs'\n    )\n    this.type = 'Pair'\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\n\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp, swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(1)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\n\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS,\n  STABLE_POOL_LP_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getRouterAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public static getLpAddress(chainId: number): string {\n    return STABLE_POOL_LP_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      STABLE_POOL_LP_ADDRESS[tokens[0].chainId] ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC') }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n\n  public generatePairs(pairs: Pair[]) {\n    let relevantStables: Token[] = []\n    let generatedPairs: Pair[] = []\n    pairs.forEach(pair => {\n      if (Object.values(this.tokens).includes(pair.token0)) {\n        relevantStables.push(pair.token0)\n      }\n      if (Object.values(this.tokens).includes(pair.token1)) {\n        relevantStables.push(pair.token1)\n      }\n    })\n    if (relevantStables.length === 0) {\n      return []\n    }\n    for (let i = 0; i < relevantStables.length; i++) {\n      for (let j = i + 1; j < relevantStables.length; j++) {\n        //generatedPairs.push(new Pair(relevantStables[i], relevantStables[j]))\n      }\n    }\n    return generatedPairs\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber | BigintIsh,\n    chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(StablePool.getRouterAddress(chainId), new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inIndex: number): TokenAmount {\n    const swap = this.calculateSwap(inIndex, this.indexFromToken(outputAmount.token), outputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(inIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwap(i, outIndex, userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: SwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    this.tokenBalances[this.indexFromToken(tokenAmount.token)] = tokenAmount.toBigNumber()\n  }\n\n\n  /*\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, StablePool] {\n      invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n      if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n        throw new InsufficientReservesError()\n      }\n      const inputReserve = this.reserveOf(inputAmount.token)\n      const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n      const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n      const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n      const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n      const outputAmount = new TokenAmount(\n        inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n        JSBI.divide(numerator, denominator)\n      )\n      if (JSBI.equal(outputAmount.raw, ZERO)) {\n        throw new InsufficientInputAmountError()\n      }\n      return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n  \n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n      invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n      if (\n        JSBI.equal(this.reserve0.raw, ZERO) ||\n        JSBI.equal(this.reserve1.raw, ZERO) ||\n        JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n      ) {\n        throw new InsufficientReservesError()\n      }\n  \n      const outputReserve = this.reserveOf(outputAmount.token)\n      const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n      const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n      const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n      const inputAmount = new TokenAmount(\n        outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n        JSBI.add(JSBI.divide(numerator, denominator), ONE)\n      )\n      return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n  \n    public getLiquidityAmount(\n      totalSupply: TokenAmount,\n      tokenAmountA: TokenAmount,\n      tokenAmountB: TokenAmount\n    ): TokenAmount {\n      invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n      const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n        ? [tokenAmountA, tokenAmountB]\n        : [tokenAmountB, tokenAmountA]\n      invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n  \n      let liquidity: JSBI\n      if (JSBI.equal(totalSupply.raw, ZERO)) {\n        liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n      } else {\n        const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n        const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n        liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n      }\n      if (!JSBI.greaterThan(liquidity, ZERO)) {\n        throw new InsufficientInputAmountError()\n      }\n      return new TokenAmount(this.liquidityToken, liquidity)\n    }\n  \n    public getLiquidityValue(\n      token: Token,\n      totalSupply: TokenAmount,\n      liquidity: TokenAmount,\n      feeOn: boolean = false,\n      kLast?: BigintIsh\n    ): TokenAmount {\n      invariant(this.involvesToken(token), 'TOKEN')\n      invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n      invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n      invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n  \n      let totalSupplyAdjusted: TokenAmount\n      if (!feeOn) {\n        totalSupplyAdjusted = totalSupply\n      } else {\n        invariant(!!kLast, 'K_LAST')\n        const kLastParsed = parseBigintIsh(kLast)\n        if (!JSBI.equal(kLastParsed, ZERO)) {\n          const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n          const rootKLast = sqrt(kLastParsed)\n          if (JSBI.greaterThan(rootK, rootKLast)) {\n            const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n            const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n            const feeLiquidity = JSBI.divide(numerator, denominator)\n            totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n          } else {\n            totalSupplyAdjusted = totalSupply\n          }\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      }\n  \n      return new TokenAmount(\n        token,\n        JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n      )\n    } */\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getRouterAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV3 } from './entities/tradeV3'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV3Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeV3OptionsDeadline extends Omit<TradeV3Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV3Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV3 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV3, options: TradeV3Options | TradeV3OptionsDeadline): SwapV3Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import { StablePool } from \"./stablePool\";\nimport { Token, } from \"./token\";\nimport { Price } from \"./fractions/price\";\nimport { TokenAmount } from \"./fractions/tokenAmount\";\nimport invariant from \"tiny-invariant\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Source } from './source';\nimport { ChainId, STABLE_POOL_LP_ADDRESS } from \"./../constants\";\n\n// A class that wraps a stablePool to a pair-like structure\nexport class StablePairWrapper implements Source {\n\n    // the tokenAmounts are the reference Balances that we keep track of in the stablePool\n    // whenever we make changes to these, we need to update the stablePool reference Balance to calculate the correct \n    public readonly tokenAmounts: TokenAmount[]\n    public readonly stableIndexes: number[]\n\n    // the tokenAmount for calculating the price\n    // these cannot be derived from the tokenAmounts since\n    // they follow the stableSwap logic for pricing\n    public pricingBasesIn: TokenAmount[]\n    public pricingBasesOut: TokenAmount[]\n    public readonly type: string\n    public readonly referenceMidPrices: Price[]\n    public readonly liquidityToken: Token\n\n    // public readonly inputReserve: TokenAmount\n    // public readonly outputReserve: TokenAmount\n\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, indexA: number, indexB: number) {\n\n        invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_IDS')\n\n        this.liquidityToken = new Token(\n            tokenAmountA.token.chainId,\n            STABLE_POOL_LP_ADDRESS[tokenAmountA.token.chainId] ?? '0x0000000000000000000000000000000000000001',\n            18,\n            'RequiemStable-LP',\n            'Requiem StableSwap LPs'\n        )\n\n        this.tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.stableIndexes = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [indexA, indexB] : [indexB, indexA]\n\n        this.pricingBasesIn = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.pricingBasesOut = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n\n        this.referenceMidPrices = []\n        this.type = 'StablePairWrapper'\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    // reserves cannot be this.tokenAmounts because\n    // these are directly used for prices\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    // this gets the reserve of the respectve (stable) token\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n\n    public priceOf(token: Token, stablePool: StablePool, volume: BigNumber) {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price(stablePool, volume) : this.token1Price(stablePool, volume)\n    }\n\n    /**\n * Returns the current price at given volume of the pair in terms of token0, i.e. the ratio calculated by the stableSwap\n */\n    public token0Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken1 = stablePool.calculateSwap(this.stableIndexes[0], this.stableIndexes[1], volume)\n        return new Price(this.token0, this.token1, outToken1.toBigInt(), volume.toBigInt())\n    }\n\n    /**\n * Returns the current mid price of the pair in terms of token1, i.e. the ratio calculated by the stableSwap\n */\n    public token1Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken0 = stablePool.calculateSwap(this.stableIndexes[1], this.stableIndexes[0], volume)\n        return new Price(this.token1, this.token0, outToken0.toBigInt(), volume.toBigInt())\n    }\n\n    public priceFromReserve(outToken: Token) {\n        const outIndex = outToken.equals(this.token0) ? 0 : 1\n        const inIndex = outToken.equals(this.token1) ? 0 : 1\n        return new Price(\n            this.pricingBasesIn[inIndex].token,\n            this.pricingBasesOut[outIndex].token,\n            this.pricingBasesIn[inIndex].raw,\n            this.pricingBasesOut[outIndex].raw\n        )\n    }\n\n    // function that wraps the output calculation based on a stablePool\n    public getOutputAmount(inputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        // set the balance values to the expected valuses\n        stablePool.setBalanceValue(this.tokenAmounts[0])\n        stablePool.setBalanceValue(this.tokenAmounts[1])\n\n        const output = stablePool.getOutputAmount(\n            inputAmount,\n            this.token0.equals(inputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // adjust the values based on the supposdly executed trade\n        stablePool.setBalanceValue(inputReserve.add(inputAmount))\n        stablePool.setBalanceValue(outputReserve.subtract(output))\n\n        // here we save the pricing results if it is called\n        const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n        const outIndex = output.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = inputAmount\n        this.pricingBasesOut[outIndex] = output\n\n        return [\n            output,\n            new StablePairWrapper(\n                inputReserve.add(inputAmount),\n                outputReserve.subtract(output), stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))\n        ]\n    }\n\n    // function that wraps the input calculation based on a stablePool\n    public getInputAmount(outputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        stablePool.setBalanceValue(this.tokenAmounts[0])\n        stablePool.setBalanceValue(this.tokenAmounts[1])\n\n        const input = stablePool.getInputAmount(\n            outputAmount,\n            this.token0.equals(outputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // here we save the pricing results if it is called\n        const inIndex = input.token.equals(this.token0) ? 0 : 1\n        const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = input\n        this.pricingBasesOut[outIndex] = outputAmount\n\n        stablePool.setBalanceValue(inputReserve.add(input))\n        stablePool.setBalanceValue(outputReserve.subtract(outputAmount))\n\n        return [input,\n            new StablePairWrapper(\n                inputReserve.add(input),\n                outputReserve.subtract(outputAmount), stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))]\n    }\n\n    // generates the n^2-n combinations for wrappedStablePairs\n    public static wrapPairsFromPool(stablePool: StablePool): StablePairWrapper[] {\n\n        let wrapperList = []\n\n        for (let i = 0; i < stablePool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                wrapperList.push(new StablePairWrapper(\n                    new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n                    new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n                    i,\n                    j\n                ))\n            }\n        }\n        return wrapperList\n    }\n}","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\nimport { StablePairWrapper } from './stablePairWrapper'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly sources: (Pair|StablePairWrapper)[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(sources: (Pair|StablePairWrapper)[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(\n      sources.every(source => source.chainId === sources[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && sources[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[sources[0].chainId] && sources[0].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && sources[sources.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[sources[0].chainId] && sources[sources.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[sources[0].chainId]]\n    for (const [i, source] of sources.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.sources = sources\n    this.path = path\n    this.midPrice = Price.fromRouteV3(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.sources[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextSources: (Pair | StablePairWrapper)[] = new Array(route.sources.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const source = route.sources[i]\n        const [outputAmount, nextSource] = source instanceof Pair ?\n          source.getOutputAmount(amounts[i]) :\n          source.getOutputAmount(amounts[i], route.stablePool)\n        amounts[i + 1] = outputAmount\n        nextSources[i] = nextSource\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const source = route.sources[i - 1]\n        const [inputAmount, nextSource] = source instanceof Pair ?\n          source.getInputAmount(amounts[i]) :\n          source.getInputAmount(amounts[i], route.stablePool)\n        amounts[i - 1] = inputAmount\n        nextSources[i - 1] = nextSource\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV3(new RouteV3(nextSources, route.stablePool, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < sources.length; i++) {\n      let source = sources[i]\n\n\n      if (!source.token0.equals(amountIn.token) && !source.token1.equals(amountIn.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = source instanceof Pair ? source.getOutputAmount(amountIn) : source.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentSources, source], stablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactIn(\n          stablePool,\n          sourcesExcludingThisSource,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentSources, source],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param sources the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentSources used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      // source irrelevant\n      if (!source.token0.equals(amountOut.token) && !source.token1.equals(amountOut.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = source instanceof Pair ? source.getInputAmount(amountOut) : source.getInputAmount(amountOut, stablePool)\n      } catch (error) {\n        // not enough liquidity in this source\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([source, ...currentSources], stablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOut(\n          stablePool,\n          sourcesExcludingThisSource,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [source, ...currentSources],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","NETWORK_CCY","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fromRouteV3","sources","source","type","pricingBasesIn","pricingBasesOut","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances","MAX_ITERATION","A_PRECISION","FEE_DENOMINATOR","_xp","rates","result","mul","_getAPrecise","blockTimestamp","swapStorage","gte","futureATime","futureA","gt","initialA","sub","initialATime","_sumOf","sum","_distance","_getD","xp","amp","nCoins","eq","Dprev","D","Ann","D_P","j","lte","_getY","inIndex","outIndex","inBalance","normalizedBalances","c","lastY","index","calculateSwap","inAmount","tokenMultipliers","newInBalance","outBalance","outAmount","_fee","fee","_calculateRemoveLiquidity","currentWithdrawFee","feeAdjustedAmount","_getYD","A","s","_x","yPrev","lt","_feePerToken","_calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","expectedDx","dy","_calculateTokenAmount","deposit","newBalances","diff","SwapStorage","adminFee","lpAddress","mock","dummy","StablePool","tokenBalances","_A","lpTotalSupply","values","ethers","constants","AddressZero","getRouterAddress","getLpAddress","res","keys","tokenFromIndex","indexFromToken","getBalances","_","generatePairs","relevantStables","generatedPairs","forEach","includes","calculateSwapViaPing","utils","Interface","StableSwap","swap","toBigInt","calculateRemoveLiquidity","amountLp","calculateRemoveLiquidityOneToken","getLiquidityAmount","userBalances","setSwapStorage","setTokenBalances","setBlockTimestamp","setLpTotalSupply","setBalanceValueByIndex","newBalance","setBalanceValue","feeToSet","StablesFetcher","fetchStablePoolData","console","log","getTokens","tokenAddresses","indexes","RouterV3","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","StablePairWrapper","indexA","indexB","stableIndexes","referenceMidPrices","stablePool","volume","outToken1","outToken0","priceFromReserve","outToken","wrapPairsFromPool","wrapperList","RouteV3","inputOutputComparatorV3","tradeComparatorV3","TradeV3","nextSources","nextSource","currentSources","sourcesExcludingThisSource"],"mappings":"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"}