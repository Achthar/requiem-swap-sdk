{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pool.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/calculators/LogExpMath.ts","../src/entities/calculators/FixedPoint.ts","../src/entities/calculators/WeightedMath.ts","../src/entities/calculators/WeightedPoolLib.ts","../src/entities/calculators/weightedSwapStorage.ts","../src/entities/calculators/weightedPairCalc.ts","../src/entities/weightedPair.ts","../src/entities/stables.ts","../src/entities/stablePairWrapper.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts","../src/entities/routeV4.ts","../src/entities/tradeV4.ts","../src/entities/bonds/bondCalculator.ts","../src/entities/bonds/fixedPoint.ts","../src/entities/bonds/bondDepository.ts","../src/router.ts","../src/fetcher.ts","../src/stablesFetcher.ts","../src/routerV3.ts","../src/routerV4.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n  OASIS_TESTNET = 42261,\n  OASIS_MAINNET = 42262,\n  QUARKCHAIN_DEV_S0 = 110001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\nexport const WEIGHTED_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xacd3602152763C3AAFA705D8a90C36661ecD7d46',\n  42261: '0x0459e858F17ef5D927625f34602432f4fac6941e',\n  110001: '0xe092CB3124aF36a0B851839D8EC51CaaD9a3DCD0'\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x0865ff20af2c8d0b18c74020d2df989c6840f40dbdc7f75f501820a7122786e4',\n}\n\nexport const INIT_CODE_HASH_WEIGHTED: { [chainId: number]: string } = {\n  43113: '0xbeec252b6527ff023d9f20fa336f9f131a002be662ce64ef7f9ed17b5ea8b591',\n  42261: '0x0865ff20af2c8d0b18c74020d2df989c6840f40dbdc7f75f501820a7122786e4',\n  110001: '0x0865ff20af2c8d0b18c74020d2df989c6840f40dbdc7f75f501820a7122786e4'\n}\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x0Be60C571BdA7841D8F6eE68afDBa648EC710fD7',\n  42261: '0x2a90276992ddC21C3585FE50f5B43D0Cf62aDe03',\n  110001: '0x211F00f4071A4af8f0cC289d9853d778047DB8Ba',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x3372de341a07418765ae12f77aee9029eaa4442a',\n  42261: '0x9364E91ca784ca51f88dE2a76a35Ba2665bdad04',\n  110001: '0x029f9f8e2c27627341824120ee814F31a1551256'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const TENK = JSBI.BigInt(10000)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.OASIS_MAINNET]: new Currency(18, 'ROSE', 'ROSE'),\n    [ChainId.OASIS_TESTNET]: new Currency(18, 'ROSE', 'ROSE'),\n    [ChainId.QUARKCHAIN_DEV_S0]: new Currency(18, 'QKC', 'QKC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.OASIS_TESTNET]:\n  new Token( ChainId.OASIS_TESTNET,\n    '0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n  [ChainId.OASIS_MAINNET]:\n  new Token( ChainId.OASIS_MAINNET,\n    '0xfb40cd35C0cF322fA3cfB8D67b533Bd9ad7df056',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n  [ChainId.QUARKCHAIN_DEV_S0]:\n  new Token( ChainId.OASIS_MAINNET,\n    '0x56fB4da0E246003DEc7dD108e47f5d8e8F4cC493',\n    18,\n    'wQKC',\n    'Wrapped QKC',\n    'https://docs.oasis.dev/'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Pair } from \"./pair\"\nimport { StablePairWrapper } from \"./stablePairWrapper\"\nimport { WeightedPair } from \"./weightedPair\"\n\nexport type Pool = Pair | StablePairWrapper | WeightedPair\n\nexport enum PoolType {\n    Pair = 'Pair',\n    StablePairWrapper = 'StablePairWrapper',\n    WeightedPair = 'WeightedPair',\n}","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { RouteV3 } from 'entities/routeV3'\nimport { RouteV4 } from 'entities/routeV4'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n// import { Pair } from 'entities'\nimport { StablePairWrapper } from 'entities/stablePairWrapper'\nimport { WeightedPair } from 'entities'\nimport { PoolType } from '../pool'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV3(route: RouteV3): Price {\n    const prices: Price[] = []\n    for (const [i, source] of route.sources.entries()) {\n      // if (source.type !== 'Pair') {\n      //   console.log(\"invariant\", (source as StablePairWrapper).status)\n      //   invariant((source as StablePairWrapper).status === 'PRICED', 'NOT PRICED')\n      // }\n      prices.push(\n        route.path[i].equals(source.token0)\n          ? (source.type === PoolType.Pair\n            ? new Price(source.reserve0.currency, source.reserve1.currency, source.reserve0.raw, source.reserve1.raw)\n            // here we need the recorded prcing bases\n            : new Price(source.reserve0.currency, source.reserve1.currency,\n              (source as StablePairWrapper).pricingBasesIn[0].raw,\n              (source as StablePairWrapper).pricingBasesOut[1].raw))\n          : (source.type === PoolType.Pair ?\n            new Price(source.reserve1.currency, source.reserve0.currency, source.reserve1.raw, source.reserve0.raw)\n            // pricing base for stablePriceWrapper\n            : new Price(source.reserve1.currency, source.reserve0.currency,\n              (source as StablePairWrapper).pricingBasesIn[1].raw,\n              (source as StablePairWrapper).pricingBasesOut[0].raw))\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  // as well as weighted pairs\n  public static fromRouteV4(route: RouteV4): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      let price: any\n      if (route.path[i].equals(pool.token0)) {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency, pool.reserve0.raw, pool.reserve1.raw)\n            break;\n          }\n          // here we need the recorded prcing bases\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as StablePairWrapper).pricingBasesIn[0].raw,\n              (pool as StablePairWrapper).pricingBasesOut[1].raw)\n            break;\n          }\n          // prcing for weighted pairs - not directly derivable from token amounts\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as WeightedPair).pricingBasesIn[0].raw,\n              (pool as WeightedPair).pricingBasesOut[1].raw)\n            break;\n          }\n        }\n      }\n      else {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency, pool.reserve1.raw, pool.reserve0.raw)\n            break;\n          }\n          // pricing base for stablePriceWrapper\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as StablePairWrapper).pricingBasesIn[1].raw,\n              (pool as StablePairWrapper).pricingBasesOut[0].raw)\n            break;\n          }\n          // pricing base for weighted pairs\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as WeightedPair).pricingBasesIn[1].raw,\n              (pool as WeightedPair).pricingBasesOut[0].raw)\n            break;\n          }\n        }\n      }\n      prices.push(price)\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { Source } from './source'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair implements Source {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(\n              ['bytes'],\n              [pack(\n                ['address', 'address'],\n                [tokens[0].address, tokens[1].address]\n              )]\n            ),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.Pair\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","// SPDX-License-Identifier: MIT\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the “Software”), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { BigNumber } from '@ethersproject/bignumber'\n// import { ethers } from 'ethers'\n\n/* solhint-disable */\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman - @sergioyuhjtman\n * @author Daniel Fernandez - @dmf7z\n */\n\n// All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n// two numbers, and multiply by ONE when dividing them.\nexport const ZERO = BigNumber.from(0)\n// All arguments and return values are 18 decimal fixed point numbers.\nexport const ONE_18 = BigNumber.from('1000000000000000000');\n\n// Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n// case of ln36, 36 decimals.\nconst ONE_20 = BigNumber.from('100000000000000000000');\nconst ONE_36 = BigNumber.from('1000000000000000000000000000000000000');\n\n// The domain of natural exponentiation is bound by the word size and number of decimals used.\n//\n// Because internally the result will be stored using 20 decimals, the largest possible result is\n// (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n// The smallest possible result is 10^(-18), which makes largest negative argument\n// ln(10^(-18)) = -41.446531673892822312.\n// We use 130.0 and -41.0 to have some safety margin.\n// const MAX_NATURAL_EXPONENT = BigNumber.from('130000000000000000000');\n// const MIN_NATURAL_EXPONENT = BigNumber.from(-'41000000000000000000');\n\n// Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n// 256 bit integer.\nconst LN_36_LOWER_BOUND = ONE_18.sub(BigNumber.from('100000000000000000'));\nconst LN_36_UPPER_BOUND = ONE_18.add(BigNumber.from('100000000000000000'));\n\n// const MILD_EXPONENT_BOUND = ethers.constants.MaxUint256.div(ONE_20);\n\n// 18 decimal constants\nconst x0 = BigNumber.from('128000000000000000000'); // 2ˆ7\nconst a0 = BigNumber.from('38877084059945950922200000000000000000000000000000000000'); // eˆ(x0) (no decimals)\nconst x1 = BigNumber.from('64000000000000000000'); // 2ˆ6\nconst a1 = BigNumber.from('6235149080811616882910000000'); // eˆ(x1) (no decimals)\n\n// 20 decimal constants\nconst x2 = BigNumber.from('3200000000000000000000'); // 2ˆ5\nconst a2 = BigNumber.from('7896296018268069516100000000000000'); // eˆ(x2)\nconst x3 = BigNumber.from('1600000000000000000000'); // 2ˆ4\nconst a3 = BigNumber.from('888611052050787263676000000'); // eˆ(x3)\nconst x4 = BigNumber.from('800000000000000000000'); // 2ˆ3\nconst a4 = BigNumber.from('298095798704172827474000'); // eˆ(x4)\nconst x5 = BigNumber.from('400000000000000000000'); // 2ˆ2\nconst a5 = BigNumber.from('5459815003314423907810'); // eˆ(x5)\nconst x6 = BigNumber.from('200000000000000000000'); // 2ˆ1\nconst a6 = BigNumber.from('738905609893065022723'); // eˆ(x6)\nconst x7 = BigNumber.from('100000000000000000000'); // 2ˆ0\nconst a7 = BigNumber.from('271828182845904523536'); // eˆ(x7)\nconst x8 = BigNumber.from('50000000000000000000'); // 2ˆ-1\nconst a8 = BigNumber.from('164872127070012814685'); // eˆ(x8)\nconst x9 = BigNumber.from('25000000000000000000'); // 2ˆ-2\nconst a9 = BigNumber.from('128402541668774148407'); // eˆ(x9)\nconst x10 = BigNumber.from('12500000000000000000'); // 2ˆ-3\nconst a10 = BigNumber.from('113314845306682631683'); // eˆ(x10)\nconst x11 = BigNumber.from('6250000000000000000'); // 2ˆ-4\nconst a11 = BigNumber.from('106449445891785942956'); // eˆ(x11)\n\n/**\n * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n *\n * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n */\nexport function pow(x: BigNumber, y: BigNumber): BigNumber {\n    if (y.eq(0)) {\n        // We solve the 0^0 indetermination by making it equal one.\n        return ONE_18;\n    }\n\n    if (x.eq(0)) {\n        return ZERO;\n    }\n    let x_int256 = x;\n    let y_int256 = y\n    let logx_times_y\n    if (LN_36_LOWER_BOUND.lt(x_int256) && x_int256.lt(LN_36_UPPER_BOUND)) {\n        let ln_36_x = _ln_36(x_int256);\n\n        // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n        // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n        // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n        // (downscaled) last 18 decimals.\n        logx_times_y = ln_36_x.div(ONE_18).mul(y_int256).add((ln_36_x.mod(ONE_18).mul(y_int256).div(ONE_18)))\n    } else {\n        logx_times_y = _ln(x_int256).mul(y_int256);\n    }\n    logx_times_y = logx_times_y.div(ONE_18);\n\n\n    return exp(logx_times_y); // that +1 differs from the original variant\n}\n\n/**\n * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n *\n * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n */\nexport function exp(x: BigNumber): BigNumber {\n\n    if (x.lt(ZERO)) {\n        // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n        // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n        // Fixed point division requires multiplying by ONE_18.\n        return (ONE_18.mul(ONE_18)).div(exp(x.mul(-1)));\n    }\n    // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n    // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n    // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n    // decomposition.\n    // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest x_n.\n    // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n    // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n    // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n    // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n    // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n    // decomposition.\n\n    // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n    // it and compute the accumulated product.\n\n    let firstAN;\n    if (x.gte(x0)) {\n        x = x.sub(x0);\n        firstAN = a0;\n    } else if (x.gte(x1)) {\n        x = x.sub(x1);\n        firstAN = a1;\n    } else {\n        firstAN = BigNumber.from(1); // One with no decimal places\n    }\n\n    // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n    // smaller terms.\n    x = x.mul(100);\n\n    // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n    // one. Recall that fixed point multiplication requires dividing by ONE_20.\n    let product = ONE_20;\n\n    if (x.gte(x2)) {\n        x = x.sub(x2);\n        product = product.mul(a2).div(ONE_20);\n    }\n    if (x.gte(x3)) {\n        x = x.sub(x3);\n        product = product.mul(a3).div(ONE_20);\n    }\n    if (x.gte(x4)) {\n        x = x.sub(x4);\n        product = product.mul(a4).div(ONE_20);\n    }\n    if (x.gte(x5)) {\n        x = x.sub(x5);\n        product = product.mul(a5).div(ONE_20);\n    }\n    if (x.gte(x6)) {\n        x = x.sub(x6);\n        product = product.mul(a6).div(ONE_20);\n    }\n    if (x.gte(x7)) {\n        x = x.sub(x7);\n        product = product.mul(a7).div(ONE_20);\n    }\n    if (x.gte(x8)) {\n        x = x.sub(x8);\n        product = product.mul(a8).div(ONE_20);\n    }\n    if (x.gte(x9)) {\n        x = x.sub(x9);\n        product = product.mul(a9).div(ONE_20);\n    }\n\n    // x10 and x11 are unnecessary here since we have high enough precision already.\n\n    // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n    // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n    let seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n    let term; // Each term in the sum, where the nth term is (x^n / n!).\n\n    // The first term is simply x.\n    term = x;\n    seriesSum = seriesSum.add(term);\n\n    // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n    // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n    term = term.mul(x).div(ONE_20).div(2);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(3);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(4);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(5);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(6);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(7);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(8);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(9);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(10);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(11);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(12);\n    seriesSum = seriesSum.add(term);\n\n    // 12 Taylor terms are sufficient for 18 decimal precision.\n\n    // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n    // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n    // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n    // and then drop two digits to return an 18 decimal value.\n\n    return ((product.mul(seriesSum)).div(ONE_20).mul(firstAN)).div(100);\n}\n\n/**\n * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\n */\nexport function log(arg: BigNumber, base: BigNumber): BigNumber {\n    // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n\n    // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n    // upscaling.\n\n    let logBase;\n    if (LN_36_LOWER_BOUND.lt(base) && base.lt(LN_36_UPPER_BOUND)) {\n        logBase = _ln_36(base);\n    } else {\n        logBase = _ln(base).mul(ONE_18);\n    }\n\n    let logArg;\n    if (LN_36_LOWER_BOUND.lt(arg) && arg.lt(LN_36_UPPER_BOUND)) {\n        logArg = _ln_36(arg);\n    } else {\n        logArg = _ln(arg).mul(ONE_18);\n    }\n\n    // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n    return logArg.mul(ONE_18).div(logBase);\n}\n\n/**\n * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n */\nexport function ln(a: BigNumber): BigNumber {\n    // The real natural logarithm is not defined for negative numbers or zero.\n\n    if (LN_36_LOWER_BOUND.lt(a) && a.lt(LN_36_UPPER_BOUND)) {\n        return _ln_36(a).div(ONE_18);\n    } else {\n        return _ln(a);\n    }\n}\n\n/**\n * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n */\nexport function _ln(a: BigNumber): BigNumber {\n    if (a.lt(ONE_18)) {\n        // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n        // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n        // Fixed point division requires multiplying by ONE_18.\n        return (_ln((ONE_18.mul(ONE_18)).div(a))).mul(-1);\n    }\n\n    // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n    // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n    // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n    // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n    // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest a_n.\n    // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n    // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n    // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n    // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n    // ONE_18 to convert them to fixed point.\n    // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n    // by it and compute the accumulated sum.\n\n    let sum = ZERO;\n    if (a.gte(a0.mul(ONE_18))) {\n        a = a.div(a0); // Integer, not fixed point division\n        sum = sum.add(x0);\n    }\n\n    if (a.gte(a1.mul(ONE_18))) {\n        a = a.div(a1); // Integer, not fixed point division\n        sum = sum.add(x1);\n    }\n\n    // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n    sum = sum.mul(100);\n    a = a.mul(100);\n\n    // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n    if (a.gte(a2)) {\n        a = a.mul(ONE_20).div(a2);\n        sum = sum.add(x2);\n    }\n\n    if (a.gte(a3)) {\n        a = a.mul(ONE_20).div(a3);\n        sum = sum.add(x3);\n    }\n\n    if (a.gte(a4)) {\n        a = a.mul(ONE_20).div(a4);\n        sum = sum.add(x4);\n    }\n\n    if (a.gte(a5)) {\n        a = a.mul(ONE_20).div(a5);\n        sum = sum.add(x5);\n    }\n\n    if (a.gte(a6)) {\n        a = a.mul(ONE_20).div(a6);\n        sum = sum.add(x6);\n    }\n\n    if (a.gte(a7)) {\n        a = a.mul(ONE_20).div(a7);\n        sum = sum.add(x7);\n    }\n\n    if (a.gte(a8)) {\n        a = a.mul(ONE_20).div(a8);\n        sum = sum.add(x8);\n    }\n\n    if (a.gte(a9)) {\n        a = a.mul(ONE_20).div(a9);\n        sum = sum.add(x9);\n    }\n\n    if (a.gte(a10)) {\n        a = a.mul(ONE_20).div(a10);\n        sum = sum.add(x10);\n    }\n\n    if (a.gte(a11)) {\n        a = a.mul(ONE_20).div(a11);\n        sum = sum.add(x11);\n    }\n\n    // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n    // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n    // Let z = (a - 1) / (a + 1).\n    // ln(a) =2.mul((z + z^.div( 3) + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n    // division by ONE_20.\n    let z = ((a.sub(ONE_20)).mul(ONE_20)).div(a.add(ONE_20));\n    let z_squared = (z.mul(z)).div(ONE_20);\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(3));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(5));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(7));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(9));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(11));\n\n    // 6 Taylor terms are sufficient for 36 decimal precision.\n\n    // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n    seriesSum = seriesSum.mul(2);\n\n    // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n    // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n    // value.\n\n    return sum.add(seriesSum).div(100);\n}\n\n/**\n * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n * for x close to one.\n *\n * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n */\nexport function _ln_36(x: BigNumber): BigNumber {\n    // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n    // worthwhile.\n\n    // First, we transform x to a 36 digit fixed point value.\n    x = x.mul(ONE_18);\n\n    // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n    // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n    // division by ONE_36.\n    let z = x.sub(ONE_36).mul(ONE_36).div(x.add(ONE_36));\n    let z_squared = z.mul(z).div(ONE_36);\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(3));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(5));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(7));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(9));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(11));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(13));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(15));\n\n    // 8 Taylor terms are sufficient for 36 decimal precision.\n\n    // All that remains is multiplying by 2 (non fixed point).\n    return seriesSum.mul(2);\n}\n\n","\n// import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\n\nimport { pow, ZERO, ONE_18 } from \"./LogExpMath\";\n\nexport const ONE = ONE_18\n/* solhint-disable private-vars-leading-underscore */\n\n// const ONE = BigNumber.from(1e18); // 18 decimal places\nconst MAX_POW_RELATIVE_ERROR = BigNumber.from(10000); // 10^(-14)\n\n// Minimum base for the power function when the exponent is 'free' (larger than ONE).\nexport const MIN_POW_BASE_FREE_EXPONENT = BigNumber.from('700000000000000000');\n\n\nexport function mulDown(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n\n    return product.div(ONE);\n}\n\nexport function mulUp(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n\n    if (product.eq(0)) {\n        return BigNumber.from(0);\n    } else {\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for.\n\n        return (product.sub(1).div(ONE)).add(1);\n    }\n}\n\nexport function divDown(a: BigNumber, b: BigNumber): BigNumber {\n\n    if (a.eq(ZERO)) {\n        return ZERO;\n    } else {\n        let aInflated = a.mul(ONE);\n        return aInflated.div(b);\n    }\n}\n\nexport function divUp(a: BigNumber, b: BigNumber): BigNumber {\n\n    if (a.eq(ZERO)) {\n        return ZERO;\n    } else {\n        let aInflated = a.mul(ONE);\n\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for.\n\n        return aInflated.sub(1).div(b).add(1);\n    }\n}\n\n/**\n * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n * the true value (that is, the error function expected - actual is always positive).\n */\nexport function powDown(x: BigNumber, y: BigNumber): BigNumber {\n    let raw = pow(x, y);\n    let maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR).add(1);\n\n    if (raw < maxError) {\n        return ZERO;\n    } else {\n        return raw.sub(maxError);\n    }\n}\n\n/**\n * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n * the true value (that is, the error function expected - actual is always negative).\n */\nexport function powUp(x: BigNumber, y: BigNumber): BigNumber {\n    const raw = pow(x, y);\n    const maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR).add(1);\n\n    return raw.add(maxError);\n}\n\n/**\n * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n *\n * Useful when computing the complement for values with some level of relative error, as it strips this error and\n * prevents intermediate negative values.\n */\nexport function complement(x: BigNumber): BigNumber {\n    return x.lt(ONE) ? ONE.sub(x) : ZERO;\n}\n\n\n/**\n * @dev Returns the largest of two numbers of 256 bits.\n */\nexport function max(a: BigNumber, b: BigNumber): BigNumber {\n    return a.gte(b) ? a : b;\n}\n\n/**\n * @dev Returns the smallest of two numbers of 256 bits.\n */\nexport function min(a: BigNumber, b: BigNumber): BigNumber {\n    return a.lt(b) ? a : b;\n}\n\n","\nimport { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { mulDown, powUp, powDown, divUp, divDown, complement, ONE, mulUp, max, MIN_POW_BASE_FREE_EXPONENT } from './FixedPoint'\nimport { ZERO } from './LogExpMath';\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\n// should be fixed.\n// solhint-disable private-vars-leading-underscore\n\n\n\n// A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\n// implementation of the power function, as these ratios are often exponents.\n// const _MIN_WEIGHT = BigNumber.from(0.01e18);\n// Having a minimum normalized weight imposes a limit on the maximum number of tokens;\n// i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\n// const _MAX_WEIGHTED_TOKENS = BigNumber.from(100);\n\n// Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\n// ratio).\n\n// Swap limits: amounts swapped may not be larger than this percentage of total balance.\nconst _MAX_IN_RATIO = BigNumber.from('300000000000000000'); //0.3e18\nconst _MAX_OUT_RATIO = BigNumber.from('300000000000000000'); //0.3e18\n\n// Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\nconst _MAX_INVARIANT_RATIO = BigNumber.from('3000000000000000000'); //3e18\n// Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\nconst _MIN_INVARIANT_RATIO = BigNumber.from('700000000000000000'); //0.7e18\n\n// About swap fees on joins and exits:\n// Any join or exit that is not perfectly balanced (e.g. all single token joins or exits) is mathematically\n// equivalent to a perfectly balanced join or  exit followed by a series of swaps. Since these swaps would charge\n// swap fees, it follows that (some) joins and exits should as well.\n// On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\n// is the one to which swap fees are applied.\n\n// Invariant is used to collect protocol swap fees by comparing its value between two times.\n// So we can round always to the same direction. It is also used to initiate the BPT amount\n// and, because there is a minimum BPT, we round down the invariant.\nexport function _calculateInvariant(normalizedWeights: BigNumber[], balances: BigNumber[]): BigNumber {\n    /**********************************************************************************************\n    // invariant               _____                                                             //\n    // wi = weight index i      | |      wi                                                      //\n    // bi = balance index i     | |  bi ^   = i                                                  //\n    // i = invariant                                                                             //\n    **********************************************************************************************/\n\n    let _invariant = ONE;\n    for (let i = 0; i < normalizedWeights.length; i++) {\n        _invariant = mulDown(_invariant, powUp(balances[i], normalizedWeights[i]));\n    }\n\n    invariant(_invariant.gt(0), \"ZERO_INVARIANT\");\n\n    return _invariant\n}\n\n\n\n// Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\n// current balances and weights.\nexport function _calcOutGivenIn(\n    balanceIn: BigNumber,\n    weightIn: BigNumber,\n    balanceOut: BigNumber,\n    weightOut: BigNumber,\n    amountIn: BigNumber\n): BigNumber {\n    /**********************************************************************************************\n    // outGivenIn                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /      /            bI             \\    (wI / wO) \\           //\n    // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\n    // wI = weightIn               \\      \\       ( bI + aI )         /              /           //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // Amount out, so we round down overall.\n\n    // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\n    // Because bI / (bI + aI) <= 1, the exponent rounds down.\n\n    // Cannot exceed maximum in ratio\n    invariant(amountIn.lte(mulDown(balanceIn, _MAX_IN_RATIO)), \"MAX_IN_RATIO\");\n\n    const denominator = balanceIn.add(amountIn);\n    const base = divUp(balanceIn, denominator);\n    const exponent = divDown(weightIn, weightOut);\n    const power = powUp(base, exponent);\n\n    return mulDown(balanceOut, complement(power));\n}\n\n// Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\n// current balances and weights.\nexport function _calcInGivenOut(\n    balanceIn: BigNumber,\n    weightIn: BigNumber,\n    balanceOut: BigNumber,\n    weightOut: BigNumber,\n    amountOut: BigNumber\n): BigNumber {\n    /**********************************************************************************************\n    // inGivenOut                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /  /            bO             \\    (wO / wI)      \\          //\n    // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\n    // wI = weightIn               \\  \\       ( bO - aO )         /                   /          //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // Amount in, so we round up overall.\n\n    // The multiplication rounds up, and the power rounds up (so the base rounds up too).\n    // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\n\n    // Cannot exceed maximum out ratio\n    invariant(amountOut.lte(mulDown(balanceOut, _MAX_OUT_RATIO)), \"MAX_OUT_RATIO\");\n\n    const base = divUp(balanceOut, balanceOut.sub(amountOut));\n    const exponent = divUp(weightOut, weightIn);\n    const power = powUp(base, exponent);\n\n    // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\n    // the following subtraction should never revert.\n    const ratio = power.sub(ONE);\n\n    return mulUp(balanceIn, ratio);\n}\n\nexport function _calcLpOutGivenExactTokensIn(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsIn: BigNumber[],\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { lpOut: BigNumber, swapFees: BigNumber[] } {\n    // BPT out, so we round down overall.\n\n    let balanceRatiosWithFee = [];\n\n    let invariantRatioWithFees = ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithFee.push(divDown(balances[i].add(amountsIn[i]), balances[i]));\n        invariantRatioWithFees = mulDown(invariantRatioWithFees.add(balanceRatiosWithFee[i]), normalizedWeights[i]);\n    }\n\n    const { invariantRatio, swapFees } = _computeJoinExactTokensInInvariantRatio(\n        balances,\n        normalizedWeights,\n        amountsIn,\n        balanceRatiosWithFee,\n        invariantRatioWithFees,\n        swapFeePercentage\n    );\n\n    const lpOut = invariantRatio.gt(ONE) ? mulDown(lpTotalSupply, invariantRatio.sub(ONE)) : ZERO;\n    return { lpOut, swapFees };\n}\n\n/**\n * @dev Intermediate function to avoid stack-too-deep \"\n */\nexport function _computeJoinExactTokensInInvariantRatio(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsIn: BigNumber[],\n    balanceRatiosWithFee: BigNumber[],\n    invariantRatioWithFees: BigNumber,\n    swapFeePercentage: BigNumber\n): { invariantRatio: BigNumber, swapFees: BigNumber[] } {\n    // Swap fees are charged on all tokens that are being added in a larger proportion than the overall invariant\n    // increase.\n    let swapFees = [];\n    let invariantRatio = ONE;\n\n    for (let i = 0; i < balances.length; i++) {\n        let amountInWithoutFee;\n\n        if (balanceRatiosWithFee[i].gt(invariantRatioWithFees)) {\n            const nonTaxableAmount = mulDown(balances[i], invariantRatioWithFees.sub(ONE));\n            const taxableAmount = amountsIn[i].sub(nonTaxableAmount);\n            const swapFee = mulUp(taxableAmount, swapFeePercentage);\n\n            amountInWithoutFee = nonTaxableAmount.add(taxableAmount.sub(swapFee));\n            swapFees[i] = swapFee;\n        } else {\n            amountInWithoutFee = amountsIn[i];\n        }\n\n        const balanceRatio = divDown(balances[i].add(amountInWithoutFee), balances[i]);\n\n        invariantRatio = mulDown(invariantRatio, powDown(balanceRatio, normalizedWeights[i]));\n    }\n\n    return { invariantRatio, swapFees }\n}\n\nexport function _calcTokenInGivenExactLpOut(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    lpAmountOut: BigNumber,\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { amountIn: BigNumber, swapFee: BigNumber } {\n    /******************************************************************************************\n    // tokenInForExactLpOut                                                                 //\n    // a = amountIn                                                                          //\n    // b = balance                      /  /    totalBPT + LpOut      \\    (1 / w)       \\  //\n    // LpOut = lpAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\n    // lp = totalBPT                   \\  \\       totalBPT            /                  /  //\n    // w = weight                                                                            //\n    ******************************************************************************************/\n\n    // Token in, so we round up overall.\n\n    // Calculate the factor by which the invariant will increase after minting BPTAmountOut\n    const invariantRatio = divUp(lpTotalSupply.add(lpAmountOut), lpTotalSupply);\n    invariant(invariantRatio.lte(_MAX_INVARIANT_RATIO), \"MAX_OUT_LP\");\n\n    // Calculate by how much the token balance has to increase to match the invariantRatio\n    const balanceRatio = powUp(invariantRatio, divUp(ONE, normalizedWeight));\n\n    const amountInWithoutFee = mulUp(balance, balanceRatio.sub(ONE));\n\n    // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\n    // accordingly.\n    const taxablePercentage = complement(normalizedWeight);\n    const taxableAmount = mulUp(amountInWithoutFee, taxablePercentage);\n    const nonTaxableAmount = amountInWithoutFee.sub(taxableAmount);\n\n    const taxableAmountPlusFees = divUp(taxableAmount, ONE.sub(swapFeePercentage));\n\n    return {\n        swapFee: taxableAmountPlusFees.sub(taxableAmount),\n        amountIn: nonTaxableAmount.add(taxableAmountPlusFees)\n    }\n}\n\nexport function _calcAllTokensInGivenExactLpOut(\n    balances: BigNumber[],\n    lpAmountOut: BigNumber,\n    totalBPT: BigNumber\n): BigNumber[] {\n    /************************************************************************************\n    // tokensInForExactLpOut                                                          //\n    // (per token)                                                                     //\n    // aI = amountIn                   /   LpOut   \\                                  //\n    // b = balance           aI = b * | ------------ |                                 //\n    // LpOut = lpAmountOut           \\  totalBPT  /                                  //\n    // lp = totalBPT                                                                  //\n    ************************************************************************************/\n\n    // Tokens in, so we round up overall.\n    const lpRatio = divUp(lpAmountOut, totalBPT);\n\n    let amountsIn = [];\n    for (let i = 0; i < balances.length; i++) {\n        amountsIn.push(mulUp(balances[i], lpRatio));\n    }\n\n    return amountsIn;\n}\n\nexport function _calcLpInGivenExactTokensOut(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsOut: BigNumber[],\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { lpIn: BigNumber, swapFees: BigNumber[] } {\n    // BPT in, so we round up overall.\n\n    let balanceRatiosWithoutFee = [];\n    let invariantRatioWithoutFees = ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithoutFee.push(divUp(balances[i].sub(amountsOut[i]), balances[i]));\n        invariantRatioWithoutFees = invariantRatioWithoutFees.add(mulUp(balanceRatiosWithoutFee[i], normalizedWeights[i]));\n    }\n\n    const { invariantRatio, swapFees } = _computeExitExactTokensOutInvariantRatio(\n        balances,\n        normalizedWeights,\n        amountsOut,\n        balanceRatiosWithoutFee,\n        invariantRatioWithoutFees,\n        swapFeePercentage\n    );\n\n    const lpIn = mulUp(lpTotalSupply, complement(invariantRatio));\n    return { lpIn, swapFees };\n}\n\n/**\n * @dev Intermediate function to avoid stack-too-deep \"\n */\nexport function _computeExitExactTokensOutInvariantRatio(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsOut: BigNumber[],\n    balanceRatiosWithoutFee: BigNumber[],\n    invariantRatioWithoutFees: BigNumber,\n    swapFeePercentage: BigNumber\n): { invariantRatio: BigNumber, swapFees: BigNumber[] } {\n    let swapFees = [];\n    let invariantRatio = ONE;\n\n    for (let i = 0; i < balances.length; i++) {\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\n        // 'token out'. This results in slightly larger price impact.\n\n        let amountOutWithFee;\n        if (invariantRatioWithoutFees.gt(balanceRatiosWithoutFee[i])) {\n            const nonTaxableAmount = mulDown(balances[i], complement(invariantRatioWithoutFees));\n            const taxableAmount = amountsOut[i].sub(nonTaxableAmount);\n            const taxableAmountPlusFees = divUp(taxableAmount, ONE.sub(swapFeePercentage));\n\n            swapFees[i] = taxableAmountPlusFees.sub(taxableAmount);\n            amountOutWithFee = nonTaxableAmount.add(taxableAmountPlusFees);\n        } else {\n            amountOutWithFee = amountsOut[i];\n        }\n\n        const balanceRatio = divDown(balances[i].sub(amountOutWithFee), balances[i]);\n\n        invariantRatio = mulDown(invariantRatio, powDown(balanceRatio, normalizedWeights[i]));\n    }\n\n    return { invariantRatio, swapFees }\n}\n\nexport function _calcTokenOutGivenExactLpIn(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    lpAmountIn: BigNumber,\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { amountOut: BigNumber, swapFee: BigNumber } {\n    /*****************************************************************************************\n    // exactBPTInForTokenOut                                                                //\n    // a = amountOut                                                                        //\n    // b = balance                     /      /    totalBPT - lpIn       \\    (1 / w)  \\   //\n    // lpIn = lpAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\n    // lp = totalBPT                  \\      \\       totalBPT            /             /   //\n    // w = weight                                                                           //\n    *****************************************************************************************/\n\n    // Token out, so we round down overall. The multiplication rounds down, but the power rounds up (so the base\n    // rounds up). Because (totalBPT - lpIn) / totalBPT <= 1, the exponent rounds down.\n\n    // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\n    const invariantRatio = divUp(lpTotalSupply.sub(lpAmountIn), lpTotalSupply);\n    invariant(invariantRatio >= _MIN_INVARIANT_RATIO, \"MIN_LP_IN\");\n\n    // Calculate by how much the token balance has to decrease to match invariantRatio\n    const balanceRatio = powUp(invariantRatio, divDown(ONE, normalizedWeight));\n\n    // Because of rounding up, balanceRatio can be greater than one. Using complement prevents reverts.\n    const amountOutWithoutFee = mulDown(balance, complement(balanceRatio));\n\n    // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\n    // in swap fees.\n    const taxablePercentage = complement(normalizedWeight);\n\n    // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\n    // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\n    const taxableAmount = mulUp(amountOutWithoutFee, taxablePercentage);\n    const nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\n\n    const swapFee = mulUp(taxableAmount, swapFeePercentage)\n    return {\n        swapFee,\n        amountOut: nonTaxableAmount.add(taxableAmount.sub(swapFee))\n    }\n}\n\nexport function _calcTokensOutGivenExactLpIn(\n    balances: BigNumber[],\n    lpAmountIn: BigNumber,\n    totalBPT: BigNumber\n): BigNumber[] {\n    /**********************************************************************************************\n    // exactBPTInForTokensOut                                                                    //\n    // (per token)                                                                               //\n    // aO = amountOut                  /        lpIn         \\                                  //\n    // b = balance           a0 = b * | ---------------------  |                                 //\n    // lpIn = lpAmountIn             \\       totalBPT       /                                  //\n    // lp = totalBPT                                                                            //\n    **********************************************************************************************/\n\n    // Since we're computing an amount out, we round down overall. This means rounding down on both the\n    // multiplication and division.\n\n    const lpRatio = divDown(lpAmountIn, totalBPT);\n\n    let amountsOut = [];\n    for (let i = 0; i < balances.length; i++) {\n        amountsOut.push(mulDown(balances[i], lpRatio));\n    }\n\n    return amountsOut;\n}\n\nexport function _calcDueTokenProtocolSwapFeeAmount(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    previousInvariant: BigNumber,\n    currentInvariant: BigNumber,\n    protocolSwapFeePercentage: BigNumber\n): BigNumber {\n    /*********************************************************************************\n    /*  protocolSwapFeePercentage * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\n    *********************************************************************************/\n\n    if (currentInvariant.lte(previousInvariant)) {\n        // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\n        // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\n        return ZERO;\n    }\n\n    // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\n    // fees to the Vault.\n\n    // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\n    // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\n\n    let base = divUp(previousInvariant, currentInvariant);\n    const exponent = divDown(ONE, normalizedWeight);\n\n    // Because the exponent is larger than one, the base of the power function has a lower bound. We cap to this\n    // value to avoid numeric issues, which means in the extreme case (where the invariant growth is larger than\n    // 1 / min exponent) the Pool will pay less in protocol fees than it should.\n    base = max(base, MIN_POW_BASE_FREE_EXPONENT);\n\n    const power = powUp(base, exponent);\n\n    const tokenAccruedFees = mulDown(balance, complement(power));\n    return mulDown(tokenAccruedFees, protocolSwapFeePercentage);\n}\n\n","// SPDX-License-Identifier: MIT\n\nimport { WeightedSwapStorage } from \"./weightedSwapStorage\";\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { _calcAllTokensInGivenExactLpOut, _calcInGivenOut, _calcLpInGivenExactTokensOut, _calcLpOutGivenExactTokensIn, _calcOutGivenIn, _calcTokenOutGivenExactLpIn } from \"./WeightedMath\";\nimport { ZERO } from \"./LogExpMath\";\n\nconst FEE_DENOMINATOR = BigNumber.from(10000000000)\n\nexport function calculateRemoveLiquidityOneTokenExactIn(\n    self: WeightedSwapStorage,\n    outIndex: number,\n    lpAmount: BigNumber,\n    lpSupply:BigNumber,\n    tokenBalances: BigNumber[]\n): { amountOut: BigNumber, swapFee: BigNumber } {\n    return _calcTokenOutGivenExactLpIn(\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]),\n        self.normalizedWeights[outIndex],\n        lpAmount,\n        lpSupply,\n        self.fee\n    );\n}\n\nexport function calculateRemoveLiquidityExactIn(\n    self: WeightedSwapStorage,\n    lpAmount: BigNumber,\n    lpSupply:BigNumber,\n     tokenBalances: BigNumber[]\n): BigNumber[] {\n\n    return _calcAllTokensInGivenExactLpOut(\n        _xp(tokenBalances, self.tokenMultipliers),\n        lpAmount,\n        lpSupply\n    );\n}\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n */\nexport function calculateTokenAmount(\n    self: WeightedSwapStorage,\n    amounts: BigNumber[],\n    lpSupply:BigNumber,\n    deposit: boolean,\n    tokenBalances: BigNumber[]\n): BigNumber {\n    let lpTokenAmount = ZERO\n    if (deposit) {\n        const { lpOut } = _calcLpOutGivenExactTokensIn(\n            _xp(tokenBalances, self.tokenMultipliers),\n            self.normalizedWeights,\n            _xp(amounts, self.tokenMultipliers),\n            lpSupply,\n            self.fee.mul(1e8)\n        );\n        lpTokenAmount = lpOut\n    } else {\n        const { lpIn } = _calcLpInGivenExactTokensOut(\n            _xp(tokenBalances, self.tokenMultipliers),\n            self.normalizedWeights,\n            _xp(amounts, self.tokenMultipliers),\n            lpSupply,\n            self.fee.mul(1e8)\n        );\n        lpTokenAmount = lpIn\n    }\n\n    return lpTokenAmount\n}\n\nexport function calculateSwapGivenIn(self: WeightedSwapStorage, inIndex: number, outIndex: number, amountIn: BigNumber, tokenBalances: BigNumber[]): BigNumber {\n    // use in amount with fee alredy deducted\n    const amountInWithFee = amountIn.mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR.sub(self.fee));\n\n    // calculate out amount\n    let amountOut = _calcOutGivenIn(\n        tokenBalances[inIndex].mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[inIndex],\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[outIndex],\n        amountInWithFee\n    );\n\n    // downscale out amount\n    return amountOut.div(FEE_DENOMINATOR).div(self.tokenMultipliers[outIndex]);\n\n}\n\n\nexport function calculateSwapGivenOut(self: WeightedSwapStorage, inIndex: number, outIndex: number, amountOut: BigNumber,tokenBalances: BigNumber[]): BigNumber {\n    // calculate in amount with upscaled balances\n    const amountIn = _calcInGivenOut(\n        tokenBalances[inIndex].mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[inIndex],\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[outIndex],\n        amountOut.mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR)\n    );\n    // adjust for fee and scale down - rounding up\n    return amountIn.div(FEE_DENOMINATOR.sub(self.fee)).div(self.tokenMultipliers[inIndex]).add(1);\n}\n\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}","import { BigNumber } from \"ethers\"\nimport { ZERO } from \"./LogExpMath\"\n\nexport class WeightedSwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly normalizedWeights: BigNumber[]\n    public readonly balances: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    constructor(\n        tokenMultipliers: BigNumber[],\n        normalizedWeights: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n    ) {\n        this.tokenMultipliers = tokenMultipliers\n        this.normalizedWeights = normalizedWeights\n        this.fee = fee\n        this.adminFee = adminFee\n        this.balances = tokenMultipliers.map((_) => ZERO)\n\n    }\n\n    public static mock(): WeightedSwapStorage {\n        return new WeightedSwapStorage([ZERO], [ZERO], ZERO, ZERO)\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst ZERO = BigNumber.from(0)\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\nconst TENK = BigNumber.from(10000)\nconst _256 = BigNumber.from('256')\nconst _128 = BigNumber.from('128')\nconst MIN_PRECISION = 32;\nconst MAX_PRECISION = 127;\n\nconst FIXED_1 = BigNumber.from('0x080000000000000000000000000000000')\nconst FIXED_2 = BigNumber.from('0x100000000000000000000000000000000')\nconst MAX_NUM = BigNumber.from('0x200000000000000000000000000000000')\n\nconst LN2_NUMERATOR = BigNumber.from('0x3f80fe03f80fe03f80fe03f80fe03f8')\nconst LN2_DENOMINATOR = BigNumber.from('0x5b9de1d10bf4103d647b0955897ba80')\n\nconst OPT_LOG_MAX_VAL = BigNumber.from('0x15bf0a8b1457695355fb8ac404e7a79e3')\nconst OPT_EXP_MAX_VAL = BigNumber.from('0x800000000000000000000000000000000')\n\n// const LAMBERT_CONV_RADIUS = BigNumber.from('0x002f16ac6c59de6f8d5d6f63c1482a7c86')\n// const LAMBERT_POS2_SAMPLE = BigNumber.from('0x0003060c183060c183060c183060c18306')\n// const LAMBERT_POS2_MAXVAL = BigNumber.from('0x01af16ac6c59de6f8d5d6f63c1482a7c80')\n// const LAMBERT_POS3_MAXVAL = BigNumber.from('0x6b22d43e72c326539cceeef8bb48f255ff')\n\n// const MAX_UNF_WEIGHT = BigNumber.from('0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9')\n\nconst maxExpArray = new Array<BigNumber>(128)\nmaxExpArray[32] = BigNumber.from('0x1c35fedd14ffffffffffffffffffffffff')\nmaxExpArray[33] = BigNumber.from('0x1b0ce43b323fffffffffffffffffffffff')\nmaxExpArray[34] = BigNumber.from('0x19f0028ec1ffffffffffffffffffffffff')\nmaxExpArray[35] = BigNumber.from('0x18ded91f0e7fffffffffffffffffffffff')\nmaxExpArray[36] = BigNumber.from('0x17d8ec7f0417ffffffffffffffffffffff')\nmaxExpArray[37] = BigNumber.from('0x16ddc6556cdbffffffffffffffffffffff')\nmaxExpArray[38] = BigNumber.from('0x15ecf52776a1ffffffffffffffffffffff')\nmaxExpArray[39] = BigNumber.from('0x15060c256cb2ffffffffffffffffffffff')\nmaxExpArray[40] = BigNumber.from('0x1428a2f98d72ffffffffffffffffffffff')\nmaxExpArray[41] = BigNumber.from('0x13545598e5c23fffffffffffffffffffff')\nmaxExpArray[42] = BigNumber.from('0x1288c4161ce1dfffffffffffffffffffff')\nmaxExpArray[43] = BigNumber.from('0x11c592761c666fffffffffffffffffffff')\nmaxExpArray[44] = BigNumber.from('0x110a688680a757ffffffffffffffffffff')\nmaxExpArray[45] = BigNumber.from('0x1056f1b5bedf77ffffffffffffffffffff')\nmaxExpArray[46] = BigNumber.from('0x0faadceceeff8bffffffffffffffffffff')\nmaxExpArray[47] = BigNumber.from('0x0f05dc6b27edadffffffffffffffffffff')\nmaxExpArray[48] = BigNumber.from('0x0e67a5a25da4107fffffffffffffffffff')\nmaxExpArray[49] = BigNumber.from('0x0dcff115b14eedffffffffffffffffffff')\nmaxExpArray[50] = BigNumber.from('0x0d3e7a392431239fffffffffffffffffff')\nmaxExpArray[51] = BigNumber.from('0x0cb2ff529eb71e4fffffffffffffffffff')\nmaxExpArray[52] = BigNumber.from('0x0c2d415c3db974afffffffffffffffffff')\nmaxExpArray[53] = BigNumber.from('0x0bad03e7d883f69bffffffffffffffffff')\nmaxExpArray[54] = BigNumber.from('0x0b320d03b2c343d5ffffffffffffffffff')\nmaxExpArray[55] = BigNumber.from('0x0abc25204e02828dffffffffffffffffff')\nmaxExpArray[56] = BigNumber.from('0x0a4b16f74ee4bb207fffffffffffffffff')\nmaxExpArray[57] = BigNumber.from('0x09deaf736ac1f569ffffffffffffffffff')\nmaxExpArray[58] = BigNumber.from('0x0976bd9952c7aa957fffffffffffffffff')\nmaxExpArray[59] = BigNumber.from('0x09131271922eaa606fffffffffffffffff')\nmaxExpArray[60] = BigNumber.from('0x08b380f3558668c46fffffffffffffffff')\nmaxExpArray[61] = BigNumber.from('0x0857ddf0117efa215bffffffffffffffff')\nmaxExpArray[62] = BigNumber.from('0x07ffffffffffffffffffffffffffffffff')\nmaxExpArray[63] = BigNumber.from('0x07abbf6f6abb9d087fffffffffffffffff')\nmaxExpArray[64] = BigNumber.from('0x075af62cbac95f7dfa7fffffffffffffff')\nmaxExpArray[65] = BigNumber.from('0x070d7fb7452e187ac13fffffffffffffff')\nmaxExpArray[66] = BigNumber.from('0x06c3390ecc8af379295fffffffffffffff')\nmaxExpArray[67] = BigNumber.from('0x067c00a3b07ffc01fd6fffffffffffffff')\nmaxExpArray[68] = BigNumber.from('0x0637b647c39cbb9d3d27ffffffffffffff')\nmaxExpArray[69] = BigNumber.from('0x05f63b1fc104dbd39587ffffffffffffff')\nmaxExpArray[70] = BigNumber.from('0x05b771955b36e12f7235ffffffffffffff')\nmaxExpArray[71] = BigNumber.from('0x057b3d49dda84556d6f6ffffffffffffff')\nmaxExpArray[72] = BigNumber.from('0x054183095b2c8ececf30ffffffffffffff')\nmaxExpArray[73] = BigNumber.from('0x050a28be635ca2b888f77fffffffffffff')\nmaxExpArray[74] = BigNumber.from('0x04d5156639708c9db33c3fffffffffffff')\nmaxExpArray[75] = BigNumber.from('0x04a23105873875bd52dfdfffffffffffff')\nmaxExpArray[76] = BigNumber.from('0x0471649d87199aa990756fffffffffffff')\nmaxExpArray[77] = BigNumber.from('0x04429a21a029d4c1457cfbffffffffffff')\nmaxExpArray[78] = BigNumber.from('0x0415bc6d6fb7dd71af2cb3ffffffffffff')\nmaxExpArray[79] = BigNumber.from('0x03eab73b3bbfe282243ce1ffffffffffff')\nmaxExpArray[80] = BigNumber.from('0x03c1771ac9fb6b4c18e229ffffffffffff')\nmaxExpArray[81] = BigNumber.from('0x0399e96897690418f785257fffffffffff')\nmaxExpArray[82] = BigNumber.from('0x0373fc456c53bb779bf0ea9fffffffffff')\nmaxExpArray[83] = BigNumber.from('0x034f9e8e490c48e67e6ab8bfffffffffff')\nmaxExpArray[84] = BigNumber.from('0x032cbfd4a7adc790560b3337ffffffffff')\nmaxExpArray[85] = BigNumber.from('0x030b50570f6e5d2acca94613ffffffffff')\nmaxExpArray[86] = BigNumber.from('0x02eb40f9f620fda6b56c2861ffffffffff')\nmaxExpArray[87] = BigNumber.from('0x02cc8340ecb0d0f520a6af58ffffffffff')\nmaxExpArray[88] = BigNumber.from('0x02af09481380a0a35cf1ba02ffffffffff')\nmaxExpArray[89] = BigNumber.from('0x0292c5bdd3b92ec810287b1b3fffffffff')\nmaxExpArray[90] = BigNumber.from('0x0277abdcdab07d5a77ac6d6b9fffffffff')\nmaxExpArray[91] = BigNumber.from('0x025daf6654b1eaa55fd64df5efffffffff')\nmaxExpArray[92] = BigNumber.from('0x0244c49c648baa98192dce88b7ffffffff')\nmaxExpArray[93] = BigNumber.from('0x022ce03cd5619a311b2471268bffffffff')\nmaxExpArray[94] = BigNumber.from('0x0215f77c045fbe885654a44a0fffffffff')\nmaxExpArray[95] = BigNumber.from('0x01ffffffffffffffffffffffffffffffff')\nmaxExpArray[96] = BigNumber.from('0x01eaefdbdaaee7421fc4d3ede5ffffffff')\nmaxExpArray[97] = BigNumber.from('0x01d6bd8b2eb257df7e8ca57b09bfffffff')\nmaxExpArray[98] = BigNumber.from('0x01c35fedd14b861eb0443f7f133fffffff')\nmaxExpArray[99] = BigNumber.from('0x01b0ce43b322bcde4a56e8ada5afffffff')\nmaxExpArray[100] = BigNumber.from('0x019f0028ec1fff007f5a195a39dfffffff')\nmaxExpArray[101] = BigNumber.from('0x018ded91f0e72ee74f49b15ba527ffffff')\nmaxExpArray[102] = BigNumber.from('0x017d8ec7f04136f4e5615fd41a63ffffff')\nmaxExpArray[103] = BigNumber.from('0x016ddc6556cdb84bdc8d12d22e6fffffff')\nmaxExpArray[104] = BigNumber.from('0x015ecf52776a1155b5bd8395814f7fffff')\nmaxExpArray[105] = BigNumber.from('0x015060c256cb23b3b3cc3754cf40ffffff')\nmaxExpArray[106] = BigNumber.from('0x01428a2f98d728ae223ddab715be3fffff')\nmaxExpArray[107] = BigNumber.from('0x013545598e5c23276ccf0ede68034fffff')\nmaxExpArray[108] = BigNumber.from('0x01288c4161ce1d6f54b7f61081194fffff')\nmaxExpArray[109] = BigNumber.from('0x011c592761c666aa641d5a01a40f17ffff')\nmaxExpArray[110] = BigNumber.from('0x0110a688680a7530515f3e6e6cfdcdffff')\nmaxExpArray[111] = BigNumber.from('0x01056f1b5bedf75c6bcb2ce8aed428ffff')\nmaxExpArray[112] = BigNumber.from('0x00faadceceeff8a0890f3875f008277fff')\nmaxExpArray[113] = BigNumber.from('0x00f05dc6b27edad306388a600f6ba0bfff')\nmaxExpArray[114] = BigNumber.from('0x00e67a5a25da41063de1495d5b18cdbfff')\nmaxExpArray[115] = BigNumber.from('0x00dcff115b14eedde6fc3aa5353f2e4fff')\nmaxExpArray[116] = BigNumber.from('0x00d3e7a3924312399f9aae2e0f868f8fff')\nmaxExpArray[117] = BigNumber.from('0x00cb2ff529eb71e41582cccd5a1ee26fff')\nmaxExpArray[118] = BigNumber.from('0x00c2d415c3db974ab32a51840c0b67edff')\nmaxExpArray[119] = BigNumber.from('0x00bad03e7d883f69ad5b0a186184e06bff')\nmaxExpArray[120] = BigNumber.from('0x00b320d03b2c343d4829abd6075f0cc5ff')\nmaxExpArray[121] = BigNumber.from('0x00abc25204e02828d73c6e80bcdb1a95bf')\nmaxExpArray[122] = BigNumber.from('0x00a4b16f74ee4bb2040a1ec6c15fbbf2df')\nmaxExpArray[123] = BigNumber.from('0x009deaf736ac1f569deb1b5ae3f36c130f')\nmaxExpArray[124] = BigNumber.from('0x00976bd9952c7aa957f5937d790ef65037')\nmaxExpArray[125] = BigNumber.from('0x009131271922eaa6064b73a22d0bd4f2bf')\nmaxExpArray[126] = BigNumber.from('0x008b380f3558668c46c91c49a2f8e967b9')\nmaxExpArray[127] = BigNumber.from('0x00857ddf0117efa215952912839f6473e6')\n\nfunction leftShift(num: BigNumber, shift: BigNumber) {\n    return num.mul(TWO.pow(shift))\n}\n\nfunction signedRightShift(num: BigNumber, shift: BigNumber) {\n    return num.div(TWO.pow(shift))\n}\n\n/**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\nexport function power(\n    _baseN: BigNumber,\n    _baseD: BigNumber,\n    _expN: BigNumber,\n    _expD: BigNumber\n): [BigNumber, number] {\n    invariant(_baseN.gt(_baseD), \"not support _baseN < _baseD\");\n    invariant(_baseN.lt(MAX_NUM))\n\n    let baseLog;\n    let base = (_baseN.mul(FIXED_1)).div(_baseD);\n    if (base.lt(OPT_LOG_MAX_VAL)) {\n        baseLog = optimalLog(base);\n    } else {\n        baseLog = generalLog(base);\n    }\n\n    let baseLogTimesExp = (baseLog.mul(_expN)).div(_expD);\n    if (baseLogTimesExp.lt(OPT_EXP_MAX_VAL)) {\n        return [optimalExp(baseLogTimesExp), MAX_PRECISION]\n    } else {\n        let precision = findPositionInMaxExpArray(baseLogTimesExp);\n        return [generalExp(signedRightShift(baseLogTimesExp, BigNumber.from(MAX_PRECISION - precision)), BigNumber.from(precision)), precision]\n    }\n}\n\n/**\n * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n */\nfunction floorLog2(_n: BigNumber): BigNumber {\n    let res = ZERO;\n    if (_n.lt(_256)) {\n        // At most 8 iterations\n        while (_n.gt(ONE)) {\n            _n = signedRightShift(_n, ONE);\n            res = res.add(ONE);\n        }\n    } else {\n        // Exactly 8 iterations\n        for (let s = _128; s.gt(ZERO); s = signedRightShift(s, ONE)) {\n            if (_n.gt(leftShift(ONE, s))) {\n                _n = signedRightShift(_n, s)\n                res = res.or(s);\n            }\n        }\n    }\n\n    return res;\n}\n\n/**\n * @dev computes log(x / FIXED_1) * FIXED_1.\n * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n */\nexport function generalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n    if (x.gte(FIXED_2)) {\n        const count = floorLog2(x.div(FIXED_1));\n        x = signedRightShift(x, count);\n        // now x < 2\n        res = count.mul(FIXED_1);\n    }\n\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n    if (x.gt(FIXED_1)) {\n        for (let i = MAX_PRECISION; i > 0; --i) {\n            x = (x.mul(x)).div(FIXED_1);\n            // now 1 < x < 4\n            if (x.gte(FIXED_2)) {\n                x = signedRightShift(x, ONE);\n                // now 1 < x < 2\n                res = res.add(leftShift(ONE, BigNumber.from(i - 1)));\n            }\n        }\n    }\n\n    return (res.mul(LN2_NUMERATOR)).div(LN2_DENOMINATOR)\n}\n\n/**\n    * @dev computes log(x / FIXED_1) * FIXED_1\n    * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n    * Auto-generated via \"PrintFunctionOptimalLog.py\"\n    * Detailed description:\n    * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n    * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n    * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n    * - The natural logarithm of the input is calculated by summing up the intermediate results above\n    * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n    */\nexport function optimalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n    let w;\n\n    if (x.gte('0xd3094c70f034de4b96ff7d5b6f99fcd8')) {\n        res = res.add(BigNumber.from('0x40000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xd3094c70f034de4b96ff7d5b6f99fcd8'));\n    }\n    // add 1 / 2^1\n    if (x.gte('0xa45af1e1f40c333b3de1db4dd55f29a7')) {\n        res = res.add(BigNumber.from('0x20000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xa45af1e1f40c333b3de1db4dd55f29a7'));\n    }\n    // add 1 / 2^2\n    if (x.gte('0x910b022db7ae67ce76b441c27035c6a1')) {\n        res = res.add(BigNumber.from('0x10000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x910b022db7ae67ce76b441c27035c6a1'));\n    }\n    // add 1 / 2^3\n    if (x.gte('0x88415abbe9a76bead8d00cf112e4d4a8')) {\n        res = res.add(BigNumber.from('0x08000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x88415abbe9a76bead8d00cf112e4d4a8'));\n    }\n    // add 1 / 2^4\n    if (x.gte('0x84102b00893f64c705e841d5d4064bd3')) {\n        res = res.add(BigNumber.from('0x04000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x84102b00893f64c705e841d5d4064bd3'));\n    }\n    // add 1 / 2^5\n    if (x.gte('0x8204055aaef1c8bd5c3259f4822735a2')) {\n        res = res.add(BigNumber.from('0x02000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x8204055aaef1c8bd5c3259f4822735a2'));\n    }\n    // add 1 / 2^6\n    if (x.gte('0x810100ab00222d861931c15e39b44e99')) {\n        res = res.add(BigNumber.from('0x01000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x810100ab00222d861931c15e39b44e99'));\n    }\n    // add 1 / 2^7\n    if (x.gte('0x808040155aabbbe9451521693554f733')) {\n        res = res.add(BigNumber.from('0x00800000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x808040155aabbbe9451521693554f733'));\n    }\n    // add 1 / 2^8\n\n    z = y = x.sub(FIXED_1);\n    w = (y.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x100000000000000000000000000000000').sub(y)).div(BigNumber.from('0x100000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^01 / 01 - y^02 / 02\n    res = res.add(z.mul(BigNumber.from('0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').sub(y)).div(BigNumber.from('0x200000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^03 / 03 - y^04 / 04\n    res = res.add(z.mul(BigNumber.from('0x099999999999999999999999999999999').sub(y)).div(BigNumber.from('0x300000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^05 / 05 - y^06 / 06\n    res = res.add(z.mul(BigNumber.from('0x092492492492492492492492492492492').sub(y)).div(BigNumber.from('0x400000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^07 / 07 - y^08 / 08\n    res = res.add(z.mul(BigNumber.from('0x08e38e38e38e38e38e38e38e38e38e38e').sub(y)).div(BigNumber.from('0x500000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^09 / 09 - y^10 / 10\n    res = res.add(z.mul(BigNumber.from('0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b').sub(y)).div(BigNumber.from('0x600000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^11 / 11 - y^12 / 12\n    res = res.add(z.mul(BigNumber.from('0x089d89d89d89d89d89d89d89d89d89d89').sub(y)).div(BigNumber.from('0x700000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^13 / 13 - y^14 / 14\n    res = res.add(z.mul(BigNumber.from('0x088888888888888888888888888888888').sub(y)).div(BigNumber.from('0x800000000000000000000000000000000')));\n    // add y^15 / 15 - y^16 / 16\n\n    return res;\n}\n\nexport function optimalExp(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n\n    z = y = x.mod(BigNumber.from('0x10000000000000000000000000000000'));\n    // get the input modulo 2^(-3)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x10e1b3be415a0000')));\n    // add y^02 * (20! / 02!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x05a0913f6b1e0000')));\n    // add y^03 * (20! / 03!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0168244fdac78000')));\n    // add y^04 * (20! / 04!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x004807432bc18000')));\n    // add y^05 * (20! / 05!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000c0135dca04000')));\n    // add y^06 * (20! / 06!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0001b707b1cdc000')));\n    // add y^07 * (20! / 07!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000036e0f639b800')));\n    // add y^08 * (20! / 08!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000618fee9f800')));\n    // add y^09 * (20! / 09!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000009c197dcc00')));\n    // add y^10 * (20! / 10!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000e30dce400')));\n    // add y^11 * (20! / 11!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000012ebd1300')));\n    // add y^12 * (20! / 12!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000017499f00')));\n    // add y^13 * (20! / 13!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000001a9d480')));\n    // add y^14 * (20! / 14!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000000001c6380')));\n    // add y^15 * (20! / 15!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000001c638')));\n    // add y^16 * (20! / 16!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000001ab8')));\n    // add y^17 * (20! / 17!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000000017c')));\n    // add y^18 * (20! / 18!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000014')));\n    // add y^19 * (20! / 19!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000001')));\n    // add y^20 * (20! / 20!)\n    res = res.div(BigNumber.from('0x21c3677c82b40000')).add(y).add(FIXED_1);\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    if (!(x.and(BigNumber.from('0x010000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1c3d6a24ed82218787d624d3e5eba95f9'))).div(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e776'));\n    // multiply by e^2^(-3)\n    if (!(x.and(BigNumber.from('0x020000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e778'))).div(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed4'));\n    // multiply by e^2^(-2)\n    if (!(x.and(BigNumber.from('0x040000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed5'))).div(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21f'));\n    // multiply by e^2^(-1)\n    if (!(x.and(BigNumber.from('0x080000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21e'))).div(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c9'));\n    // multiply by e^2^(+0)\n    if (!(x.and(BigNumber.from('0x100000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c5'))).div(BigNumber.from('0x00960aadc109e7a3bf4578099615711ea'));\n    // multiply by e^2^(+1)\n    if (!(x.and(BigNumber.from('0x200000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x00960aadc109e7a3bf4578099615711d7'))).div(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdce3d'));\n    // multiply by e^2^(+2)\n    if (!(x.and(BigNumber.from('0x400000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdc307'))).div(BigNumber.from('0x0000003c6ab775dd0b95b4cbee7e65d11'));\n    // multiply by e^2^(+3)\n\n    return res;\n}\n\n/**\n   * @dev this function can be auto-generated by the script \"PrintFunctionGeneralExp.py\".\n   * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n   * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n   * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n   * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n   */\nexport function generalExp(_x: BigNumber, _precision: BigNumber) {\n    let xi = _x;\n    let res = ZERO;\n\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x3442c4e6074a82f1797f72ac0000000'));\n    // add x^02 * (33! / 02!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x116b96f757c380fb287fd0e40000000'));\n    // add x^03 * (33! / 03!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x045ae5bdd5f0e03eca1ff4390000000'));\n    // add x^04 * (33! / 04!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00defabf91302cd95b9ffda50000000'));\n    // add x^05 * (33! / 05!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x002529ca9832b22439efff9b8000000'));\n    // add x^06 * (33! / 06!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00054f1cf12bd04e516b6da88000000'));\n    // add x^07 * (33! / 07!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000a9e39e257a09ca2d6db51000000'));\n    // add x^08 * (33! / 08!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000012e066e7b839fa050c309000000'));\n    // add x^09 * (33! / 09!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000001e33d7d926c329a1ad1a800000'));\n    // add x^10 * (33! / 10!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000002bee513bdb4a6b19b5f800000'));\n    // add x^11 * (33! / 11!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000003a9316fa79b88eccf2a00000'));\n    // add x^12 * (33! / 12!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000048177ebe1fa812375200000'));\n    // add x^13 * (33! / 13!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000005263fe90242dcbacf00000'));\n    // add x^14 * (33! / 14!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000057e22099c030d94100000'));\n    // add x^15 * (33! / 15!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000057e22099c030d9410000'));\n    // add x^16 * (33! / 16!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000052b6b54569976310000'));\n    // add x^17 * (33! / 17!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000004985f67696bf748000'));\n    // add x^18 * (33! / 18!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000003dea12ea99e498000'));\n    // add x^19 * (33! / 19!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000031880f2214b6e000'));\n    // add x^20 * (33! / 20!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000025bcff56eb36000'));\n    // add x^21 * (33! / 21!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000001b722e10ab1000'));\n    // add x^22 * (33! / 22!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000001317c70077000'));\n    // add x^23 * (33! / 23!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000cba84aafa00'));\n    // add x^24 * (33! / 24!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000082573a0a00'));\n    // add x^25 * (33! / 25!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000005035ad900'));\n    // add x^26 * (33! / 26!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000000000002f881b00'));\n    // add x^27 * (33! / 27!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000001b29340'));\n    // add x^28 * (33! / 28!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000000000efc40'));\n    // add x^29 * (33! / 29!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000007fe0'));\n    // add x^30 * (33! / 30!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000420'));\n    // add x^31 * (33! / 31!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000021'));\n    // add x^32 * (33! / 32!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000001'));\n    // add x^33 * (33! / 33!)\n\n\n    return (res.div(BigNumber.from('0x688589cc0e9505e2f2fee5580000000'))).add(_x).add(leftShift(ONE, _precision));\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\n}\n\n/**\n    * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n    * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n    * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n    */\nexport function findPositionInMaxExpArray(_x: BigNumber): number {\n    let lo = MIN_PRECISION;\n    let hi = MAX_PRECISION;\n\n    while (lo + 1 < hi) {\n        let mid = (lo + hi) / 2;\n        if (maxExpArray[mid].gte(_x)) lo = mid;\n        else hi = mid;\n    }\n\n    if (maxExpArray[hi].gte(_x)) return hi;\n    if (maxExpArray[lo].gte(_x)) return lo;\n\n    invariant(false);\n}\n\n/**\n * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\n *\n * Formula:\n * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\n *\n * @param amountIn                  source reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountOut\n */\nexport function getAmountOut(\n    amountIn: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    // validate input\n    invariant(amountIn.gt(ZERO), \"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\");\n    // if (amountIn.lte(ZERO) || amountIn.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    const amountInWithFee = amountIn.mul(TENK.sub(swapFee))\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        return (reserveOut.mul(amountInWithFee)).div(reserveIn.mul(TENK).add(amountInWithFee));\n    }\n\n    // let result;\n    // let precision: number;\n    const baseN = (reserveIn.mul(TENK)).add(amountInWithFee)\n    const [result, precision] = power(baseN, reserveIn.mul(TENK), tokenWeightIn, tokenWeightOut);\n\n    const temp1 = reserveOut.mul(result);\n    const temp2 = leftShift(reserveOut, BigNumber.from(precision));\n\n    return (temp1.sub(temp2)).div(result)\n}\n\n/**\n * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n *\n * Formula:\n * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\n *\n * @param amountOut     target reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountIn\n */\nexport function getAmountIn(\n    amountOut: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n) {\n    // validate input\n    invariant(amountOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n    // if (amountOut.gte(ZERO) || amountOut.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        const numerator = reserveIn.mul(amountOut).mul(TENK);\n        const denominator = reserveOut.sub(amountOut).mul(TENK.sub(swapFee));\n        return (numerator.div(denominator)).add(1);\n    }\n\n    const baseD = reserveOut.sub(amountOut);\n    const [result, precision] = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\n    const baseReserveIn = reserveIn.mul(TENK);\n    const temp1 = baseReserveIn.mul(result);\n    const temp2 = leftShift(baseReserveIn, BigNumber.from(precision));\n    return (signedRightShift(temp1.sub(temp2), BigNumber.from(precision)).div(TENK.sub(swapFee))).add(1);\n}\n\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  BigintIsh,\n  WEIGHTED_FACTORY_ADDRESS,\n  INIT_CODE_HASH_WEIGHTED,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  // ONE,\n  FIVE,\n  _100,\n  // FEES_NUMERATOR,\n  // FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { getAmountOut, getAmountIn } from './calculators/weightedPairCalc'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: {\n  [token0Address: string]: {\n    [token1Address: string]: {\n      [weight0_fee: string]: string\n    }\n  }\n} = {}\n\nexport class WeightedPair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  // the tokenAmount for calculating the price\n  // these cannot be derived from the tokenAmounts since\n  // they follow the stableSwap logic for pricing\n  public pricingBasesIn: TokenAmount[]\n  public pricingBasesOut: TokenAmount[]\n  private readonly weights: [JSBI, JSBI]\n  private readonly fee: JSBI\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token, weightA: JSBI, fee: JSBI): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const weights = tokenA.sortsBefore(tokenB) ? [weightA.toString(), JSBI.subtract(_100, weightA).toString()] : [JSBI.subtract(_100, weightA).toString(), weightA.toString()] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address]?.[`${weights[0]}-${fee.toString()}`] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: {\n            ...PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address],\n            [`${weights[0]}-${fee.toString()}`]: getCreate2Address(\n              WEIGHTED_FACTORY_ADDRESS[tokens[0].chainId],\n              keccak256(\n                ['bytes'],\n                [pack(\n                  ['address', 'address', 'uint32', 'uint32'],\n                  [tokens[0].address, tokens[1].address, weights[0], fee.toString()]\n                )]\n              ),\n              INIT_CODE_HASH_WEIGHTED[tokens[0].chainId]\n            )\n          },\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address][`${weights[0]}-${fee.toString()}`]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, weightA: JSBI, fee: JSBI) {\n\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.weights = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [weightA, JSBI.subtract(_100, weightA)]\n      : [JSBI.subtract(_100, weightA), weightA]\n    this.fee = fee\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      WeightedPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, weightA, fee),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.WeightedPair\n\n    // assign pricing bases\n    this.pricingBasesIn = tokenAmounts\n    this.pricingBasesOut = tokenAmounts\n\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(\n      this.token0,\n      this.token1,\n      JSBI.multiply(this.tokenAmounts[0].raw, this.weight1),\n      JSBI.multiply(this.tokenAmounts[1].raw, this.weight0)\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(\n      this.token1,\n      this.token0,\n      JSBI.multiply(this.tokenAmounts[1].raw, this.weight0),\n      JSBI.multiply(this.tokenAmounts[0].raw, this.weight1)\n    )\n  }\n\n  public get fee0(): JSBI {\n    return this.fee\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get weight0(): JSBI {\n    return this.weights[0]\n  }\n\n  public get weight1(): JSBI {\n    return this.weights[1]\n  }\n\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n  public weightOf(token: Token): JSBI {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.weight0 : this.weight1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputWeight = this.weightOf(inputAmount.token)\n    const outputWeight = this.weightOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountOut(inputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountOut(\n          inputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // console.log(\"OA\", outputAmount.raw.toString())\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [outputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    console.log(\"-- this 0\", this.reserve0.raw, \"1\", this.reserve1.raw, \"out\", outputAmount.raw)\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const outputWeight = this.weightOf(outputAmount.token)\n    const inputWeight = this.weightOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountIn(outputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountIn(\n          outputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [inputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n\n  public clone(): WeightedPair {\n    return new WeightedPair(this.tokenAmounts[0], this.tokenAmounts[1], this.weight0, this.fee)\n  }\n\n  // these are only supposed to be used for liquidity calculations\n  /**\n * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n */\n  public get token0PriceRaw(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1PriceRaw(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceRatioOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0PriceRaw : this.token1PriceRaw\n  }\n}\n\n\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  42261 :[\n    new Token(ChainId.OASIS_TESTNET, '0x9aEeeD65aE87e3b28793aefAeED59c3f10ef956b', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.OASIS_TESTNET, '0xfA0D8065755Fb3b6520149e86Ac5A3Dc3ee5Dc92', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.OASIS_TESTNET, '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.OASIS_TESTNET, '0x4e8848da06E40E866b82f6b52417494936c9509b', 18, 'TUSD', 'True USD'),\n  ],\n  110001 :[\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0xE59c1Ddf4fAAC4Fa7C8c93d9392d4bBa55383268', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0x1a69a6e206c680A8559c59b951527437CBCe6Ed7', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0x51b90a5Bc99B7c76EDf3863E1d61ca6197a6e542', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0xD71C821a373E16D607277DB6C1356c1209C7d866', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  },\n  42261: {\n    0: STABLECOINS[42261][0],\n    1: STABLECOINS[42261][1],\n    2: STABLECOINS[42261][2],\n    3: STABLECOINS[42261][3]\n  },\n  110001: {\n    0: STABLECOINS[110001][0],\n    1: STABLECOINS[110001][1],\n    2: STABLECOINS[110001][2],\n    3: STABLECOINS[110001][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import { StablePool } from \"./stablePool\";\nimport { Token, } from \"./token\";\nimport { Price } from \"./fractions/price\";\nimport { TokenAmount } from \"./fractions/tokenAmount\";\nimport invariant from \"tiny-invariant\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Source } from './source';\nimport { ChainId, STABLE_POOL_LP_ADDRESS, STABLE_POOL_ADDRESS } from \"./../constants\";\nimport { PoolType } from \"./pool\";\n\n// A class that wraps a stablePool to a pair-like structure\nexport class StablePairWrapper implements Source {\n\n    // the tokenAmounts are the reference Balances that we keep track of in the stablePool\n    // whenever we make changes to these, we need to update the stablePool reference Balance to calculate the correct \n    public tokenAmounts: TokenAmount[]\n    public readonly stableIndexes: number[]\n\n    // the tokenAmount for calculating the price\n    // these cannot be derived from the tokenAmounts since\n    // they follow the stableSwap logic for pricing\n    public pricingBasesIn: TokenAmount[]\n    public pricingBasesOut: TokenAmount[]\n    public readonly type: PoolType\n    public readonly referenceMidPrices: Price[]\n    public readonly liquidityToken: Token\n    public status: string\n    // public executionPrice: Price\n    // public readonly inputReserve: TokenAmount\n    // public readonly outputReserve: TokenAmount\n\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, indexA: number, indexB: number) {\n\n        invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_IDS')\n\n        this.liquidityToken = new Token(\n            tokenAmountA.token.chainId,\n            STABLE_POOL_LP_ADDRESS[tokenAmountA.token.chainId] ?? '0x0000000000000000000000000000000000000001',\n            18,\n            'RequiemStable-LP',\n            'Requiem StableSwap LPs'\n        )\n\n        this.tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.stableIndexes = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [indexA, indexB] : [indexB, indexA]\n\n        this.pricingBasesIn = this.tokenAmounts\n        this.pricingBasesOut = this.tokenAmounts\n        // this.executionPrice = new Price(tokenAmountA.token, tokenAmountB.token, tokenAmountA.raw, tokenAmountB.raw)\n        this.referenceMidPrices = []\n        this.type = PoolType.StablePairWrapper\n        this.status = 'NOT PRICED'\n    }\n\n\n    public getAddressForRouter(): string {\n        return STABLE_POOL_ADDRESS[this.tokenAmounts[0].token.chainId]\n    }\n\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    // reserves cannot be this.tokenAmounts because\n    // these are directly used for prices\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    // this gets the reserve of the respectve (stable) token\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n\n    public priceOf(token: Token, stablePool: StablePool, volume: BigNumber) {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price(stablePool, volume) : this.token1Price(stablePool, volume)\n    }\n\n    /**\n * Returns the current price at given volume of the pair in terms of token0, i.e. the ratio calculated by the stableSwap\n */\n    public token0Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken1 = stablePool.calculateSwap(this.stableIndexes[0], this.stableIndexes[1], volume)\n        return new Price(this.token0, this.token1, outToken1.toBigInt(), volume.toBigInt())\n    }\n\n    /**\n * Returns the current mid price of the pair in terms of token1, i.e. the ratio calculated by the stableSwap\n */\n    public token1Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken0 = stablePool.calculateSwap(this.stableIndexes[1], this.stableIndexes[0], volume)\n        return new Price(this.token1, this.token0, outToken0.toBigInt(), volume.toBigInt())\n    }\n\n    public priceFromReserve(outToken: Token) {\n        const outIndex = outToken.equals(this.token0) ? 0 : 1\n        const inIndex = outToken.equals(this.token1) ? 0 : 1\n        return new Price(\n            this.pricingBasesIn[inIndex].token,\n            this.pricingBasesOut[outIndex].token,\n            this.pricingBasesIn[inIndex].raw,\n            this.pricingBasesOut[outIndex].raw\n        )\n    }\n\n    /**\n     * function that wraps the output calculation based on a stablePool\n     * @param inputAmount input amount that is used for calculating the output amount\n     * @param stablePool input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the output amount as TokenAmount and the StableWrappedPair with the adjusted balances\n     */\n    public getOutputAmount(inputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const output = stablePool.getOutputAmount(\n            inputAmount,\n            this.token0.equals(inputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(inputAmount)\n        stablePool.subtractBalanceValue(output)\n\n        // here we save the pricing results if it is called\n        const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n        const outIndex = output.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = inputAmount\n        this.pricingBasesOut[outIndex] = output\n        this.status = 'PRICED'\n        // console.log(\"get \" + output.raw.toString() + output.token.symbol + \" for \" + inputAmount.raw.toString() + inputAmount.token.symbol)\n        // this.executionPrice = new Price(inputAmount.token, output.token, inputAmount.raw, output.raw)\n        return [\n            output,\n            new StablePairWrapper(\n                inputAmount,\n                output, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))\n        ]\n    }\n\n    /**\n     * function that wraps the input calculation based on a stablePool\n     * @param outputAmount output amount to calculate the input with\n     * @param stablePool  input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the input TokenAmount required to obtain the target output\n     */\n    public getInputAmount(outputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        const input = stablePool.getInputAmount(\n            outputAmount,\n            this.token0.equals(outputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // here we save the pricing results if it is called\n        const inIndex = input.token.equals(this.token0) ? 0 : 1\n        const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = input\n        this.pricingBasesOut[outIndex] = outputAmount\n        this.status = 'PRICED'\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(input)\n        stablePool.subtractBalanceValue(outputAmount)\n\n        // console.log(\"get \" + outputAmount.raw.toString() + outputAmount.token.symbol + \" for \" + input.raw.toString() + input.token.symbol)\n\n        return [input,\n            new StablePairWrapper(\n                input,\n                outputAmount, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))]\n    }\n\n    // generates the n^2-n combinations for wrappedStablePairs\n    public static wrapPairsFromPool(stablePool: StablePool): StablePairWrapper[] {\n\n        let wrapperList = []\n\n        for (let i = 0; i < stablePool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                wrapperList.push(new StablePairWrapper(\n                    new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n                    new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n                    i,\n                    j\n                ))\n            }\n        }\n        return wrapperList\n    }\n\n    public static wrapSinglePairFromPool(stablePool: StablePool, i: number, j: number) {\n        invariant(i !== j, 'SAME INDEX')\n        invariant(i < stablePool.tokenBalances.length || j < stablePool.tokenBalances.length, 'INDEX OUT OF RANGE')\n        return new StablePairWrapper(\n            new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n            new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n            i,\n            j\n        )\n    }\n}","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\nconst ONE = BigNumber.from(1)\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(ONE)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\nexport function calculateSwapGivenOut(inIndex: number, outIndex: number, outAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n\n    let _amountOutInclFee = outAmount.mul(FEE_DENOMINATOR).div(FEE_DENOMINATOR.sub(swapStorage.fee));\n    let newOutBalance = normalizedBalances[outIndex].sub(_amountOutInclFee.mul(swapStorage.tokenMultipliers[outIndex]));\n\n    let inBalance = _getY(\n        outIndex,\n        inIndex,\n        newOutBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    const inAmount = ((inBalance.sub(normalizedBalances[inIndex]).sub(ONE)).div(swapStorage.tokenMultipliers[inIndex])).add(ONE)\n    return inAmount;\n}\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount,\n  calculateSwapGivenOut\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS,\n  STABLE_POOL_LP_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\n// const ZERO = BigNumber.from(0)\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getRouterAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public static getLpAddress(chainId: number): string {\n    return STABLE_POOL_LP_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      STABLE_POOL_LP_ADDRESS[tokens[0].chainId] ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC') }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  public getAddressForRouter(): string {\n    return STABLE_POOL_ADDRESS[this.tokens[0].chainId]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber | BigintIsh,\n    chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(StablePool.getRouterAddress(chainId), new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[inIndex].lte(inAmount)) // || inAmount.eq(ZERO))\n    //   return ZERO\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenOut(\n    inIndex: number,\n    outIndex: number,\n    outAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[outIndex].lte(outAmount)) // || outAmount.eq(ZERO))\n    //   return ZERO\n\n    const inAmount: BigNumber = calculateSwapGivenOut(\n      inIndex,\n      outIndex,\n      outAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return inAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inIndex: number): TokenAmount {\n    const swap = this.calculateSwapGivenOut(inIndex, this.indexFromToken(outputAmount.token), outputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(inIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwap(i, outIndex, userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: SwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): StablePool {\n    return new StablePool(\n      this.tokens, this.tokenBalances, this._A, this.swapStorage, this.blockTimestamp.toNumber(), this.lpTotalSupply, this.currentWithdrawFee\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\nimport { StablePairWrapper } from './stablePairWrapper'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly sources: (Pair | StablePairWrapper)[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n  public readonly pathMatrix: Token[][]\n  public readonly routerIds: number[]\n\n  public constructor(sources: (Pair | StablePairWrapper)[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(sources.length > 0, 'SOURCES')\n    invariant(\n      sources.every(source => source.chainId === sources[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && sources[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[sources[0].chainId] && sources[0].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && sources[sources.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[sources[0].chainId] && sources[sources.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[sources[0].chainId]]\n    for (const [i, source] of sources.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.sources = sources\n    this.path = path\n    this.midPrice = Price.fromRouteV3(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n\n    // generate new inputs for aggregator \n\n    const pathMatrix: Token[][] = []\n    const routerIds: number[] = []\n    let currentInput = this.path[0]\n    let currentRouterId: number = -1\n    let lastRouterId: number = -1\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      currentRouterId = sources[i] instanceof StablePairWrapper ? 0 : 1\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n\n      if (i === 0) {\n        pathMatrix.push([currentInput, output])\n        routerIds.push(source instanceof StablePairWrapper ? 0 : 1)\n      }\n      else {\n        if (source instanceof StablePairWrapper) { // current item is stablePool\n          pathMatrix.push([currentInput, output])\n          routerIds.push(0)\n        }\n        else { // current item is a pair\n          if (lastRouterId === 0) {\n            pathMatrix.push([currentInput, output])\n            routerIds.push(1)\n          } else {\n            pathMatrix[pathMatrix.length - 1].push(output)\n          }\n        }\n      }\n      currentInput = output\n      lastRouterId = currentRouterId\n    }\n\n    this.pathMatrix = pathMatrix\n    this.routerIds = routerIds\n  }\n\n  public get chainId(): ChainId {\n    return this.sources[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextSources: (Pair | StablePairWrapper)[] = new Array(route.sources.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const source = route.sources[i]\n        const [outputAmount, nextSource] = source instanceof Pair ?\n          source.getOutputAmount(amounts[i]) :\n          source.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextSources[i] = nextSource\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const source = route.sources[i - 1]\n        const [inputAmount, nextSource] = source instanceof Pair ?\n          source.getInputAmount(amounts[i]) :\n          source.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextSources[i - 1] = nextSource\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV3(new RouteV3(nextSources, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      source.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      let source = sources[i]\n\n\n      if (!source.token0.equals(amountIn.token) && !source.token1.equals(amountIn.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = source instanceof Pair ? source.getOutputAmount(amountIn) : source.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentSources, source], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentSources, source],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param sources the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentSources used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check ifit can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      source.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      // source irrelevant\n      if (!source.token0.equals(amountOut.token) && !source.token1.equals(amountOut.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = source instanceof Pair ? source.getInputAmount(amountOut) : source.getInputAmount(amountOut, stablePool)\n      } catch (error) {\n        // not enough liquidity in this source\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([source, ...currentSources], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [source, ...currentSources],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV4 {\n  public readonly stablePool: StablePool\n  public readonly pools: Pool[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pools: Pool[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(pools.length > 0, 'poolS')\n    invariant(\n      pools.every(pool => pool.chainId === pools[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pools[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pools[0].chainId] && pools[0].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pools[pools.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pools[0].chainId] && pools[pools.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pools[0].chainId]]\n    for (const [i, pool] of pools.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pool.token0) || currentInput.equals(pool.token1), 'PATH')\n      const output = currentInput.equals(pool.token0) ? pool.token1 : pool.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.pools = pools\n    this.path = path\n    this.midPrice = Price.fromRouteV4(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pools[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { WeightedPair } from './weightedPair'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { Pool, PoolType } from './pool'\nimport { RouteV4 } from './routeV4'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// function computePriceImpactWeightedPair(pair: WeightedPair, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n//   const artificialMidPrice = new Price(\n//     inputAmount.currency,\n//     outputAmount.currency,\n//     pair.reserveOf(wrappedCurrency(inputAmount.currency, pair.chainId)).raw,\n//     pair.reserveOf(wrappedCurrency(outputAmount.currency, pair.chainId)).raw)\n//   const exactQuote = artificialMidPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV4(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV4(a: TradeV4, b: TradeV4) {\n  const ioComp = inputOutputComparatorV4(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV4 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV4 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV4\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV4, amountIn: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV4, amountOut: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV4, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextpools: Pool[] = new Array(route.pools.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        let outputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [outputAmount, nextpool] = pool.clone().getOutputAmount(amounts[i])\n        } else {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i], stablePool)\n        }\n        // const [outputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getOutputAmount(amounts[i]) :\n        //   pool.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextpools[i] = nextpool\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        let inputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [inputAmount, nextpool] = pool.clone().getInputAmount(amounts[i])\n        } else {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i], stablePool)\n        }\n        // const [inputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getInputAmount(amounts[i]) :\n        //   pool.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextpools[i - 1] = nextpool\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV4(new RouteV4(nextpools, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  //   this.route.pools[this.route.pools.length - 1] instanceof WeightedPair\n  //     ? computePriceImpactWeightedPair((this.route.pools[this.route.pools.length - 1] as WeightedPair).clone(), this.inputAmount, this.outputAmount)\n  //     : computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      pool.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      let pool = pools[i]\n\n      if (!pool.token0.equals(amountIn.token) && !pool.token1.equals(amountIn.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      // if( pool instanceof WeightedPair)  {console.log(\"out\": pool.getInputAmount(amountOut) }\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountOut] = (pool as Pair).getOutputAmount(amountIn)\n        } else if (pool.type === PoolType.WeightedPair) {\n          ;[amountOut] = (pool as WeightedPair).clone().getOutputAmount(amountIn)\n          // ;[amountOut] = (pool as WeightedPair).getOutputAmount(amountIn)\n          // console.log(\"out weighted\", amountOut.raw)\n          // const [amountOut1,] = ((pool).clone() as any as Pair).getOutputAmount(amountIn)\n          // console.log(\"out PAIR\", amountOut1.raw)\n        } else {\n          [amountOut] = (pool as StablePairWrapper).getOutputAmount(amountIn, stablePool)\n        }\n        // ;[amountOut] = pool instanceof Pair || pool instanceof WeightedPair ? pool.getOutputAmount(amountIn) : pool.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([...currentpools, pool], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentpools, pool],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param pools the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentpools used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      pool.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.token) && !pool.token1.equals(amountOut.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountIn] = (pool as Pair).getInputAmount(amountOut)\n        }\n        else if (pool.type === PoolType.WeightedPair) {\n          ;[amountIn] = (pool as WeightedPair).clone().getInputAmount(amountOut)\n        } else {\n          ;[amountIn] = (pool as StablePairWrapper).getInputAmount(amountOut, stablePool)\n        }\n\n\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([pool, ...currentpools], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentpools],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi';\nimport { Token, WeightedPair } from '..';\n\nconst ONE = BigNumber.from(1)\nconst TEN = JSBI.BigInt(10)\nconst TWO = BigNumber.from(2)\nconst SQRT2x100 = BigNumber.from('141421356237309504880');\nconst ONE_E18 = BigNumber.from('1000000000000000000')\n\n\nexport function sqrrt(a: BigNumber): BigNumber {\n    let c = ONE\n    if (a.gt(3)) {\n        c = a;\n        let b = a.div(TWO).add(ONE);\n        while (b < c) {\n            c = b;\n            b = (a.div(b).add(b)).div(TWO);\n        }\n    } else if (!a.eq(0)) {\n        c = ONE;\n    }\n    return c\n}\n\nexport function getTotalValue(pair: WeightedPair, payoutToken: Token): BigNumber {\n    const reserve0 = pair.reserve0\n    const reserve1 = pair.reserve1\n\n    const [reservesOther, weightPayoutToken, weightOther] = payoutToken.equals(pair.token0)\n        ? [reserve1, pair.weight0, pair.weight1]\n        : [reserve0, pair.weight1, pair.weight0]\n\n    return SQRT2x100.mul(reservesOther.toBigNumber()).div(\n        sqrrt(BigNumber.from(JSBI.add(JSBI.multiply(weightOther, weightOther), JSBI.multiply(weightPayoutToken, weightPayoutToken)).toString())\n        )).div(ONE_E18)\n}\n\n/**\n* - calculates the value in payoutToken of the input LP amount provided\n* @param _pair general pair that has the RequiemSwap interface implemented\n* @param amount_ the amount of LP to price in REQT\n*  - is consistent with the uniswapV2-type case \n*/\nexport function valuation(pair: WeightedPair, totalSupply: BigNumber, amount: BigNumber, payoutToken: Token) {\n    const totalValue = getTotalValue(pair, payoutToken);\n    return totalValue.mul(amount).div(totalSupply);\n}\n\n\n\n// markdown function for bond valuation\nexport function markdown(pair: WeightedPair, payoutToken: Token): BigNumber {\n    const [reservesOther, weightOther, weightPayoutToken] = payoutToken.equals(pair.token0)\n        ? [pair.reserve1.toBigNumber(), BigNumber.from(pair.weight1.toString()), BigNumber.from(pair.weight0.toString())]\n        : [pair.reserve0.toBigNumber(), BigNumber.from(pair.weight0.toString()), BigNumber.from(pair.weight1.toString())];\n\n    // adjusted markdown scaling up the reserve as the trading mechnism allows\n    // higher or lower valuation for payoutToken reserve\n    return reservesOther.add(\n        weightOther.mul(reservesOther).div(weightPayoutToken)).mul(\n            BigNumber.from(JSBI.exponentiate(TEN, JSBI.BigInt(payoutToken.decimals))).div(\n                getTotalValue(pair, payoutToken)\n            )\n        )\n}","\n\nimport { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant';\n\nconst RESOLUTION = BigNumber.from(112);\nconst resPrec = BigNumber.from(2).pow(RESOLUTION)\nconst ZERO = BigNumber.from(0)\n// const Q112 = BigNumber.from('0x10000000000000000000000000000');\n// const Q224 = BigNumber.from('0x100000000000000000000000000000000000000000000000000000000');\n// const LOWER_MASK = BigNumber.from('0xffffffffffffffffffffffffffff'); // decimal of UQ*x112 (lower 112 bits)\n\nexport function decode(x: BigNumber) {\n    return x.div(RESOLUTION);\n}\n\nexport function decode112with18(x: BigNumber) {\n    return x.div(BigNumber.from('5192296858534827'))\n}\n\nexport function fraction(numerator: BigNumber, denominator: BigNumber) {\n\n    invariant(denominator.gt(ZERO), \"FixedPoint::fraction: division by zero\");\n    if (numerator.isZero()) return ZERO;\n\n    // if (numerator.lte(BigNumber.) <= type(uint144).max) {\n    const result = (numerator.mul(resPrec)).div(denominator)\n    //   require(result <= type(uint224).max, \"FixedPoint::fraction: overflow\");\n    return result;\n    // } else {\n    //    return numerator.mul(Q112).div(denominator);\n    // }\n}","import { BigNumber } from 'ethers'\nimport { Token, WeightedPair } from '../..';\nimport { valuation } from './bondCalculator';\n// import JSBI from 'jsbi';\nimport { fraction, decode112with18 } from './fixedPoint';\n\nconst ONE_E16 = BigNumber.from('10000000000000000')\nconst ONE_E18 = BigNumber.from('10000000000000000')\nconst ONE_E9 = BigNumber.from('1000000000')\n\nexport interface BondTerms {\n    controlVariable: BigNumber; // scaling variable for price\n    vesting: BigNumber; // in blocks\n    maxPayout: BigNumber; // in thousandths of a %. i.e. 500 = 0.5%\n    maxDebt: BigNumber;\n}\n\nexport function payoutFor(value: BigNumber, bondPrice: BigNumber): BigNumber {\n    return value.mul(ONE_E18.mul(ONE_E18)).div(bondPrice).div(ONE_E18)\n}\n\n\nexport function fullPayoutFor(\n    pair: WeightedPair,\n    currentDebt: BigNumber,\n    totalSupply: BigNumber,\n    amount: BigNumber,\n    payoutToken: Token,\n    terms: BondTerms\n): BigNumber {\n    const value = valuation(pair, totalSupply, amount, payoutToken)\n    const bondPrice_ = bondPrice(terms.controlVariable, totalSupply, currentDebt)\n    return payoutFor(value, bondPrice_)\n}\n\n\n/**\n *  @notice calculate current ratio of debt to REQT supply\n *  @return debtRatio_ uint\n */\nexport function debtRatio(totalSupply: BigNumber, currentDebt: BigNumber): BigNumber {\n\n    return decode112with18(fraction(currentDebt.mul(ONE_E9), totalSupply)).div(\n        ONE_E18);\n}\n\n\n/**\n *  @notice calculate current bond premium\n *  @return price_ uint\n */\nexport function bondPrice(controlVariable: BigNumber, totalSupply: BigNumber, currentDebt: BigNumber): BigNumber {\n    let price_ = (controlVariable.mul(debtRatio(totalSupply, currentDebt)).add(ONE_E18)).div(ONE_E16);\n    return price_\n}\n\n\n/**\n *  @notice calculate current bond premium\n *  @return price_ uint\n */\nexport function bondPriceUsingDebtRatio(controlVariable: BigNumber, debtRatio: BigNumber): BigNumber {\n    return controlVariable.mul(debtRatio).div(ONE_E18);\n\n}\n\nexport function fullPayoutForUsingDebtRatio(\n    pair: WeightedPair,\n    debtRatio: BigNumber,\n    totalSupply: BigNumber,\n    amount: BigNumber,\n    payoutToken: Token,\n    terms: BondTerms\n): BigNumber {\n    const value = valuation(pair, totalSupply, amount, payoutToken)\n    const bondPrice_ = bondPriceUsingDebtRatio(terms.controlVariable, debtRatio)\n    return payoutFor(value, bondPrice_)\n}","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getRouterAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV3 } from './entities/tradeV3'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV3Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV3OptionsDeadline extends Omit<TradeV3Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV3Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV3 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV3, options: TradeV3Options | TradeV3OptionsDeadline): SwapV3Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap && (trade.route.routerIds.length === 1 && trade.route.routerIds[0] === 1)) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = []\n      for (let i = 0; i < trade.route.pathMatrix.length; i++)\n      path.push(trade.route.pathMatrix[i].map(token => token.address))\n      const routerId = trade.route.routerIds.map(id => id.toString())\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'multiSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory routerId, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapExactTokensForTokens'\n            // multiSwapExactTokensForTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountIn, uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'multiSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory routerId, uint256 amountOut, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV4 } from './entities/tradeV4'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV4Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV4OptionsDeadline extends Omit<TradeV4Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV4Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV4 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV4, options: TradeV4Options | TradeV4OptionsDeadline): SwapV4Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = trade.route.path.map(token =>token.address)\n      const pools = trade.route.pools.map(pool=>pool.getAddressForRouter())\n      \n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'onSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory pools, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapExactTokensForTokens'\n            // function onSwapExactTokensForTokens(\n            //   address[] memory pools,\n            //   address[] memory tokens,\n            //   uint256 amountIn,\n            //   uint256 amountOutMin,\n            //   address to,\n            //   uint256 deadline\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'onSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory pools, uint256 amountOut, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory pools,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory pools, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","WEIGHTED_FACTORY_ADDRESS","INIT_CODE_HASH","INIT_CODE_HASH_WEIGHTED","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","OASIS_MAINNET","OASIS_TESTNET","QUARKCHAIN_DEV_S0","NETWORK_CCY","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","PoolType","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fromRouteV3","sources","source","type","Pair","pricingBasesIn","pricingBasesOut","fromRouteV4","pools","pool","price","StablePairWrapper","WeightedPair","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","getAddressForRouter","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","ONE_18","ONE_20","ONE_36","LN_36_LOWER_BOUND","sub","LN_36_UPPER_BOUND","x0","a0","x1","a1","x2","a2","x3","a3","x4","a4","x5","a5","x6","a6","x7","a7","x8","a8","x9","a9","x10","a10","x11","a11","pow","eq","x_int256","y_int256","logx_times_y","lt","ln_36_x","_ln_36","mul","mod","_ln","exp","firstAN","gte","product","seriesSum","term","log","arg","base","logBase","logArg","ln","sum","z_squared","num","MAX_POW_RELATIVE_ERROR","MIN_POW_BASE_FREE_EXPONENT","mulDown","mulUp","divDown","aInflated","divUp","powDown","maxError","powUp","complement","max","min","_MAX_IN_RATIO","_MAX_OUT_RATIO","_MAX_INVARIANT_RATIO","_MIN_INVARIANT_RATIO","_calculateInvariant","normalizedWeights","balances","_invariant","gt","_calcOutGivenIn","balanceIn","weightIn","balanceOut","weightOut","lte","exponent","power","_calcInGivenOut","ratio","_calcLpOutGivenExactTokensIn","amountsIn","lpTotalSupply","swapFeePercentage","balanceRatiosWithFee","invariantRatioWithFees","_computeJoinExactTokensInInvariantRatio","invariantRatio","swapFees","lpOut","amountInWithoutFee","nonTaxableAmount","taxableAmount","swapFee","balanceRatio","_calcTokenInGivenExactLpOut","balance","normalizedWeight","lpAmountOut","taxablePercentage","taxableAmountPlusFees","_calcAllTokensInGivenExactLpOut","totalBPT","lpRatio","_calcLpInGivenExactTokensOut","amountsOut","balanceRatiosWithoutFee","invariantRatioWithoutFees","_computeExitExactTokensOutInvariantRatio","lpIn","amountOutWithFee","_calcTokenOutGivenExactLpIn","lpAmountIn","amountOutWithoutFee","_calcTokensOutGivenExactLpIn","_calcDueTokenProtocolSwapFeeAmount","previousInvariant","currentInvariant","protocolSwapFeePercentage","tokenAccruedFees","FEE_DENOMINATOR","calculateRemoveLiquidityOneTokenExactIn","self","outIndex","lpAmount","lpSupply","tokenBalances","tokenMultipliers","fee","calculateRemoveLiquidityExactIn","_xp","calculateTokenAmount","deposit","lpTokenAmount","calculateSwapGivenIn","inIndex","amountInWithFee","calculateSwapGivenOut","rates","result","WeightedSwapStorage","adminFee","map","_","mock","TENK","_256","_128","MIN_PRECISION","MAX_PRECISION","FIXED_1","FIXED_2","MAX_NUM","LN2_NUMERATOR","LN2_DENOMINATOR","OPT_LOG_MAX_VAL","OPT_EXP_MAX_VAL","maxExpArray","leftShift","shift","signedRightShift","_baseN","_baseD","_expN","_expD","baseLog","optimalLog","generalLog","baseLogTimesExp","optimalExp","findPositionInMaxExpArray","generalExp","floorLog2","_n","res","s","or","count","w","and","isZero","_x","_precision","xi","getAmountOut","reserveIn","reserveOut","tokenWeightIn","tokenWeightOut","baseN","temp1","temp2","getAmountIn","baseD","baseReserveIn","weightA","weights","weightOf","weight0","weight1","inputWeight","outputWeight","console","clone","priceRatioOf","token0PriceRaw","token1PriceRaw","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","indexA","indexB","stableIndexes","referenceMidPrices","status","stablePool","volume","outToken1","calculateSwap","toBigInt","outToken0","priceFromReserve","outToken","addBalanceValue","subtractBalanceValue","indexFromToken","wrapPairsFromPool","wrapperList","j","wrapSinglePairFromPool","MAX_ITERATION","A_PRECISION","_getAPrecise","blockTimestamp","swapStorage","futureATime","futureA","initialA","initialATime","_sumOf","_distance","_getD","xp","amp","nCoins","Dprev","D","Ann","D_P","_getY","inBalance","normalizedBalances","c","lastY","index","inAmount","newInBalance","outBalance","outAmount","_fee","_amountOutInclFee","newOutBalance","_calculateRemoveLiquidity","currentWithdrawFee","feeAdjustedAmount","_getYD","A","yPrev","_feePerToken","_calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","expectedDx","dy","_calculateTokenAmount","newBalances","diff","SwapStorage","lpAddress","dummy","StablePool","_A","values","ethers","constants","AddressZero","getRouterAddress","getLpAddress","keys","tokenFromIndex","getBalances","calculateSwapViaPing","provider","Contract","utils","Interface","StableSwap","swap","calculateRemoveLiquidity","amountLp","calculateRemoveLiquidityOneToken","getLiquidityAmount","userBalances","setSwapStorage","setTokenBalances","setBlockTimestamp","setLpTotalSupply","setBalanceValueByIndex","newBalance","setBalanceValue","toNumber","feeToSet","RouteV3","pathMatrix","routerIds","currentRouterId","lastRouterId","inputOutputComparatorV3","tradeComparatorV3","TradeV3","nextSources","nextSource","bestTradeExactInIteration","originalStablePool","currentSources","includes","stableTrade","sourcesExcludingThisSource","bestTradeExactOutIteration","RouteV4","inputOutputComparatorV4","tradeComparatorV4","TradeV4","nextpools","nextpool","currentpools","poolsExcludingThispool","SQRT2x100","ONE_E18","sqrrt","getTotalValue","payoutToken","reservesOther","weightPayoutToken","weightOther","valuation","totalValue","markdown","RESOLUTION","resPrec","decode","decode112with18","ONE_E16","ONE_E9","payoutFor","bondPrice","fullPayoutFor","currentDebt","terms","bondPrice_","controlVariable","debtRatio","price_","bondPriceUsingDebtRatio","fullPayoutForUsingDebtRatio","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","getDefaultProvider","getNetwork","ERC20","then","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","StablesFetcher","fetchStablePoolData","getTokens","tokenAddresses","indexes","RouterV3","multiSwap","routerId","id","RouterV4"],"mappings":"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"}