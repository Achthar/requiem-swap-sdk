{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pool.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/weightedPairCalc.ts","../src/entities/weightedPair.ts","../src/entities/stables.ts","../src/entities/stablePairWrapper.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts","../src/entities/routeV4.ts","../src/entities/tradeV4.ts","../src/router.ts","../src/fetcher.ts","../src/stablesFetcher.ts","../src/routerV3.ts","../src/routerV4.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\nexport const WEIGHTED_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x73622a125accA39410EdC159E04692014E79b82f',\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\nexport const INIT_CODE_HASH_WEIGHTED: { [chainId: number]: string } = {\n  43113: '0x4df8067145d0a795d56b39c1ba240740a830ae545df3b51d3d8552b02e265c75',\n}\n\nexport const REQUIEM_PAIR_MANAGER:{[chainId:number]:string} ={\n  43113:'0x4de697f41A2Da1c5a6a6905a95438E0aFbBa2382'\n}\n\nexport const REQUIEM_WEIGHTED_PAIR_FACTORY:{[chainId:number]:string} = {\n  43113:'0xacd3602152763C3AAFA705D8a90C36661ecD7d46'\n}\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x1420e95763c97D8A8fA6AA32d1715074765812CD',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x5a42f231cb718a646cec2f73882760b4e67128b3'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const TENK = JSBI.BigInt(10000)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Pair } from \"./pair\"\nimport { StablePairWrapper } from \"./stablePairWrapper\"\nimport { WeightedPair } from \"./weightedPair\"\n\nexport type Pool = Pair | StablePairWrapper | WeightedPair\n\nexport enum PoolType {\n    Pair = 'Pair',\n    StablePairWrapper = 'StablePairWrapper',\n    WeightedPair = 'WeightedPair',\n}","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { RouteV3 } from 'entities/routeV3'\nimport { RouteV4 } from 'entities/routeV4'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n// import { Pair } from 'entities'\nimport { StablePairWrapper } from 'entities/stablePairWrapper'\nimport { WeightedPair } from 'entities'\nimport { PoolType } from '../pool'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV3(route: RouteV3): Price {\n    const prices: Price[] = []\n    for (const [i, source] of route.sources.entries()) {\n      // if (source.type !== 'Pair') {\n      //   console.log(\"invariant\", (source as StablePairWrapper).status)\n      //   invariant((source as StablePairWrapper).status === 'PRICED', 'NOT PRICED')\n      // }\n      prices.push(\n        route.path[i].equals(source.token0)\n          ? (source.type === PoolType.Pair\n            ? new Price(source.reserve0.currency, source.reserve1.currency, source.reserve0.raw, source.reserve1.raw)\n            // here we need the recorded prcing bases\n            : new Price(source.reserve0.currency, source.reserve1.currency,\n              (source as StablePairWrapper).pricingBasesIn[0].raw,\n              (source as StablePairWrapper).pricingBasesOut[1].raw))\n          : (source.type === PoolType.Pair ?\n            new Price(source.reserve1.currency, source.reserve0.currency, source.reserve1.raw, source.reserve0.raw)\n            // pricing base for stablePriceWrapper\n            : new Price(source.reserve1.currency, source.reserve0.currency,\n              (source as StablePairWrapper).pricingBasesIn[1].raw,\n              (source as StablePairWrapper).pricingBasesOut[0].raw))\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  // as well as weighted pairs\n  public static fromRouteV4(route: RouteV4): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      let price: any\n      if (route.path[i].equals(pool.token0)) {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency, pool.reserve0.raw, pool.reserve1.raw)\n            break;\n          }\n          // here we need the recorded prcing bases\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as StablePairWrapper).pricingBasesIn[0].raw,\n              (pool as StablePairWrapper).pricingBasesOut[1].raw)\n            break;\n          }\n          // prcing for weighted pairs - not directly derivable from token amounts\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as WeightedPair).pricingBasesIn[0].raw,\n              (pool as WeightedPair).pricingBasesOut[1].raw)\n            break;\n          }\n        }\n      }\n      else {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency, pool.reserve1.raw, pool.reserve0.raw)\n            break;\n          }\n          // pricing base for stablePriceWrapper\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as StablePairWrapper).pricingBasesIn[1].raw,\n              (pool as StablePairWrapper).pricingBasesOut[0].raw)\n            break;\n          }\n          // pricing base for weighted pairs\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as WeightedPair).pricingBasesIn[1].raw,\n              (pool as WeightedPair).pricingBasesOut[0].raw)\n            break;\n          }\n        }\n      }\n      prices.push(price)\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { Source } from './source'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair implements Source {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(\n              ['bytes'],\n              [pack(\n                ['address', 'address'],\n                [tokens[0].address, tokens[1].address]\n              )]\n            ),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.Pair\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst ZERO = BigNumber.from(0)\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\nconst TENK = BigNumber.from(10000)\nconst _256 = BigNumber.from('256')\nconst _128 = BigNumber.from('128')\nconst MIN_PRECISION = 32;\nconst MAX_PRECISION = 127;\n\nconst FIXED_1 = BigNumber.from('0x080000000000000000000000000000000')\nconst FIXED_2 = BigNumber.from('0x100000000000000000000000000000000')\nconst MAX_NUM = BigNumber.from('0x200000000000000000000000000000000')\n\nconst LN2_NUMERATOR = BigNumber.from('0x3f80fe03f80fe03f80fe03f80fe03f8')\nconst LN2_DENOMINATOR = BigNumber.from('0x5b9de1d10bf4103d647b0955897ba80')\n\nconst OPT_LOG_MAX_VAL = BigNumber.from('0x15bf0a8b1457695355fb8ac404e7a79e3')\nconst OPT_EXP_MAX_VAL = BigNumber.from('0x800000000000000000000000000000000')\n\n// const LAMBERT_CONV_RADIUS = BigNumber.from('0x002f16ac6c59de6f8d5d6f63c1482a7c86')\n// const LAMBERT_POS2_SAMPLE = BigNumber.from('0x0003060c183060c183060c183060c18306')\n// const LAMBERT_POS2_MAXVAL = BigNumber.from('0x01af16ac6c59de6f8d5d6f63c1482a7c80')\n// const LAMBERT_POS3_MAXVAL = BigNumber.from('0x6b22d43e72c326539cceeef8bb48f255ff')\n\n// const MAX_UNF_WEIGHT = BigNumber.from('0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9')\n\nconst maxExpArray = new Array<BigNumber>(128)\nmaxExpArray[32] = BigNumber.from('0x1c35fedd14ffffffffffffffffffffffff')\nmaxExpArray[33] = BigNumber.from('0x1b0ce43b323fffffffffffffffffffffff')\nmaxExpArray[34] = BigNumber.from('0x19f0028ec1ffffffffffffffffffffffff')\nmaxExpArray[35] = BigNumber.from('0x18ded91f0e7fffffffffffffffffffffff')\nmaxExpArray[36] = BigNumber.from('0x17d8ec7f0417ffffffffffffffffffffff')\nmaxExpArray[37] = BigNumber.from('0x16ddc6556cdbffffffffffffffffffffff')\nmaxExpArray[38] = BigNumber.from('0x15ecf52776a1ffffffffffffffffffffff')\nmaxExpArray[39] = BigNumber.from('0x15060c256cb2ffffffffffffffffffffff')\nmaxExpArray[40] = BigNumber.from('0x1428a2f98d72ffffffffffffffffffffff')\nmaxExpArray[41] = BigNumber.from('0x13545598e5c23fffffffffffffffffffff')\nmaxExpArray[42] = BigNumber.from('0x1288c4161ce1dfffffffffffffffffffff')\nmaxExpArray[43] = BigNumber.from('0x11c592761c666fffffffffffffffffffff')\nmaxExpArray[44] = BigNumber.from('0x110a688680a757ffffffffffffffffffff')\nmaxExpArray[45] = BigNumber.from('0x1056f1b5bedf77ffffffffffffffffffff')\nmaxExpArray[46] = BigNumber.from('0x0faadceceeff8bffffffffffffffffffff')\nmaxExpArray[47] = BigNumber.from('0x0f05dc6b27edadffffffffffffffffffff')\nmaxExpArray[48] = BigNumber.from('0x0e67a5a25da4107fffffffffffffffffff')\nmaxExpArray[49] = BigNumber.from('0x0dcff115b14eedffffffffffffffffffff')\nmaxExpArray[50] = BigNumber.from('0x0d3e7a392431239fffffffffffffffffff')\nmaxExpArray[51] = BigNumber.from('0x0cb2ff529eb71e4fffffffffffffffffff')\nmaxExpArray[52] = BigNumber.from('0x0c2d415c3db974afffffffffffffffffff')\nmaxExpArray[53] = BigNumber.from('0x0bad03e7d883f69bffffffffffffffffff')\nmaxExpArray[54] = BigNumber.from('0x0b320d03b2c343d5ffffffffffffffffff')\nmaxExpArray[55] = BigNumber.from('0x0abc25204e02828dffffffffffffffffff')\nmaxExpArray[56] = BigNumber.from('0x0a4b16f74ee4bb207fffffffffffffffff')\nmaxExpArray[57] = BigNumber.from('0x09deaf736ac1f569ffffffffffffffffff')\nmaxExpArray[58] = BigNumber.from('0x0976bd9952c7aa957fffffffffffffffff')\nmaxExpArray[59] = BigNumber.from('0x09131271922eaa606fffffffffffffffff')\nmaxExpArray[60] = BigNumber.from('0x08b380f3558668c46fffffffffffffffff')\nmaxExpArray[61] = BigNumber.from('0x0857ddf0117efa215bffffffffffffffff')\nmaxExpArray[62] = BigNumber.from('0x07ffffffffffffffffffffffffffffffff')\nmaxExpArray[63] = BigNumber.from('0x07abbf6f6abb9d087fffffffffffffffff')\nmaxExpArray[64] = BigNumber.from('0x075af62cbac95f7dfa7fffffffffffffff')\nmaxExpArray[65] = BigNumber.from('0x070d7fb7452e187ac13fffffffffffffff')\nmaxExpArray[66] = BigNumber.from('0x06c3390ecc8af379295fffffffffffffff')\nmaxExpArray[67] = BigNumber.from('0x067c00a3b07ffc01fd6fffffffffffffff')\nmaxExpArray[68] = BigNumber.from('0x0637b647c39cbb9d3d27ffffffffffffff')\nmaxExpArray[69] = BigNumber.from('0x05f63b1fc104dbd39587ffffffffffffff')\nmaxExpArray[70] = BigNumber.from('0x05b771955b36e12f7235ffffffffffffff')\nmaxExpArray[71] = BigNumber.from('0x057b3d49dda84556d6f6ffffffffffffff')\nmaxExpArray[72] = BigNumber.from('0x054183095b2c8ececf30ffffffffffffff')\nmaxExpArray[73] = BigNumber.from('0x050a28be635ca2b888f77fffffffffffff')\nmaxExpArray[74] = BigNumber.from('0x04d5156639708c9db33c3fffffffffffff')\nmaxExpArray[75] = BigNumber.from('0x04a23105873875bd52dfdfffffffffffff')\nmaxExpArray[76] = BigNumber.from('0x0471649d87199aa990756fffffffffffff')\nmaxExpArray[77] = BigNumber.from('0x04429a21a029d4c1457cfbffffffffffff')\nmaxExpArray[78] = BigNumber.from('0x0415bc6d6fb7dd71af2cb3ffffffffffff')\nmaxExpArray[79] = BigNumber.from('0x03eab73b3bbfe282243ce1ffffffffffff')\nmaxExpArray[80] = BigNumber.from('0x03c1771ac9fb6b4c18e229ffffffffffff')\nmaxExpArray[81] = BigNumber.from('0x0399e96897690418f785257fffffffffff')\nmaxExpArray[82] = BigNumber.from('0x0373fc456c53bb779bf0ea9fffffffffff')\nmaxExpArray[83] = BigNumber.from('0x034f9e8e490c48e67e6ab8bfffffffffff')\nmaxExpArray[84] = BigNumber.from('0x032cbfd4a7adc790560b3337ffffffffff')\nmaxExpArray[85] = BigNumber.from('0x030b50570f6e5d2acca94613ffffffffff')\nmaxExpArray[86] = BigNumber.from('0x02eb40f9f620fda6b56c2861ffffffffff')\nmaxExpArray[87] = BigNumber.from('0x02cc8340ecb0d0f520a6af58ffffffffff')\nmaxExpArray[88] = BigNumber.from('0x02af09481380a0a35cf1ba02ffffffffff')\nmaxExpArray[89] = BigNumber.from('0x0292c5bdd3b92ec810287b1b3fffffffff')\nmaxExpArray[90] = BigNumber.from('0x0277abdcdab07d5a77ac6d6b9fffffffff')\nmaxExpArray[91] = BigNumber.from('0x025daf6654b1eaa55fd64df5efffffffff')\nmaxExpArray[92] = BigNumber.from('0x0244c49c648baa98192dce88b7ffffffff')\nmaxExpArray[93] = BigNumber.from('0x022ce03cd5619a311b2471268bffffffff')\nmaxExpArray[94] = BigNumber.from('0x0215f77c045fbe885654a44a0fffffffff')\nmaxExpArray[95] = BigNumber.from('0x01ffffffffffffffffffffffffffffffff')\nmaxExpArray[96] = BigNumber.from('0x01eaefdbdaaee7421fc4d3ede5ffffffff')\nmaxExpArray[97] = BigNumber.from('0x01d6bd8b2eb257df7e8ca57b09bfffffff')\nmaxExpArray[98] = BigNumber.from('0x01c35fedd14b861eb0443f7f133fffffff')\nmaxExpArray[99] = BigNumber.from('0x01b0ce43b322bcde4a56e8ada5afffffff')\nmaxExpArray[100] = BigNumber.from('0x019f0028ec1fff007f5a195a39dfffffff')\nmaxExpArray[101] = BigNumber.from('0x018ded91f0e72ee74f49b15ba527ffffff')\nmaxExpArray[102] = BigNumber.from('0x017d8ec7f04136f4e5615fd41a63ffffff')\nmaxExpArray[103] = BigNumber.from('0x016ddc6556cdb84bdc8d12d22e6fffffff')\nmaxExpArray[104] = BigNumber.from('0x015ecf52776a1155b5bd8395814f7fffff')\nmaxExpArray[105] = BigNumber.from('0x015060c256cb23b3b3cc3754cf40ffffff')\nmaxExpArray[106] = BigNumber.from('0x01428a2f98d728ae223ddab715be3fffff')\nmaxExpArray[107] = BigNumber.from('0x013545598e5c23276ccf0ede68034fffff')\nmaxExpArray[108] = BigNumber.from('0x01288c4161ce1d6f54b7f61081194fffff')\nmaxExpArray[109] = BigNumber.from('0x011c592761c666aa641d5a01a40f17ffff')\nmaxExpArray[110] = BigNumber.from('0x0110a688680a7530515f3e6e6cfdcdffff')\nmaxExpArray[111] = BigNumber.from('0x01056f1b5bedf75c6bcb2ce8aed428ffff')\nmaxExpArray[112] = BigNumber.from('0x00faadceceeff8a0890f3875f008277fff')\nmaxExpArray[113] = BigNumber.from('0x00f05dc6b27edad306388a600f6ba0bfff')\nmaxExpArray[114] = BigNumber.from('0x00e67a5a25da41063de1495d5b18cdbfff')\nmaxExpArray[115] = BigNumber.from('0x00dcff115b14eedde6fc3aa5353f2e4fff')\nmaxExpArray[116] = BigNumber.from('0x00d3e7a3924312399f9aae2e0f868f8fff')\nmaxExpArray[117] = BigNumber.from('0x00cb2ff529eb71e41582cccd5a1ee26fff')\nmaxExpArray[118] = BigNumber.from('0x00c2d415c3db974ab32a51840c0b67edff')\nmaxExpArray[119] = BigNumber.from('0x00bad03e7d883f69ad5b0a186184e06bff')\nmaxExpArray[120] = BigNumber.from('0x00b320d03b2c343d4829abd6075f0cc5ff')\nmaxExpArray[121] = BigNumber.from('0x00abc25204e02828d73c6e80bcdb1a95bf')\nmaxExpArray[122] = BigNumber.from('0x00a4b16f74ee4bb2040a1ec6c15fbbf2df')\nmaxExpArray[123] = BigNumber.from('0x009deaf736ac1f569deb1b5ae3f36c130f')\nmaxExpArray[124] = BigNumber.from('0x00976bd9952c7aa957f5937d790ef65037')\nmaxExpArray[125] = BigNumber.from('0x009131271922eaa6064b73a22d0bd4f2bf')\nmaxExpArray[126] = BigNumber.from('0x008b380f3558668c46c91c49a2f8e967b9')\nmaxExpArray[127] = BigNumber.from('0x00857ddf0117efa215952912839f6473e6')\n\nfunction leftShift(num: BigNumber, shift: BigNumber) {\n    return num.mul(TWO.pow(shift))\n}\n\nfunction signedRightShift(num: BigNumber, shift: BigNumber) {\n    return num.div(TWO.pow(shift))\n}\n\n/**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\nexport function power(\n    _baseN: BigNumber,\n    _baseD: BigNumber,\n    _expN: BigNumber,\n    _expD: BigNumber\n): [BigNumber, number] {\n    invariant(_baseN.gt(_baseD), \"not support _baseN < _baseD\");\n    invariant(_baseN.lt(MAX_NUM))\n\n    let baseLog;\n    let base = (_baseN.mul(FIXED_1)).div(_baseD);\n    if (base.lt(OPT_LOG_MAX_VAL)) {\n        baseLog = optimalLog(base);\n    } else {\n        baseLog = generalLog(base);\n    }\n\n    let baseLogTimesExp = (baseLog.mul(_expN)).div(_expD);\n    if (baseLogTimesExp.lt(OPT_EXP_MAX_VAL)) {\n        return [optimalExp(baseLogTimesExp), MAX_PRECISION]\n    } else {\n        let precision = findPositionInMaxExpArray(baseLogTimesExp);\n        return [generalExp(signedRightShift(baseLogTimesExp, BigNumber.from(MAX_PRECISION - precision)), BigNumber.from(precision)), precision]\n    }\n}\n\n/**\n * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n */\nfunction floorLog2(_n: BigNumber): BigNumber {\n    let res = ZERO;\n    if (_n.lt(_256)) {\n        // At most 8 iterations\n        while (_n.gt(ONE)) {\n            _n = signedRightShift(_n, ONE);\n            res = res.add(ONE);\n        }\n    } else {\n        // Exactly 8 iterations\n        for (let s = _128; s.gt(ZERO); s = signedRightShift(s, ONE)) {\n            if (_n.gt(leftShift(ONE, s))) {\n                _n = signedRightShift(_n, s)\n                res = res.or(s);\n            }\n        }\n    }\n    \n    return res;\n}\n\n/**\n * @dev computes log(x / FIXED_1) * FIXED_1.\n * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n */\nexport function generalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n    if (x.gte(FIXED_2)) {\n        const count = floorLog2(x.div(FIXED_1));\n        x = signedRightShift(x, count);\n        // now x < 2\n        res = count.mul(FIXED_1);\n    }\n\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n    if (x.gt(FIXED_1)) {\n        for (let i = MAX_PRECISION; i > 0; --i) {\n            x = (x.mul(x)).div(FIXED_1);\n            // now 1 < x < 4\n            if (x.gte(FIXED_2)) {\n                x = signedRightShift(x, ONE);\n                // now 1 < x < 2\n                res = res.add(leftShift(ONE, BigNumber.from(i - 1)));\n            }\n        }\n    }\n\n    return (res.mul(LN2_NUMERATOR)).div(LN2_DENOMINATOR)\n}\n\n/**\n    * @dev computes log(x / FIXED_1) * FIXED_1\n    * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n    * Auto-generated via \"PrintFunctionOptimalLog.py\"\n    * Detailed description:\n    * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n    * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n    * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n    * - The natural logarithm of the input is calculated by summing up the intermediate results above\n    * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n    */\nexport function optimalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n    let w;\n\n    if (x.gte('0xd3094c70f034de4b96ff7d5b6f99fcd8')) {\n        res = res.add(BigNumber.from('0x40000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xd3094c70f034de4b96ff7d5b6f99fcd8'));\n    }\n    // add 1 / 2^1\n    if (x.gte('0xa45af1e1f40c333b3de1db4dd55f29a7')) {\n        res = res.add(BigNumber.from('0x20000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xa45af1e1f40c333b3de1db4dd55f29a7'));\n    }\n    // add 1 / 2^2\n    if (x.gte('0x910b022db7ae67ce76b441c27035c6a1')) {\n        res = res.add(BigNumber.from('0x10000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x910b022db7ae67ce76b441c27035c6a1'));\n    }\n    // add 1 / 2^3\n    if (x.gte('0x88415abbe9a76bead8d00cf112e4d4a8')) {\n        res = res.add(BigNumber.from('0x08000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x88415abbe9a76bead8d00cf112e4d4a8'));\n    }\n    // add 1 / 2^4\n    if (x.gte('0x84102b00893f64c705e841d5d4064bd3')) {\n        res = res.add(BigNumber.from('0x04000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x84102b00893f64c705e841d5d4064bd3'));\n    }\n    // add 1 / 2^5\n    if (x.gte('0x8204055aaef1c8bd5c3259f4822735a2')) {\n        res = res.add(BigNumber.from('0x02000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x8204055aaef1c8bd5c3259f4822735a2'));\n    }\n    // add 1 / 2^6\n    if (x.gte('0x810100ab00222d861931c15e39b44e99')) {\n        res = res.add(BigNumber.from('0x01000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x810100ab00222d861931c15e39b44e99'));\n    }\n    // add 1 / 2^7\n    if (x.gte('0x808040155aabbbe9451521693554f733')) {\n        res = res.add(BigNumber.from('0x00800000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x808040155aabbbe9451521693554f733'));\n    }\n    // add 1 / 2^8\n\n    z = y = x.sub(FIXED_1);\n    w = (y.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x100000000000000000000000000000000').sub(y)).div(BigNumber.from('0x100000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^01 / 01 - y^02 / 02\n    res = res.add(z.mul(BigNumber.from('0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').sub(y)).div(BigNumber.from('0x200000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^03 / 03 - y^04 / 04\n    res = res.add(z.mul(BigNumber.from('0x099999999999999999999999999999999').sub(y)).div(BigNumber.from('0x300000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^05 / 05 - y^06 / 06\n    res = res.add(z.mul(BigNumber.from('0x092492492492492492492492492492492').sub(y)).div(BigNumber.from('0x400000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^07 / 07 - y^08 / 08\n    res = res.add(z.mul(BigNumber.from('0x08e38e38e38e38e38e38e38e38e38e38e').sub(y)).div(BigNumber.from('0x500000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^09 / 09 - y^10 / 10\n    res = res.add(z.mul(BigNumber.from('0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b').sub(y)).div(BigNumber.from('0x600000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^11 / 11 - y^12 / 12\n    res = res.add(z.mul(BigNumber.from('0x089d89d89d89d89d89d89d89d89d89d89').sub(y)).div(BigNumber.from('0x700000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^13 / 13 - y^14 / 14\n    res = res.add(z.mul(BigNumber.from('0x088888888888888888888888888888888').sub(y)).div(BigNumber.from('0x800000000000000000000000000000000')));\n    // add y^15 / 15 - y^16 / 16\n\n    return res;\n}\n\nexport function optimalExp(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n\n    z = y = x.mod(BigNumber.from('0x10000000000000000000000000000000'));\n    // get the input modulo 2^(-3)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x10e1b3be415a0000')));\n    // add y^02 * (20! / 02!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x05a0913f6b1e0000')));\n    // add y^03 * (20! / 03!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0168244fdac78000')));\n    // add y^04 * (20! / 04!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x004807432bc18000')));\n    // add y^05 * (20! / 05!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000c0135dca04000')));\n    // add y^06 * (20! / 06!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0001b707b1cdc000')));\n    // add y^07 * (20! / 07!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000036e0f639b800')));\n    // add y^08 * (20! / 08!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000618fee9f800')));\n    // add y^09 * (20! / 09!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000009c197dcc00')));\n    // add y^10 * (20! / 10!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000e30dce400')));\n    // add y^11 * (20! / 11!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000012ebd1300')));\n    // add y^12 * (20! / 12!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000017499f00')));\n    // add y^13 * (20! / 13!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000001a9d480')));\n    // add y^14 * (20! / 14!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000000001c6380')));\n    // add y^15 * (20! / 15!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000001c638')));\n    // add y^16 * (20! / 16!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000001ab8')));\n    // add y^17 * (20! / 17!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000000017c')));\n    // add y^18 * (20! / 18!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000014')));\n    // add y^19 * (20! / 19!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000001')));\n    // add y^20 * (20! / 20!)\n    res = res.div(BigNumber.from('0x21c3677c82b40000')).add(y).add(FIXED_1);\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    if (!(x.and(BigNumber.from('0x010000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1c3d6a24ed82218787d624d3e5eba95f9'))).div(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e776'));\n    // multiply by e^2^(-3)\n    if (!(x.and(BigNumber.from('0x020000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e778'))).div(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed4'));\n    // multiply by e^2^(-2)\n    if (!(x.and(BigNumber.from('0x040000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed5'))).div(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21f'));\n    // multiply by e^2^(-1)\n    if (!(x.and(BigNumber.from('0x080000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21e'))).div(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c9'));\n    // multiply by e^2^(+0)\n    if (!(x.and(BigNumber.from('0x100000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c5'))).div(BigNumber.from('0x00960aadc109e7a3bf4578099615711ea'));\n    // multiply by e^2^(+1)\n    if (!(x.and(BigNumber.from('0x200000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x00960aadc109e7a3bf4578099615711d7'))).div(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdce3d'));\n    // multiply by e^2^(+2)\n    if (!(x.and(BigNumber.from('0x400000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdc307'))).div(BigNumber.from('0x0000003c6ab775dd0b95b4cbee7e65d11'));\n    // multiply by e^2^(+3)\n    \n    return res;\n}\n\n/**\n   * @dev this function can be auto-generated by the script \"PrintFunctionGeneralExp.py\".\n   * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n   * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n   * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n   * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n   */\nexport function generalExp(_x: BigNumber, _precision: BigNumber) {\n    let xi = _x;\n    let res = ZERO;\n\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x3442c4e6074a82f1797f72ac0000000'));\n    // add x^02 * (33! / 02!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x116b96f757c380fb287fd0e40000000'));\n    // add x^03 * (33! / 03!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x045ae5bdd5f0e03eca1ff4390000000'));\n    // add x^04 * (33! / 04!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00defabf91302cd95b9ffda50000000'));\n    // add x^05 * (33! / 05!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x002529ca9832b22439efff9b8000000'));\n    // add x^06 * (33! / 06!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00054f1cf12bd04e516b6da88000000'));\n    // add x^07 * (33! / 07!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000a9e39e257a09ca2d6db51000000'));\n    // add x^08 * (33! / 08!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000012e066e7b839fa050c309000000'));\n    // add x^09 * (33! / 09!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000001e33d7d926c329a1ad1a800000'));\n    // add x^10 * (33! / 10!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000002bee513bdb4a6b19b5f800000'));\n    // add x^11 * (33! / 11!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000003a9316fa79b88eccf2a00000'));\n    // add x^12 * (33! / 12!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000048177ebe1fa812375200000'));\n    // add x^13 * (33! / 13!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000005263fe90242dcbacf00000'));\n    // add x^14 * (33! / 14!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000057e22099c030d94100000'));\n    // add x^15 * (33! / 15!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000057e22099c030d9410000'));\n    // add x^16 * (33! / 16!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000052b6b54569976310000'));\n    // add x^17 * (33! / 17!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000004985f67696bf748000'));\n    // add x^18 * (33! / 18!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000003dea12ea99e498000'));\n    // add x^19 * (33! / 19!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000031880f2214b6e000'));\n    // add x^20 * (33! / 20!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000025bcff56eb36000'));\n    // add x^21 * (33! / 21!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000001b722e10ab1000'));\n    // add x^22 * (33! / 22!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000001317c70077000'));\n    // add x^23 * (33! / 23!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000cba84aafa00'));\n    // add x^24 * (33! / 24!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000082573a0a00'));\n    // add x^25 * (33! / 25!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000005035ad900'));\n    // add x^26 * (33! / 26!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000000000002f881b00'));\n    // add x^27 * (33! / 27!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000001b29340'));\n    // add x^28 * (33! / 28!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000000000efc40'));\n    // add x^29 * (33! / 29!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000007fe0'));\n    // add x^30 * (33! / 30!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000420'));\n    // add x^31 * (33! / 31!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000021'));\n    // add x^32 * (33! / 32!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000001'));\n    // add x^33 * (33! / 33!)\n\n    \n    return (res.div(BigNumber.from('0x688589cc0e9505e2f2fee5580000000'))).add(_x).add(leftShift(ONE, _precision));\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\n}\n\n/**\n    * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n    * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n    * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n    */\nexport function findPositionInMaxExpArray(_x: BigNumber): number {\n    let lo = MIN_PRECISION;\n    let hi = MAX_PRECISION;\n\n    while (lo + 1 < hi) {\n        let mid = (lo + hi) / 2;\n        if (maxExpArray[mid].gte(_x)) lo = mid;\n        else hi = mid;\n    }\n\n    if (maxExpArray[hi].gte(_x)) return hi;\n    if (maxExpArray[lo].gte(_x)) return lo;\n\n    invariant(false);\n}\n\n/**\n * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\n *\n * Formula:\n * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\n *\n * @param amountIn                  source reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountOut\n */\nexport function getAmountOut(\n    amountIn: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    // validate input\n    invariant(amountIn.gt(ZERO), \"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\");\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    const amountInWithFee = amountIn.mul(TENK.sub(swapFee))\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        return (reserveOut.mul(amountInWithFee)).div(reserveIn.mul(TENK).add(amountInWithFee));\n    }\n\n    // let result;\n    // let precision: number;\n    const baseN = (reserveIn.mul(TENK)).add(amountInWithFee)\n    const [result, precision] = power(baseN, reserveIn.mul(TENK), tokenWeightIn, tokenWeightOut);\n    \n    const temp1 = reserveOut.mul(result);\n    const temp2 = leftShift(reserveOut, BigNumber.from(precision));\n    \n    return (temp1.sub(temp2)).div(result)\n}\n\n/**\n * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n *\n * Formula:\n * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\n *\n * @param amountOut     target reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountIn\n */\nexport function getAmountIn(\n    amountOut: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n) {\n    // validate input\n    invariant(amountOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\");\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        const numerator = reserveIn.mul(amountOut).mul(TENK);\n        const denominator = reserveOut.sub(amountOut).mul(TENK.sub(swapFee));\n        return (numerator.div(denominator)).add(1);\n    }\n\n    const baseD = reserveOut.sub(amountOut);\n    const [result, precision] = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\n    const baseReserveIn = reserveIn.mul(TENK);\n    const temp1 = baseReserveIn.mul(result);\n    const temp2 = leftShift(baseReserveIn, BigNumber.from(precision));\n    return (signedRightShift(temp1.sub(temp2), BigNumber.from(precision)).div(TENK.sub(swapFee))).add(1);\n}\n\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  BigintIsh,\n  WEIGHTED_FACTORY_ADDRESS,\n  INIT_CODE_HASH_WEIGHTED,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  // ONE,\n  FIVE,\n  _100,\n  // FEES_NUMERATOR,\n  // FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { getAmountOut, getAmountIn } from './weightedPairCalc'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: {\n  [token0Address: string]: {\n    [token1Address: string]: {\n      [weight0_fee: string]: string\n    }\n  }\n} = {}\n\nexport class WeightedPair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  // the tokenAmount for calculating the price\n  // these cannot be derived from the tokenAmounts since\n  // they follow the stableSwap logic for pricing\n  public pricingBasesIn: TokenAmount[]\n  public pricingBasesOut: TokenAmount[]\n  private readonly weights: [JSBI, JSBI]\n  private readonly fee: JSBI\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token, weightA: JSBI, fee: JSBI): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const weights = tokenA.sortsBefore(tokenB) ? [weightA.toString(), JSBI.subtract(_100, weightA).toString()] : [JSBI.subtract(_100, weightA).toString(), weightA.toString()] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address]?.[`${weights[0]}-${fee.toString()}`] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: {\n            ...PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address],\n            [`${weights[0]}-${fee.toString()}`]: getCreate2Address(\n              WEIGHTED_FACTORY_ADDRESS[tokens[0].chainId],\n              keccak256(\n                ['bytes'],\n                [pack(\n                  ['address', 'address', 'uint32', 'uint32'],\n                  [tokens[0].address, tokens[1].address, weights[0], fee.toString()]\n                )]\n              ),\n              INIT_CODE_HASH_WEIGHTED[tokens[0].chainId]\n            )\n          },\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address][`${weights[0]}-${fee.toString()}`]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, weightA: JSBI, fee: JSBI) {\n\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.weights = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [weightA, JSBI.subtract(_100, weightA)]\n      : [JSBI.subtract(_100, weightA), weightA]\n    this.fee = fee\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      WeightedPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, weightA, fee),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.WeightedPair\n\n    // assign pricing bases\n    this.pricingBasesIn = tokenAmounts\n    this.pricingBasesOut = tokenAmounts\n\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  public get fee0(): JSBI {\n    return this.fee\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get weight0(): JSBI {\n    return this.weights[0]\n  }\n\n  public get weight1(): JSBI {\n    return this.weights[1]\n  }\n\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n  public weightOf(token: Token): JSBI {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.weight0 : this.weight1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputWeight = this.weightOf(inputAmount.token)\n    const outputWeight = this.weightOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountOut(inputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountOut(\n          inputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // console.log(\"OA\", outputAmount.raw.toString())\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [outputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    console.log(\"-- this 0\", this.reserve0.raw, \"1\", this.reserve1.raw, \"out\", outputAmount.raw)\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const outputWeight = this.weightOf(outputAmount.token)\n    const inputWeight = this.weightOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountIn(outputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountIn(\n          outputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [inputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n\n  public clone(): WeightedPair {\n    return new WeightedPair(this.tokenAmounts[0], this.tokenAmounts[1], this.weight0, this.fee)\n  }\n}\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import { StablePool } from \"./stablePool\";\nimport { Token, } from \"./token\";\nimport { Price } from \"./fractions/price\";\nimport { TokenAmount } from \"./fractions/tokenAmount\";\nimport invariant from \"tiny-invariant\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Source } from './source';\nimport { ChainId, STABLE_POOL_LP_ADDRESS, STABLE_POOL_ADDRESS } from \"./../constants\";\nimport { PoolType } from \"./pool\";\n\n// A class that wraps a stablePool to a pair-like structure\nexport class StablePairWrapper implements Source {\n\n    // the tokenAmounts are the reference Balances that we keep track of in the stablePool\n    // whenever we make changes to these, we need to update the stablePool reference Balance to calculate the correct \n    public tokenAmounts: TokenAmount[]\n    public readonly stableIndexes: number[]\n\n    // the tokenAmount for calculating the price\n    // these cannot be derived from the tokenAmounts since\n    // they follow the stableSwap logic for pricing\n    public pricingBasesIn: TokenAmount[]\n    public pricingBasesOut: TokenAmount[]\n    public readonly type: PoolType\n    public readonly referenceMidPrices: Price[]\n    public readonly liquidityToken: Token\n    public status: string\n    // public executionPrice: Price\n    // public readonly inputReserve: TokenAmount\n    // public readonly outputReserve: TokenAmount\n\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, indexA: number, indexB: number) {\n\n        invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_IDS')\n\n        this.liquidityToken = new Token(\n            tokenAmountA.token.chainId,\n            STABLE_POOL_LP_ADDRESS[tokenAmountA.token.chainId] ?? '0x0000000000000000000000000000000000000001',\n            18,\n            'RequiemStable-LP',\n            'Requiem StableSwap LPs'\n        )\n\n        this.tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.stableIndexes = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [indexA, indexB] : [indexB, indexA]\n\n        this.pricingBasesIn = this.tokenAmounts\n        this.pricingBasesOut = this.tokenAmounts\n        // this.executionPrice = new Price(tokenAmountA.token, tokenAmountB.token, tokenAmountA.raw, tokenAmountB.raw)\n        this.referenceMidPrices = []\n        this.type = PoolType.StablePairWrapper\n        this.status = 'NOT PRICED'\n    }\n\n\n    public getAddressForRouter(): string {\n        return STABLE_POOL_ADDRESS[this.tokenAmounts[0].token.chainId]\n    }\n\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    // reserves cannot be this.tokenAmounts because\n    // these are directly used for prices\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    // this gets the reserve of the respectve (stable) token\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n\n    public priceOf(token: Token, stablePool: StablePool, volume: BigNumber) {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price(stablePool, volume) : this.token1Price(stablePool, volume)\n    }\n\n    /**\n * Returns the current price at given volume of the pair in terms of token0, i.e. the ratio calculated by the stableSwap\n */\n    public token0Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken1 = stablePool.calculateSwap(this.stableIndexes[0], this.stableIndexes[1], volume)\n        return new Price(this.token0, this.token1, outToken1.toBigInt(), volume.toBigInt())\n    }\n\n    /**\n * Returns the current mid price of the pair in terms of token1, i.e. the ratio calculated by the stableSwap\n */\n    public token1Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken0 = stablePool.calculateSwap(this.stableIndexes[1], this.stableIndexes[0], volume)\n        return new Price(this.token1, this.token0, outToken0.toBigInt(), volume.toBigInt())\n    }\n\n    public priceFromReserve(outToken: Token) {\n        const outIndex = outToken.equals(this.token0) ? 0 : 1\n        const inIndex = outToken.equals(this.token1) ? 0 : 1\n        return new Price(\n            this.pricingBasesIn[inIndex].token,\n            this.pricingBasesOut[outIndex].token,\n            this.pricingBasesIn[inIndex].raw,\n            this.pricingBasesOut[outIndex].raw\n        )\n    }\n\n    /**\n     * function that wraps the output calculation based on a stablePool\n     * @param inputAmount input amount that is used for calculating the output amount\n     * @param stablePool input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the output amount as TokenAmount and the StableWrappedPair with the adjusted balances\n     */\n    public getOutputAmount(inputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const output = stablePool.getOutputAmount(\n            inputAmount,\n            this.token0.equals(inputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(inputAmount)\n        stablePool.subtractBalanceValue(output)\n\n        // here we save the pricing results if it is called\n        const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n        const outIndex = output.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = inputAmount\n        this.pricingBasesOut[outIndex] = output\n        this.status = 'PRICED'\n        // console.log(\"get \" + output.raw.toString() + output.token.symbol + \" for \" + inputAmount.raw.toString() + inputAmount.token.symbol)\n        // this.executionPrice = new Price(inputAmount.token, output.token, inputAmount.raw, output.raw)\n        return [\n            output,\n            new StablePairWrapper(\n                inputAmount,\n                output, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))\n        ]\n    }\n\n    /**\n     * function that wraps the input calculation based on a stablePool\n     * @param outputAmount output amount to calculate the input with\n     * @param stablePool  input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the input TokenAmount required to obtain the target output\n     */\n    public getInputAmount(outputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        const input = stablePool.getInputAmount(\n            outputAmount,\n            this.token0.equals(outputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // here we save the pricing results if it is called\n        const inIndex = input.token.equals(this.token0) ? 0 : 1\n        const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = input\n        this.pricingBasesOut[outIndex] = outputAmount\n        this.status = 'PRICED'\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(input)\n        stablePool.subtractBalanceValue(outputAmount)\n\n        // console.log(\"get \" + outputAmount.raw.toString() + outputAmount.token.symbol + \" for \" + input.raw.toString() + input.token.symbol)\n\n        return [input,\n            new StablePairWrapper(\n                input,\n                outputAmount, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))]\n    }\n\n    // generates the n^2-n combinations for wrappedStablePairs\n    public static wrapPairsFromPool(stablePool: StablePool): StablePairWrapper[] {\n\n        let wrapperList = []\n\n        for (let i = 0; i < stablePool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                wrapperList.push(new StablePairWrapper(\n                    new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n                    new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n                    i,\n                    j\n                ))\n            }\n        }\n        return wrapperList\n    }\n\n    public static wrapSinglePairFromPool(stablePool: StablePool, i: number, j: number) {\n        invariant(i !== j, 'SAME INDEX')\n        invariant(i < stablePool.tokenBalances.length || j < stablePool.tokenBalances.length, 'INDEX OUT OF RANGE')\n        return new StablePairWrapper(\n            new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n            new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n            i,\n            j\n        )\n    }\n}","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\nconst ONE = BigNumber.from(1)\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(ONE)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\nexport function calculateSwapGivenOut(inIndex: number, outIndex: number, outAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n\n    let _amountOutInclFee = outAmount.mul(FEE_DENOMINATOR).div(FEE_DENOMINATOR.sub(swapStorage.fee));\n    let newOutBalance = normalizedBalances[outIndex].sub(_amountOutInclFee.mul(swapStorage.tokenMultipliers[outIndex]));\n\n    let inBalance = _getY(\n        outIndex,\n        inIndex,\n        newOutBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    const inAmount = ((inBalance.sub(normalizedBalances[inIndex]).sub(ONE)).div(swapStorage.tokenMultipliers[inIndex])).add(ONE)\n    return inAmount;\n}\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount,\n  calculateSwapGivenOut\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS,\n  STABLE_POOL_LP_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getRouterAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public static getLpAddress(chainId: number): string {\n    return STABLE_POOL_LP_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      STABLE_POOL_LP_ADDRESS[tokens[0].chainId] ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC') }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  public getAddressForRouter(): string {\n    return STABLE_POOL_ADDRESS[this.tokens[0].chainId]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber | BigintIsh,\n    chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(StablePool.getRouterAddress(chainId), new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenOut(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwapGivenOut(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inIndex: number): TokenAmount {\n    const swap = this.calculateSwapGivenOut(inIndex, this.indexFromToken(outputAmount.token), outputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(inIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwap(i, outIndex, userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: SwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): StablePool {\n    return new StablePool(\n      this.tokens, this.tokenBalances, this._A, this.swapStorage, this.blockTimestamp.toNumber(), this.lpTotalSupply, this.currentWithdrawFee\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\nimport { StablePairWrapper } from './stablePairWrapper'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly sources: (Pair | StablePairWrapper)[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n  public readonly pathMatrix: Token[][]\n  public readonly routerIds: number[]\n\n  public constructor(sources: (Pair | StablePairWrapper)[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(sources.length > 0, 'SOURCES')\n    invariant(\n      sources.every(source => source.chainId === sources[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && sources[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[sources[0].chainId] && sources[0].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && sources[sources.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[sources[0].chainId] && sources[sources.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[sources[0].chainId]]\n    for (const [i, source] of sources.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.sources = sources\n    this.path = path\n    this.midPrice = Price.fromRouteV3(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n\n    // generate new inputs for aggregator \n\n    const pathMatrix: Token[][] = []\n    const routerIds: number[] = []\n    let currentInput = this.path[0]\n    let currentRouterId: number = -1\n    let lastRouterId: number = -1\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      currentRouterId = sources[i] instanceof StablePairWrapper ? 0 : 1\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n\n      if (i === 0) {\n        pathMatrix.push([currentInput, output])\n        routerIds.push(source instanceof StablePairWrapper ? 0 : 1)\n      }\n      else {\n        if (source instanceof StablePairWrapper) { // current item is stablePool\n          pathMatrix.push([currentInput, output])\n          routerIds.push(0)\n        }\n        else { // current item is a pair\n          if (lastRouterId === 0) {\n            pathMatrix.push([currentInput, output])\n            routerIds.push(1)\n          } else {\n            pathMatrix[pathMatrix.length - 1].push(output)\n          }\n        }\n      }\n      currentInput = output\n      lastRouterId = currentRouterId\n    }\n\n    this.pathMatrix = pathMatrix\n    this.routerIds = routerIds\n  }\n\n  public get chainId(): ChainId {\n    return this.sources[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextSources: (Pair | StablePairWrapper)[] = new Array(route.sources.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const source = route.sources[i]\n        const [outputAmount, nextSource] = source instanceof Pair ?\n          source.getOutputAmount(amounts[i]) :\n          source.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextSources[i] = nextSource\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const source = route.sources[i - 1]\n        const [inputAmount, nextSource] = source instanceof Pair ?\n          source.getInputAmount(amounts[i]) :\n          source.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextSources[i - 1] = nextSource\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV3(new RouteV3(nextSources, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      source.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      let source = sources[i]\n\n\n      if (!source.token0.equals(amountIn.token) && !source.token1.equals(amountIn.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = source instanceof Pair ? source.getOutputAmount(amountIn) : source.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentSources, source], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentSources, source],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param sources the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentSources used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check ifit can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      source.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      // source irrelevant\n      if (!source.token0.equals(amountOut.token) && !source.token1.equals(amountOut.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = source instanceof Pair ? source.getInputAmount(amountOut) : source.getInputAmount(amountOut, stablePool)\n      } catch (error) {\n        // not enough liquidity in this source\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([source, ...currentSources], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [source, ...currentSources],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV4 {\n  public readonly stablePool: StablePool\n  public readonly pools: Pool[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pools: Pool[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(pools.length > 0, 'poolS')\n    invariant(\n      pools.every(pool => pool.chainId === pools[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pools[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pools[0].chainId] && pools[0].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pools[pools.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pools[0].chainId] && pools[pools.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pools[0].chainId]]\n    for (const [i, pool] of pools.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pool.token0) || currentInput.equals(pool.token1), 'PATH')\n      const output = currentInput.equals(pool.token0) ? pool.token1 : pool.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.pools = pools\n    this.path = path\n    this.midPrice = Price.fromRouteV4(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pools[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { WeightedPair } from './weightedPair'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { Pool, PoolType } from './pool'\nimport { RouteV4 } from './routeV4'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// function computePriceImpactWeightedPair(pair: WeightedPair, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n//   const artificialMidPrice = new Price(\n//     inputAmount.currency,\n//     outputAmount.currency,\n//     pair.reserveOf(wrappedCurrency(inputAmount.currency, pair.chainId)).raw,\n//     pair.reserveOf(wrappedCurrency(outputAmount.currency, pair.chainId)).raw)\n//   const exactQuote = artificialMidPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV4(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV4(a: TradeV4, b: TradeV4) {\n  const ioComp = inputOutputComparatorV4(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV4 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV4 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV4\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV4, amountIn: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV4, amountOut: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV4, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextpools: Pool[] = new Array(route.pools.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        let outputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [outputAmount, nextpool] = pool.clone().getOutputAmount(amounts[i])\n        } else {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i], stablePool)\n        }\n        // const [outputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getOutputAmount(amounts[i]) :\n        //   pool.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextpools[i] = nextpool\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        let inputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [inputAmount, nextpool] = pool.clone().getInputAmount(amounts[i])\n        } else {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i], stablePool)\n        }\n        // const [inputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getInputAmount(amounts[i]) :\n        //   pool.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextpools[i - 1] = nextpool\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV4(new RouteV4(nextpools, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  //   this.route.pools[this.route.pools.length - 1] instanceof WeightedPair\n  //     ? computePriceImpactWeightedPair((this.route.pools[this.route.pools.length - 1] as WeightedPair).clone(), this.inputAmount, this.outputAmount)\n  //     : computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      pool.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      let pool = pools[i]\n\n      if (!pool.token0.equals(amountIn.token) && !pool.token1.equals(amountIn.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      // if( pool instanceof WeightedPair)  {console.log(\"out\": pool.getInputAmount(amountOut) }\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountOut] = (pool as Pair).getOutputAmount(amountIn)\n        } else if (pool.type === PoolType.WeightedPair) {\n          ;[amountOut] = (pool as WeightedPair).clone().getOutputAmount(amountIn)\n          // ;[amountOut] = (pool as WeightedPair).getOutputAmount(amountIn)\n          // console.log(\"out weighted\", amountOut.raw)\n          // const [amountOut1,] = ((pool).clone() as any as Pair).getOutputAmount(amountIn)\n          // console.log(\"out PAIR\", amountOut1.raw)\n        } else {\n          [amountOut] = (pool as StablePairWrapper).getOutputAmount(amountIn, stablePool)\n        }\n        // ;[amountOut] = pool instanceof Pair || pool instanceof WeightedPair ? pool.getOutputAmount(amountIn) : pool.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([...currentpools, pool], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentpools, pool],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param pools the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentpools used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      pool.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.token) && !pool.token1.equals(amountOut.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountIn] = (pool as Pair).getInputAmount(amountOut)\n        }\n        else if (pool.type === PoolType.WeightedPair) {\n          ;[amountIn] = (pool as WeightedPair).clone().getInputAmount(amountOut)\n        } else {\n          ;[amountIn] = (pool as StablePairWrapper).getInputAmount(amountOut, stablePool)\n        }\n\n\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([pool, ...currentpools], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentpools],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getRouterAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV3 } from './entities/tradeV3'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV3Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV3OptionsDeadline extends Omit<TradeV3Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV3Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV3 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV3, options: TradeV3Options | TradeV3OptionsDeadline): SwapV3Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap && (trade.route.routerIds.length === 1 && trade.route.routerIds[0] === 1)) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = []\n      for (let i = 0; i < trade.route.pathMatrix.length; i++)\n      path.push(trade.route.pathMatrix[i].map(token => token.address))\n      const routerId = trade.route.routerIds.map(id => id.toString())\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'multiSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory routerId, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapExactTokensForTokens'\n            // multiSwapExactTokensForTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountIn, uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'multiSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory routerId, uint256 amountOut, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV4 } from './entities/tradeV4'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV4Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV4OptionsDeadline extends Omit<TradeV4Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV4Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV4 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV4, options: TradeV4Options | TradeV4OptionsDeadline): SwapV4Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = trade.route.path.map(token =>token.address)\n      const pools = trade.route.pools.map(pool=>pool.getAddressForRouter())\n      \n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'onSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory pools, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapExactTokensForTokens'\n            // function onSwapExactTokensForTokens(\n            //   address[] memory pools,\n            //   address[] memory tokens,\n            //   uint256 amountIn,\n            //   uint256 amountOutMin,\n            //   address to,\n            //   uint256 deadline\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'onSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory pools, uint256 amountOut, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory pools,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory pools, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","WEIGHTED_FACTORY_ADDRESS","INIT_CODE_HASH","INIT_CODE_HASH_WEIGHTED","REQUIEM_PAIR_MANAGER","REQUIEM_WEIGHTED_PAIR_FACTORY","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","NETWORK_CCY","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","PoolType","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fromRouteV3","sources","source","type","Pair","pricingBasesIn","pricingBasesOut","fromRouteV4","pools","pool","price","StablePairWrapper","WeightedPair","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","getAddressForRouter","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","TENK","_256","_128","MIN_PRECISION","MAX_PRECISION","FIXED_1","FIXED_2","MAX_NUM","LN2_NUMERATOR","LN2_DENOMINATOR","OPT_LOG_MAX_VAL","OPT_EXP_MAX_VAL","maxExpArray","leftShift","num","shift","mul","pow","signedRightShift","power","_baseN","_baseD","_expN","_expD","gt","lt","baseLog","base","optimalLog","generalLog","baseLogTimesExp","optimalExp","findPositionInMaxExpArray","generalExp","floorLog2","_n","res","s","or","gte","count","w","sub","mod","and","isZero","_x","_precision","xi","getAmountOut","reserveIn","reserveOut","tokenWeightIn","tokenWeightOut","swapFee","amountInWithFee","eq","baseN","result","temp1","temp2","getAmountIn","baseD","baseReserveIn","weightA","fee","weights","weightOf","weight0","weight1","inputWeight","outputWeight","inIndex","outIndex","console","log","clone","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","indexA","indexB","stableIndexes","referenceMidPrices","status","stablePool","volume","outToken1","calculateSwap","toBigInt","outToken0","priceFromReserve","outToken","addBalanceValue","subtractBalanceValue","indexFromToken","wrapPairsFromPool","wrapperList","tokenBalances","j","wrapSinglePairFromPool","MAX_ITERATION","A_PRECISION","FEE_DENOMINATOR","_xp","balances","rates","_getAPrecise","blockTimestamp","swapStorage","futureATime","futureA","initialA","initialATime","_sumOf","sum","_distance","_getD","xp","amp","nCoins","Dprev","D","Ann","D_P","lte","_getY","inBalance","normalizedBalances","c","lastY","index","inAmount","tokenMultipliers","newInBalance","outBalance","outAmount","_fee","calculateSwapGivenOut","_amountOutInclFee","newOutBalance","_calculateRemoveLiquidity","currentWithdrawFee","feeAdjustedAmount","_getYD","A","yPrev","_feePerToken","_calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","expectedDx","dy","_calculateTokenAmount","deposit","newBalances","diff","SwapStorage","adminFee","lpAddress","mock","dummy","StablePool","_A","lpTotalSupply","values","ethers","constants","AddressZero","getRouterAddress","getLpAddress","keys","tokenFromIndex","getBalances","map","_","calculateSwapViaPing","provider","Contract","utils","Interface","StableSwap","swap","calculateRemoveLiquidity","amountLp","calculateRemoveLiquidityOneToken","getLiquidityAmount","userBalances","setSwapStorage","setTokenBalances","setBlockTimestamp","setLpTotalSupply","setBalanceValueByIndex","newBalance","setBalanceValue","toNumber","feeToSet","RouteV3","pathMatrix","routerIds","currentRouterId","lastRouterId","inputOutputComparatorV3","tradeComparatorV3","TradeV3","nextSources","nextSource","bestTradeExactInIteration","originalStablePool","currentSources","includes","stableTrade","sourcesExcludingThisSource","bestTradeExactOutIteration","RouteV4","inputOutputComparatorV4","tradeComparatorV4","TradeV4","nextpools","nextpool","currentpools","poolsExcludingThispool","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","getDefaultProvider","getNetwork","ERC20","then","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","StablesFetcher","fetchStablePoolData","getTokens","tokenAddresses","indexes","RouterV3","multiSwap","routerId","id","RouterV4"],"mappings":"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"}