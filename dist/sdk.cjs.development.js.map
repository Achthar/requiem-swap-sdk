{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/helperUtils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/calculators/LogExpMath.ts","../src/entities/calculators/FixedPoint.ts","../src/entities/calculators/WeightedMath.ts","../src/entities/calculators/WeightedPoolLib.ts","../src/entities/calculators/weightedPairCalc.ts","../src/entities/calculators/weightedSwapStorage.ts","../src/entities/calculators/stableSwapStorage.ts","../src/entities/pools/pool.ts","../src/entities/pools/weightedPair/amplifiedWeightedPair.ts","../src/entities/pools/weightedPool/weightedPool.ts","../src/entities/calculators/stableCalc.ts","../src/entities/pools/stable/stablePool.ts","../src/entities/pools/swapData.ts","../src/entities/pools/pairData.ts","../src/entities/bonds/bondCalculator.ts","../src/entities/bonds/fixedPoint.ts","../src/entities/bonds/bondDepository.ts","../src/entities/route.ts","../src/entities/swap.ts","../src/entities/swapRoute.ts","../src/routeProvider.ts","../src/swapRouter.ts"],"sourcesContent":["import { BigNumber } from 'ethers'\n\n// exports for external consumption\nexport type BigintIsh = BigNumber | bigint | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xFb94c4CeA93f8369Fe18C3078060605eE2B14eC3',\n}\n\nexport const WEIGHTED_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xacd3602152763C3AAFA705D8a90C36661ecD7d46',\n  42261: '0x0459e858F17ef5D927625f34602432f4fac6941e',\n  110001: '0xe092CB3124aF36a0B851839D8EC51CaaD9a3DCD0'\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x98fcd7ed545dc443aa0c7e57e5f54affba6cf755a7eadfd269143f9bf62024d8',\n}\n\nexport const INIT_CODE_HASH_WEIGHTED: { [chainId: number]: string } = {\n  43113: '0xbeec252b6527ff023d9f20fa336f9f131a002be662ce64ef7f9ed17b5ea8b591',\n  42261: '0x98fcd7ed545dc443aa0c7e57e5f54affba6cf755a7eadfd269143f9bf62024d8',\n  110001: '0x98fcd7ed545dc443aa0c7e57e5f54affba6cf755a7eadfd269143f9bf62024d8'\n}\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x0Be60C571BdA7841D8F6eE68afDBa648EC710fD7',\n  42261: '0x2a90276992ddC21C3585FE50f5B43D0Cf62aDe03',\n  110001: '0x211F00f4071A4af8f0cC289d9853d778047DB8Ba',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x3372de341a07418765ae12f77aee9029eaa4442a',\n  42261: '0x9364E91ca784ca51f88dE2a76a35Ba2665bdad04',\n  110001: '0x029f9f8e2c27627341824120ee814F31a1551256'\n}\n\nexport const MINIMUM_LIQUIDITY = BigNumber.from(1000)\n\n// exports for internal consumption\nexport const ZERO = BigNumber.from(0)\nexport const ONE = BigNumber.from(1)\nexport const TWO = BigNumber.from(2)\nexport const THREE = BigNumber.from(3)\nexport const FIVE = BigNumber.from(5)\nexport const TEN = BigNumber.from(10)\nexport const TENK = BigNumber.from(10000)\nexport const _100 = BigNumber.from(100)\nexport const FEES_NUMERATOR = BigNumber.from(9975)\nexport const FEES_DENOMINATOR = BigNumber.from(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: BigNumber.from('0xff'),\n  [SolidityType.uint256]: BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\nimport { BigNumber } from 'ethers'\n\nexport function validateSolidityTypeInstance(value: BigNumber, solidityType: SolidityType): void {\n  invariant(value.gte(ZERO), `${value} is not a ${solidityType}.`)\n  invariant(value.lte(SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): BigNumber {\n  return bigintIsh instanceof BigNumber\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? BigNumber.from(bigintIsh.toString())\n    : BigNumber.from(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: BigNumber): BigNumber {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: BigNumber = ZERO\n  let x: BigNumber\n  if (y.gt(THREE)) {\n    z = y\n    x = y.div(TWO).add(ONE)\n    while (x.lt(z)) {\n      z = x\n      x = y.div(x).add( x).div(TWO)\n    }\n  } else if (!y.eq(ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly chainId: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n    this.chainId = chainId\n  }\n}\n\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n  OASIS_TESTNET = 42261,\n  OASIS_MAINNET = 42262,\n  QUARKCHAIN_DEV_S0 = 110001,\n}\n\nexport const NETWORK_CCY: { [chainId: number]: Currency } = {\n  [ChainId.BSC_MAINNET]: new Currency(ChainId.BSC_MAINNET, 18, 'BNB', 'BNB'),\n  [ChainId.BSC_TESTNET]: new Currency(ChainId.BSC_TESTNET, 18, 'BNB', 'BNB'),\n  [ChainId.ARBITRUM_MAINNET]: new Currency(ChainId.ARBITRUM_MAINNET, 18, 'ETH', 'ETH'),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(ChainId.ARBITRUM_TETSNET_RINKEBY, 18, 'ETH', 'ETH'),\n  [ChainId.AVAX_MAINNET]: new Currency(ChainId.AVAX_MAINNET, 18, 'AVAX', 'AVAX'),\n  [ChainId.AVAX_TESTNET]: new Currency(ChainId.AVAX_TESTNET, 18, 'AVAX', 'AVAX'),\n  [ChainId.MATIC_MAINNET]: new Currency(ChainId.MATIC_MAINNET, 18, 'MATIC', 'MATIC'),\n  [ChainId.MATIC_TESTNET]: new Currency(ChainId.MATIC_TESTNET, 18, 'MATIC', 'MATIC'),\n  [ChainId.OASIS_MAINNET]: new Currency(ChainId.OASIS_MAINNET, 18, 'ROSE', 'ROSE'),\n  [ChainId.OASIS_TESTNET]: new Currency(ChainId.OASIS_TESTNET, 18, 'ROSE', 'ROSE'),\n  [ChainId.QUARKCHAIN_DEV_S0]: new Currency(ChainId.QUARKCHAIN_DEV_S0, 18, 'QKC', 'QKC')\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../helperUtils'\nimport { Currency, ChainId } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS:{[chainId:number]:Token} = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.OASIS_TESTNET]:\n  new Token( ChainId.OASIS_TESTNET,\n    '0x792296e2a15e6Ceb5f5039DecaE7A1f25b00B0B0',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n  [ChainId.OASIS_MAINNET]:\n  new Token( ChainId.OASIS_MAINNET,\n    '0xfb40cd35C0cF322fA3cfB8D67b533Bd9ad7df056',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n  [ChainId.QUARKCHAIN_DEV_S0]:\n  new Token( ChainId.OASIS_MAINNET,\n    '0x56fB4da0E246003DEc7dD108e47f5d8e8F4cC493',\n    18,\n    'wQKC',\n    'Wrapped QKC',\n    'https://docs.oasis.dev/'\n  ),\n\n}\n\n\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  42261 :[\n    new Token(ChainId.OASIS_TESTNET, '0x9aEeeD65aE87e3b28793aefAeED59c3f10ef956b', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.OASIS_TESTNET, '0xfA0D8065755Fb3b6520149e86Ac5A3Dc3ee5Dc92', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.OASIS_TESTNET, '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.OASIS_TESTNET, '0x4e8848da06E40E866b82f6b52417494936c9509b', 18, 'TUSD', 'True USD'),\n  ],\n  110001 :[\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0xE59c1Ddf4fAAC4Fa7C8c93d9392d4bBa55383268', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0x1a69a6e206c680A8559c59b951527437CBCe6Ed7', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0x51b90a5Bc99B7c76EDf3863E1d61ca6197a6e542', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.QUARKCHAIN_DEV_S0, '0xD71C821a373E16D607277DB6C1356c1209C7d866', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  },\n  42261: {\n    0: STABLECOINS[42261][0],\n    1: STABLECOINS[42261][1],\n    2: STABLECOINS[42261][2],\n    3: STABLECOINS[42261][3]\n  },\n  110001: {\n    0: STABLECOINS[110001][0],\n    1: STABLECOINS[110001][1],\n    2: STABLECOINS[110001][2],\n    3: STABLECOINS[110001][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../helperUtils'\nimport { BigNumber } from 'ethers'\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: BigNumber\n  public readonly denominator: BigNumber\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): BigNumber {\n    return this.numerator.div(this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(this.numerator.mod(this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.add(otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).add(\n        otherParsed.numerator.mul(this.denominator)\n      ),\n      this.denominator.mul(otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (this.denominator.eq(otherParsed.denominator)) {\n      return new Fraction(this.numerator.sub(otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator).sub(\n       otherParsed.numerator.mul(this.denominator)\n      ),\n      this.denominator.mul(otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return this.numerator.mul(otherParsed.denominator).lt(\n      otherParsed.numerator.mul(this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return this.numerator.mul(otherParsed.denominator).eq(\n      otherParsed.numerator.mul(this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return this.numerator.mul(otherParsed.denominator).gt(otherParsed.numerator.mul(this.denominator))\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n     this.numerator.mul(otherParsed.numerator),\n      this.denominator.mul(otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      this.numerator.mul(otherParsed.denominator),\n      this.denominator.mul(otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { _100 } from '../../constants'\nimport { Fraction, Rounding } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ChainId, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../helperUtils'\nimport { Fraction, Rounding } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, TEN.pow(currency.decimals))\n    this.currency = currency\n  }\n\n  public get raw(): BigNumber {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, this.raw.add(other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, this.raw.sub(other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, this.raw.add(other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, this.raw.sub(other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, TEN } from '../../constants'\nimport { Currency } from '../currency'\n\nimport { Fraction, Rounding } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nimport { Pool } from '../pools/pool'\nimport { Route } from '../route'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n\n  // upgraded version to include StablePairWrappers in a Route\n  // as well as weighted pairs\n  public static fromRoute(route: Route, poolDict: { [id: string]: Pool }): Price {\n    const prices: Price[] = []\n    // console.log(\"=========PATH\", route.path.map(x=>x.symbol))\n    // console.log(\"=========PATH PAIRs\", route.pairData.map(x=>[x.token0.symbol, x.token1.symbol]))\n    for (const [i, pool] of route.pairData.entries()) {\n      const price = pool.poolPrice(route.path[i], route.path[i + 1], poolDict)\n      prices.push(price)\n    }\n    // console.log(\"=========PRICE\", prices.map(p=>[p.baseCurrency.symbol, p.quoteCurrency.symbol]))\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      TEN.pow(baseCurrency.decimals),\n      TEN.pow(quoteCurrency.decimals)\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(chainId: number, currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.networkCCYAmount(chainId, super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","// SPDX-License-Identifier: MIT\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the “Software”), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n// Software.\n\n// THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { BigNumber } from '@ethersproject/bignumber'\n// import { ethers } from 'ethers'\n\n/* solhint-disable */\n\n/**\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\n *\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\n * exponentiation and logarithm (where the base is Euler's number).\n *\n * @author Fernando Martinelli - @fernandomartinelli\n * @author Sergio Yuhjtman - @sergioyuhjtman\n * @author Daniel Fernandez - @dmf7z\n */\n\n// All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n// two numbers, and multiply by ONE when dividing them.\nexport const ZERO = BigNumber.from(0)\n// All arguments and return values are 18 decimal fixed point numbers.\nexport const ONE_18 = BigNumber.from('1000000000000000000');\n\n// Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\n// case of ln36, 36 decimals.\nconst ONE_20 = BigNumber.from('100000000000000000000');\nconst ONE_36 = BigNumber.from('1000000000000000000000000000000000000');\n\n// The domain of natural exponentiation is bound by the word size and number of decimals used.\n//\n// Because internally the result will be stored using 20 decimals, the largest possible result is\n// (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n// The smallest possible result is 10^(-18), which makes largest negative argument\n// ln(10^(-18)) = -41.446531673892822312.\n// We use 130.0 and -41.0 to have some safety margin.\n// const MAX_NATURAL_EXPONENT = BigNumber.from('130000000000000000000');\n// const MIN_NATURAL_EXPONENT = BigNumber.from(-'41000000000000000000');\n\n// Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n// 256 bit integer.\nconst LN_36_LOWER_BOUND = ONE_18.sub(BigNumber.from('100000000000000000'));\nconst LN_36_UPPER_BOUND = ONE_18.add(BigNumber.from('100000000000000000'));\n\n// const MILD_EXPONENT_BOUND = ethers.constants.MaxUint256.div(ONE_20);\n\n// 18 decimal constants\nconst x0 = BigNumber.from('128000000000000000000'); // 2ˆ7\nconst a0 = BigNumber.from('38877084059945950922200000000000000000000000000000000000'); // eˆ(x0) (no decimals)\nconst x1 = BigNumber.from('64000000000000000000'); // 2ˆ6\nconst a1 = BigNumber.from('6235149080811616882910000000'); // eˆ(x1) (no decimals)\n\n// 20 decimal constants\nconst x2 = BigNumber.from('3200000000000000000000'); // 2ˆ5\nconst a2 = BigNumber.from('7896296018268069516100000000000000'); // eˆ(x2)\nconst x3 = BigNumber.from('1600000000000000000000'); // 2ˆ4\nconst a3 = BigNumber.from('888611052050787263676000000'); // eˆ(x3)\nconst x4 = BigNumber.from('800000000000000000000'); // 2ˆ3\nconst a4 = BigNumber.from('298095798704172827474000'); // eˆ(x4)\nconst x5 = BigNumber.from('400000000000000000000'); // 2ˆ2\nconst a5 = BigNumber.from('5459815003314423907810'); // eˆ(x5)\nconst x6 = BigNumber.from('200000000000000000000'); // 2ˆ1\nconst a6 = BigNumber.from('738905609893065022723'); // eˆ(x6)\nconst x7 = BigNumber.from('100000000000000000000'); // 2ˆ0\nconst a7 = BigNumber.from('271828182845904523536'); // eˆ(x7)\nconst x8 = BigNumber.from('50000000000000000000'); // 2ˆ-1\nconst a8 = BigNumber.from('164872127070012814685'); // eˆ(x8)\nconst x9 = BigNumber.from('25000000000000000000'); // 2ˆ-2\nconst a9 = BigNumber.from('128402541668774148407'); // eˆ(x9)\nconst x10 = BigNumber.from('12500000000000000000'); // 2ˆ-3\nconst a10 = BigNumber.from('113314845306682631683'); // eˆ(x10)\nconst x11 = BigNumber.from('6250000000000000000'); // 2ˆ-4\nconst a11 = BigNumber.from('106449445891785942956'); // eˆ(x11)\n\n/**\n * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\n *\n * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\n */\nexport function pow(x: BigNumber, y: BigNumber): BigNumber {\n    if (y.eq(0)) {\n        // We solve the 0^0 indetermination by making it equal one.\n        return ONE_18;\n    }\n\n    if (x.eq(0)) {\n        return ZERO;\n    }\n    let x_int256 = x;\n    let y_int256 = y\n    let logx_times_y\n    if (LN_36_LOWER_BOUND.lt(x_int256) && x_int256.lt(LN_36_UPPER_BOUND)) {\n        let ln_36_x = _ln_36(x_int256);\n\n        // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n        // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n        // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n        // (downscaled) last 18 decimals.\n        logx_times_y = (ln_36_x.div(ONE_18).mul(y_int256)).add(ln_36_x.mod(ONE_18).mul(y_int256).div(ONE_18))\n    } else {\n        logx_times_y = _ln(x_int256).mul(y_int256);\n    }\n    logx_times_y = logx_times_y.div(ONE_18);\n\n\n    return exp(logx_times_y); // that +1 differs from the original variant\n}\n\n/**\n * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\n *\n * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\n */\nexport function exp(x: BigNumber): BigNumber {\n\n    if (x.lt(ZERO)) {\n        // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n        // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n        // Fixed point division requires multiplying by ONE_18.\n        return (ONE_18.mul(ONE_18)).div(exp(x.mul(-1)));\n    }\n    // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n    // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n    // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n    // decomposition.\n    // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest x_n.\n    // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n    // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n    // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n    // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n    // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n    // decomposition.\n\n    // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n    // it and compute the accumulated product.\n\n    let firstAN;\n    if (x.gte(x0)) {\n        x = x.sub(x0);\n        firstAN = a0;\n    } else if (x.gte(x1)) {\n        x = x.sub(x1);\n        firstAN = a1;\n    } else {\n        firstAN = BigNumber.from(1); // One with no decimal places\n    }\n\n    // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n    // smaller terms.\n    x = x.mul(100);\n\n    // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n    // one. Recall that fixed point multiplication requires dividing by ONE_20.\n    let product = ONE_20;\n\n    if (x.gte(x2)) {\n        x = x.sub(x2);\n        product = product.mul(a2).div(ONE_20);\n    }\n    if (x.gte(x3)) {\n        x = x.sub(x3);\n        product = product.mul(a3).div(ONE_20);\n    }\n    if (x.gte(x4)) {\n        x = x.sub(x4);\n        product = product.mul(a4).div(ONE_20);\n    }\n    if (x.gte(x5)) {\n        x = x.sub(x5);\n        product = product.mul(a5).div(ONE_20);\n    }\n    if (x.gte(x6)) {\n        x = x.sub(x6);\n        product = product.mul(a6).div(ONE_20);\n    }\n    if (x.gte(x7)) {\n        x = x.sub(x7);\n        product = product.mul(a7).div(ONE_20);\n    }\n    if (x.gte(x8)) {\n        x = x.sub(x8);\n        product = product.mul(a8).div(ONE_20);\n    }\n    if (x.gte(x9)) {\n        x = x.sub(x9);\n        product = product.mul(a9).div(ONE_20);\n    }\n\n    // x10 and x11 are unnecessary here since we have high enough precision already.\n\n    // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n    // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n    let seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\n    let term; // Each term in the sum, where the nth term is (x^n / n!).\n\n    // The first term is simply x.\n    term = x;\n    seriesSum = seriesSum.add(term);\n\n    // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n    // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\n\n    term = term.mul(x).div(ONE_20).div(2);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(3);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(4);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(5);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(6);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(7);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(8);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(9);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(10);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(11);\n    seriesSum = seriesSum.add(term);\n\n    term = term.mul(x).div(ONE_20).div(12);\n    seriesSum = seriesSum.add(term);\n\n    // 12 Taylor terms are sufficient for 18 decimal precision.\n\n    // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n    // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n    // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\n    // and then drop two digits to return an 18 decimal value.\n\n    return ((product.mul(seriesSum)).div(ONE_20).mul(firstAN)).div(100);\n}\n\n/**\n * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\n */\nexport function log(arg: BigNumber, base: BigNumber): BigNumber {\n    // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\n\n    // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\n    // upscaling.\n\n    let logBase;\n    if (LN_36_LOWER_BOUND.lt(base) && base.lt(LN_36_UPPER_BOUND)) {\n        logBase = _ln_36(base);\n    } else {\n        logBase = _ln(base).mul(ONE_18);\n    }\n\n    let logArg;\n    if (LN_36_LOWER_BOUND.lt(arg) && arg.lt(LN_36_UPPER_BOUND)) {\n        logArg = _ln_36(arg);\n    } else {\n        logArg = _ln(arg).mul(ONE_18);\n    }\n\n    // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\n    return logArg.mul(ONE_18).div(logBase);\n}\n\n/**\n * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n */\nexport function ln(a: BigNumber): BigNumber {\n    // The real natural logarithm is not defined for negative numbers or zero.\n\n    if (LN_36_LOWER_BOUND.lt(a) && a.lt(LN_36_UPPER_BOUND)) {\n        return _ln_36(a).div(ONE_18);\n    } else {\n        return _ln(a);\n    }\n}\n\n/**\n * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n */\nexport function _ln(a: BigNumber): BigNumber {\n    if (a.lt(ONE_18)) {\n        // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n        // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\n        // Fixed point division requires multiplying by ONE_18.\n        return (_ln((ONE_18.mul(ONE_18)).div(a))).mul(-1);\n    }\n\n    // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n    // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n    // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n    // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n    // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\n    // decomposition, which will be lower than the smallest a_n.\n    // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n    // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n    // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n    // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n    // ONE_18 to convert them to fixed point.\n    // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n    // by it and compute the accumulated sum.\n\n    let sum = ZERO;\n    if (a.gte(a0.mul(ONE_18))) {\n        a = a.div(a0); // Integer, not fixed point division\n        sum = sum.add(x0);\n    }\n\n    if (a.gte(a1.mul(ONE_18))) {\n        a = a.div(a1); // Integer, not fixed point division\n        sum = sum.add(x1);\n    }\n\n    // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\n    sum = sum.mul(100);\n    a = a.mul(100);\n\n    // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n    if (a.gte(a2)) {\n        a = a.mul(ONE_20).div(a2);\n        sum = sum.add(x2);\n    }\n\n    if (a.gte(a3)) {\n        a = a.mul(ONE_20).div(a3);\n        sum = sum.add(x3);\n    }\n\n    if (a.gte(a4)) {\n        a = a.mul(ONE_20).div(a4);\n        sum = sum.add(x4);\n    }\n\n    if (a.gte(a5)) {\n        a = a.mul(ONE_20).div(a5);\n        sum = sum.add(x5);\n    }\n\n    if (a.gte(a6)) {\n        a = a.mul(ONE_20).div(a6);\n        sum = sum.add(x6);\n    }\n\n    if (a.gte(a7)) {\n        a = a.mul(ONE_20).div(a7);\n        sum = sum.add(x7);\n    }\n\n    if (a.gte(a8)) {\n        a = a.mul(ONE_20).div(a8);\n        sum = sum.add(x8);\n    }\n\n    if (a.gte(a9)) {\n        a = a.mul(ONE_20).div(a9);\n        sum = sum.add(x9);\n    }\n\n    if (a.gte(a10)) {\n        a = a.mul(ONE_20).div(a10);\n        sum = sum.add(x10);\n    }\n\n    if (a.gte(a11)) {\n        a = a.mul(ONE_20).div(a11);\n        sum = sum.add(x11);\n    }\n\n    // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n    // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n    // Let z = (a - 1) / (a + 1).\n    // ln(a) =2.mul((z + z^.div( 3) + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n    // division by ONE_20.\n    let z = ((a.sub(ONE_20)).mul(ONE_20)).div(a.add(ONE_20));\n    let z_squared = (z.mul(z)).div(ONE_20);\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(3));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(5));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(7));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(9));\n\n    num = num.mul(z_squared).div(ONE_20);\n    seriesSum = seriesSum.add(num.div(11));\n\n    // 6 Taylor terms are sufficient for 36 decimal precision.\n\n    // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n    seriesSum = seriesSum.mul(2);\n\n    // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n    // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n    // value.\n\n    return sum.add(seriesSum).div(100);\n}\n\n/**\n * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\n * for x close to one.\n *\n * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\n */\nexport function _ln_36(x: BigNumber): BigNumber {\n    // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n    // worthwhile.\n\n    // First, we transform x to a 36 digit fixed point value.\n    x = x.mul(ONE_18);\n\n    // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n    // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n    // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n    // division by ONE_36.\n    let z = x.sub(ONE_36).mul(ONE_36).div(x.add(ONE_36));\n    let z_squared = z.mul(z).div(ONE_36);\n\n    // num is the numerator of the series: the z^(2 * n + 1) term\n    let num = z;\n\n    // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n    let seriesSum = num;\n\n    // In each step, the numerator is multiplied by z^2\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(3));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(5));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(7));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(9));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(11));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(13));\n\n    num = num.mul(z_squared).div(ONE_36);\n    seriesSum = seriesSum.add(num.div(15));\n\n    // 8 Taylor terms are sufficient for 36 decimal precision.\n\n    // All that remains is multiplying by 2 (non fixed point).\n    return seriesSum.mul(2);\n}\n\n","\n// import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\n\nimport { pow, ZERO, ONE_18 } from \"./LogExpMath\";\n\nexport const ONE = ONE_18\n/* solhint-disable private-vars-leading-underscore */\n\n// const ONE = BigNumber.from(1e18); // 18 decimal places\nconst MAX_POW_RELATIVE_ERROR = BigNumber.from(10000); // 10^(-14)\n\n// Minimum base for the power function when the exponent is 'free' (larger than ONE).\nexport const MIN_POW_BASE_FREE_EXPONENT = BigNumber.from('700000000000000000');\n\n\nexport function mulDown(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n\n    return product.div(ONE);\n}\n\nexport function mulUp(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n\n    if (product.eq(0)) {\n        return BigNumber.from(0);\n    } else {\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for.\n\n        return (product.sub(1).div(ONE)).add(1);\n    }\n}\n\nexport function divDown(a: BigNumber, b: BigNumber): BigNumber {\n\n    if (a.eq(ZERO)) {\n        return ZERO;\n    } else {\n        let aInflated = a.mul(ONE);\n        return aInflated.div(b);\n    }\n}\n\nexport function divUp(a: BigNumber, b: BigNumber): BigNumber {\n\n    if (a.eq(ZERO)) {\n        return ZERO;\n    } else {\n        let aInflated = a.mul(ONE);\n\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, which we already tested for.\n\n        return aInflated.sub(1).div(b).add(1);\n    }\n}\n\n/**\n * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\n * the true value (that is, the error function expected - actual is always positive).\n */\nexport function powDown(x: BigNumber, y: BigNumber): BigNumber {\n    let raw = pow(x, y);\n    let maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR).add(1);\n\n    if (raw.lt(maxError)) {\n        return ZERO;\n    } else {\n        return raw.sub(maxError);\n    }\n}\n\n/**\n * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\n * the true value (that is, the error function expected - actual is always negative).\n */\nexport function powUp(x: BigNumber, y: BigNumber): BigNumber {\n    const raw = pow(x, y);\n    const maxError = mulUp(raw, MAX_POW_RELATIVE_ERROR).add(1);\n\n    return raw.add(maxError);\n}\n\n/**\n * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\n *\n * Useful when computing the complement for values with some level of relative error, as it strips this error and\n * prevents intermediate negative values.\n */\nexport function complement(x: BigNumber): BigNumber {\n    return x.lt(ONE) ? ONE.sub(x) : ZERO;\n}\n\n\n/**\n * @dev Returns the largest of two numbers of 256 bits.\n */\nexport function max(a: BigNumber, b: BigNumber): BigNumber {\n    return a.gte(b) ? a : b;\n}\n\n/**\n * @dev Returns the smallest of two numbers of 256 bits.\n */\nexport function min(a: BigNumber, b: BigNumber): BigNumber {\n    return a.lt(b) ? a : b;\n}\n\n","\nimport { BigNumber } from '@ethersproject/bignumber'\nimport invariant from 'tiny-invariant'\nimport { mulDown, powUp, powDown, divUp, divDown, complement, ONE, mulUp, max, MIN_POW_BASE_FREE_EXPONENT } from './FixedPoint'\nimport { ZERO } from './LogExpMath';\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n// These functions start with an underscore, as if they were part of a contract and not a library. At some point this\n// should be fixed.\n// solhint-disable private-vars-leading-underscore\n\n\n\n// A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\n// implementation of the power function, as these ratios are often exponents.\n// const _MIN_WEIGHT = BigNumber.from(0.01e18);\n// Having a minimum normalized weight imposes a limit on the maximum number of tokens;\n// i.e., the largest possible pool is one where all tokens have exactly the minimum weight.\n// const _MAX_WEIGHTED_TOKENS = BigNumber.from(100);\n\n// Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\n// ratio).\n\n// Swap limits: amounts swapped may not be larger than this percentage of total balance.\nconst _MAX_IN_RATIO = BigNumber.from('300000000000000000'); //0.3e18\nconst _MAX_OUT_RATIO = BigNumber.from('300000000000000000'); //0.3e18\n\n// Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\nconst _MAX_INVARIANT_RATIO = BigNumber.from('3000000000000000000'); //3e18\n// Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\nconst _MIN_INVARIANT_RATIO = BigNumber.from('700000000000000000'); //0.7e18\n\n// About swap fees on joins and exits:\n// Any join or exit that is not perfectly balanced (e.g. all single token joins or exits) is mathematically\n// equivalent to a perfectly balanced join or  exit followed by a series of swaps. Since these swaps would charge\n// swap fees, it follows that (some) joins and exits should as well.\n// On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\n// is the one to which swap fees are applied.\n\n// Invariant is used to collect protocol swap fees by comparing its value between two times.\n// So we can round always to the same direction. It is also used to initiate the BPT amount\n// and, because there is a minimum BPT, we round down the invariant.\nexport function _calculateInvariant(normalizedWeights: BigNumber[], balances: BigNumber[]): BigNumber {\n    /**********************************************************************************************\n    // invariant               _____                                                             //\n    // wi = weight index i      | |      wi                                                      //\n    // bi = balance index i     | |  bi ^   = i                                                  //\n    // i = invariant                                                                             //\n    **********************************************************************************************/\n\n    let _invariant = ONE;\n    for (let i = 0; i < normalizedWeights.length; i++) {\n        _invariant = mulDown(_invariant, powUp(balances[i], normalizedWeights[i]));\n    }\n\n    invariant(_invariant.gt(0), \"ZERO_INVARIANT\");\n\n    return _invariant\n}\n\n\n\n// Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\n// current balances and weights.\nexport function _calcOutGivenIn(\n    balanceIn: BigNumber,\n    weightIn: BigNumber,\n    balanceOut: BigNumber,\n    weightOut: BigNumber,\n    amountIn: BigNumber\n): BigNumber {\n    /**********************************************************************************************\n    // outGivenIn                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /      /            bI             \\    (wI / wO) \\           //\n    // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\n    // wI = weightIn               \\      \\       ( bI + aI )         /              /           //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // Amount out, so we round down overall.\n\n    // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\n    // Because bI / (bI + aI) <= 1, the exponent rounds down.\n\n    // Cannot exceed maximum in ratio\n    invariant(amountIn.lte(mulDown(balanceIn, _MAX_IN_RATIO)), \"MAX_IN_RATIO\");\n\n    const denominator = balanceIn.add(amountIn);\n    const base = divUp(balanceIn, denominator);\n    const exponent = divDown(weightIn, weightOut);\n    const power = powUp(base, exponent);\n\n    return mulDown(balanceOut, complement(power));\n}\n\n// Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\n// current balances and weights.\nexport function _calcInGivenOut(\n    balanceIn: BigNumber,\n    weightIn: BigNumber,\n    balanceOut: BigNumber,\n    weightOut: BigNumber,\n    amountOut: BigNumber\n): BigNumber {\n    /**********************************************************************************************\n    // inGivenOut                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /  /            bO             \\    (wO / wI)      \\          //\n    // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\n    // wI = weightIn               \\  \\       ( bO - aO )         /                   /          //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // Amount in, so we round up overall.\n\n    // The multiplication rounds up, and the power rounds up (so the base rounds up too).\n    // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\n\n    // Cannot exceed maximum out ratio\n    invariant(amountOut.lte(mulDown(balanceOut, _MAX_OUT_RATIO)), \"MAX_OUT_RATIO\");\n\n    const base = divUp(balanceOut, balanceOut.sub(amountOut));\n    const exponent = divUp(weightOut, weightIn);\n    const power = powUp(base, exponent);\n\n    // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\n    // the following subtraction should never revert.\n    const ratio = power.sub(ONE);\n\n    return mulUp(balanceIn, ratio);\n}\n\nexport function _calcLpOutGivenExactTokensIn(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsIn: BigNumber[],\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { lpOut: BigNumber, swapFees: BigNumber[] } {\n    // BPT out, so we round down overall.\n\n    let balanceRatiosWithFee = [];\n\n    let invariantRatioWithFees = ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithFee.push(divDown(balances[i].add(amountsIn[i]), balances[i]));\n        invariantRatioWithFees = invariantRatioWithFees.add(mulDown(balanceRatiosWithFee[i], normalizedWeights[i]));\n    }\n\n    const { invariantRatio, swapFees } = _computeJoinExactTokensInInvariantRatio(\n        balances,\n        normalizedWeights,\n        amountsIn,\n        balanceRatiosWithFee,\n        invariantRatioWithFees,\n        swapFeePercentage\n    );\n\n    const lpOut = invariantRatio.gt(ONE) ? mulDown(lpTotalSupply, invariantRatio.sub(ONE)) : ZERO;\n    return { lpOut, swapFees };\n}\n\n/**\n * @dev Intermediate function to avoid stack-too-deep \"\n */\nexport function _computeJoinExactTokensInInvariantRatio(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsIn: BigNumber[],\n    balanceRatiosWithFee: BigNumber[],\n    invariantRatioWithFees: BigNumber,\n    swapFeePercentage: BigNumber\n): { invariantRatio: BigNumber, swapFees: BigNumber[] } {\n    // Swap fees are charged on all tokens that are being added in a larger proportion than the overall invariant\n    // increase.\n    let swapFees = [];\n    let invariantRatio = ONE;\n\n    for (let i = 0; i < balances.length; i++) {\n        let amountInWithoutFee;\n\n        if (balanceRatiosWithFee[i].gt(invariantRatioWithFees)) {\n            const nonTaxableAmount = mulDown(balances[i], invariantRatioWithFees.sub(ONE));\n            const taxableAmount = amountsIn[i].sub(nonTaxableAmount);\n            const swapFee = mulUp(taxableAmount, swapFeePercentage);\n\n            amountInWithoutFee = nonTaxableAmount.add(taxableAmount.sub(swapFee));\n            swapFees[i] = swapFee;\n        } else {\n            amountInWithoutFee = amountsIn[i];\n        }\n\n        const balanceRatio = divDown(balances[i].add(amountInWithoutFee), balances[i]);\n\n        invariantRatio = mulDown(invariantRatio, powDown(balanceRatio, normalizedWeights[i]));\n    }\n\n    return { invariantRatio, swapFees }\n}\n\nexport function _calcTokenInGivenExactLpOut(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    lpAmountOut: BigNumber,\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { amountIn: BigNumber, swapFee: BigNumber } {\n    /******************************************************************************************\n    // tokenInForExactLpOut                                                                 //\n    // a = amountIn                                                                          //\n    // b = balance                      /  /    totalBPT + LpOut      \\    (1 / w)       \\  //\n    // LpOut = lpAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\n    // lp = totalBPT                   \\  \\       totalBPT            /                  /  //\n    // w = weight                                                                            //\n    ******************************************************************************************/\n\n    // Token in, so we round up overall.\n\n    // Calculate the factor by which the invariant will increase after minting BPTAmountOut\n    const invariantRatio = divUp(lpTotalSupply.add(lpAmountOut), lpTotalSupply);\n    invariant(invariantRatio.lte(_MAX_INVARIANT_RATIO), \"MAX_OUT_LP\");\n\n    // Calculate by how much the token balance has to increase to match the invariantRatio\n    const balanceRatio = powUp(invariantRatio, divUp(ONE, normalizedWeight));\n\n    const amountInWithoutFee = mulUp(balance, balanceRatio.sub(ONE));\n\n    // We can now compute how much extra balance is being deposited and used in virtual swaps, and charge swap fees\n    // accordingly.\n    const taxablePercentage = complement(normalizedWeight);\n    const taxableAmount = mulUp(amountInWithoutFee, taxablePercentage);\n    const nonTaxableAmount = amountInWithoutFee.sub(taxableAmount);\n\n    const taxableAmountPlusFees = divUp(taxableAmount, ONE.sub(swapFeePercentage));\n\n    return {\n        swapFee: taxableAmountPlusFees.sub(taxableAmount),\n        amountIn: nonTaxableAmount.add(taxableAmountPlusFees)\n    }\n}\n\nexport function _calcAllTokensInGivenExactLpOut(\n    balances: BigNumber[],\n    lpAmountOut: BigNumber,\n    totalBPT: BigNumber\n): BigNumber[] {\n    /************************************************************************************\n    // tokensInForExactLpOut                                                          //\n    // (per token)                                                                     //\n    // aI = amountIn                   /   LpOut   \\                                  //\n    // b = balance           aI = b * | ------------ |                                 //\n    // LpOut = lpAmountOut           \\  totalBPT  /                                  //\n    // lp = totalBPT                                                                  //\n    ************************************************************************************/\n\n    // Tokens in, so we round up overall.\n    const lpRatio = divUp(lpAmountOut, totalBPT);\n\n    let amountsIn = [];\n    for (let i = 0; i < balances.length; i++) {\n        amountsIn.push(mulUp(balances[i], lpRatio));\n    }\n\n    return amountsIn;\n}\n\nexport function _calcLpInGivenExactTokensOut(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsOut: BigNumber[],\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { lpIn: BigNumber, swapFees: BigNumber[] } {\n    // BPT in, so we round up overall.\n\n    let balanceRatiosWithoutFee = Array(balances.length);\n    let invariantRatioWithoutFees = ZERO;\n    for (let i = 0; i < balances.length; i++) {\n        balanceRatiosWithoutFee[i] = divUp(balances[i].sub(amountsOut[i]), balances[i]);\n        invariantRatioWithoutFees = invariantRatioWithoutFees.add(mulUp(balanceRatiosWithoutFee[i], normalizedWeights[i]));\n    }\n\n    const { invariantRatio, swapFees } = _computeExitExactTokensOutInvariantRatio(\n        balances,\n        normalizedWeights,\n        amountsOut,\n        balanceRatiosWithoutFee,\n        invariantRatioWithoutFees,\n        swapFeePercentage\n    );\n\n    const lpIn = mulUp(lpTotalSupply, complement(invariantRatio));\n    return { lpIn, swapFees };\n}\n\n/**\n * @dev Intermediate function to avoid stack-too-deep \"\n */\nexport function _computeExitExactTokensOutInvariantRatio(\n    balances: BigNumber[],\n    normalizedWeights: BigNumber[],\n    amountsOut: BigNumber[],\n    balanceRatiosWithoutFee: BigNumber[],\n    invariantRatioWithoutFees: BigNumber,\n    swapFeePercentage: BigNumber\n): { invariantRatio: BigNumber, swapFees: BigNumber[] } {\n    let swapFees = Array(balances.length);\n    let invariantRatio = ONE;\n\n    for (let i = 0; i < balances.length; i++) {\n        // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it to\n        // 'token out'. This results in slightly larger price impact.\n\n        let amountOutWithFee;\n        if (invariantRatioWithoutFees.gt(balanceRatiosWithoutFee[i])) {\n            const nonTaxableAmount = mulDown(balances[i], complement(invariantRatioWithoutFees));\n            const taxableAmount = amountsOut[i].sub(nonTaxableAmount);\n            const taxableAmountPlusFees = divUp(taxableAmount, ONE.sub(swapFeePercentage));\n\n            swapFees[i] = taxableAmountPlusFees.sub(taxableAmount);\n            amountOutWithFee = nonTaxableAmount.add(taxableAmountPlusFees);\n        } else {\n            amountOutWithFee = amountsOut[i];\n        }\n\n        const balanceRatio = divDown(balances[i].sub(amountOutWithFee), balances[i]);\n\n        invariantRatio = mulDown(invariantRatio, powDown(balanceRatio, normalizedWeights[i]));\n    }\n\n    return { invariantRatio, swapFees }\n}\n\nexport function _calcTokenOutGivenExactLpIn(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    lpAmountIn: BigNumber,\n    lpTotalSupply: BigNumber,\n    swapFeePercentage: BigNumber\n): { amountOut: BigNumber, swapFee: BigNumber } {\n    /*****************************************************************************************\n    // exactBPTInForTokenOut                                                                //\n    // a = amountOut                                                                        //\n    // b = balance                     /      /    totalBPT - lpIn       \\    (1 / w)  \\   //\n    // lpIn = lpAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\n    // lp = totalBPT                  \\      \\       totalBPT            /             /   //\n    // w = weight                                                                           //\n    *****************************************************************************************/\n\n    // Token out, so we round down overall. The multiplication rounds down, but the power rounds up (so the base\n    // rounds up). Because (totalBPT - lpIn) / totalBPT <= 1, the exponent rounds down.\n\n    // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\n    const invariantRatio = divUp(lpTotalSupply.sub(lpAmountIn), lpTotalSupply);\n    invariant(invariantRatio >= _MIN_INVARIANT_RATIO, \"MIN_LP_IN\");\n\n    // Calculate by how much the token balance has to decrease to match invariantRatio\n    const balanceRatio = powUp(invariantRatio, divDown(ONE, normalizedWeight));\n\n    // Because of rounding up, balanceRatio can be greater than one. Using complement prevents reverts.\n    const amountOutWithoutFee = mulDown(balance, complement(balanceRatio));\n\n    // We can now compute how much excess balance is being withdrawn as a result of the virtual swaps, which result\n    // in swap fees.\n    const taxablePercentage = complement(normalizedWeight);\n\n    // Swap fees are typically charged on 'token in', but there is no 'token in' here, so we apply it\n    // to 'token out'. This results in slightly larger price impact. Fees are rounded up.\n    const taxableAmount = mulUp(amountOutWithoutFee, taxablePercentage);\n    const nonTaxableAmount = amountOutWithoutFee.sub(taxableAmount);\n\n    const swapFee = mulUp(taxableAmount, swapFeePercentage)\n    return {\n        swapFee,\n        amountOut: nonTaxableAmount.add(taxableAmount.sub(swapFee))\n    }\n}\n\nexport function _calcTokensOutGivenExactLpIn(\n    balances: BigNumber[],\n    lpAmountIn: BigNumber,\n    totalBPT: BigNumber\n): BigNumber[] {\n    /**********************************************************************************************\n    // exactBPTInForTokensOut                                                                    //\n    // (per token)                                                                               //\n    // aO = amountOut                  /        lpIn         \\                                  //\n    // b = balance           a0 = b * | ---------------------  |                                 //\n    // lpIn = lpAmountIn             \\       totalBPT       /                                  //\n    // lp = totalBPT                                                                            //\n    **********************************************************************************************/\n\n    // Since we're computing an amount out, we round down overall. This means rounding down on both the\n    // multiplication and division.\n\n    const lpRatio = divDown(lpAmountIn, totalBPT);\n\n    let amountsOut = [];\n    for (let i = 0; i < balances.length; i++) {\n        amountsOut.push(mulDown(balances[i], lpRatio));\n    }\n\n    return amountsOut;\n}\n\nexport function _calcDueTokenProtocolSwapFeeAmount(\n    balance: BigNumber,\n    normalizedWeight: BigNumber,\n    previousInvariant: BigNumber,\n    currentInvariant: BigNumber,\n    protocolSwapFeePercentage: BigNumber\n): BigNumber {\n    /*********************************************************************************\n    /*  protocolSwapFeePercentage * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\n    *********************************************************************************/\n\n    if (currentInvariant.lte(previousInvariant)) {\n        // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\n        // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\n        return ZERO;\n    }\n\n    // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\n    // fees to the Vault.\n\n    // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\n    // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\n\n    let base = divUp(previousInvariant, currentInvariant);\n    const exponent = divDown(ONE, normalizedWeight);\n\n    // Because the exponent is larger than one, the base of the power function has a lower bound. We cap to this\n    // value to avoid numeric issues, which means in the extreme case (where the invariant growth is larger than\n    // 1 / min exponent) the Pool will pay less in protocol fees than it should.\n    base = max(base, MIN_POW_BASE_FREE_EXPONENT);\n\n    const power = powUp(base, exponent);\n\n    const tokenAccruedFees = mulDown(balance, complement(power));\n    return mulDown(tokenAccruedFees, protocolSwapFeePercentage);\n}\n\n","// SPDX-License-Identifier: MIT\n\nimport { WeightedSwapStorage } from \"./weightedSwapStorage\";\n\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { _calcAllTokensInGivenExactLpOut, _calcInGivenOut, _calcLpInGivenExactTokensOut, _calcLpOutGivenExactTokensIn, _calcOutGivenIn, _calcTokenOutGivenExactLpIn } from \"./WeightedMath\";\nimport { ONE_18, ZERO } from \"./LogExpMath\";\n\nconst FEE_DENOMINATOR = ONE_18\n\nexport function calculateRemoveLiquidityOneTokenExactIn(\n    self: WeightedSwapStorage,\n    outIndex: number,\n    lpAmount: BigNumber,\n    lpSupply:BigNumber,\n    tokenBalances: BigNumber[]\n): { amountOut: BigNumber, swapFee: BigNumber } {\n    return _calcTokenOutGivenExactLpIn(\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]),\n        self.normalizedWeights[outIndex],\n        lpAmount,\n        lpSupply,\n        self.fee\n    );\n}\n\nexport function calculateRemoveLiquidityExactIn(\n    self: WeightedSwapStorage,\n    lpAmount: BigNumber,\n    lpSupply:BigNumber,\n     tokenBalances: BigNumber[]\n): BigNumber[] {\n\n    return _calcAllTokensInGivenExactLpOut(\n        _xp(tokenBalances, self.tokenMultipliers),\n        lpAmount,\n        lpSupply\n    );\n}\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n */\nexport function calculateTokenAmount(\n    self: WeightedSwapStorage,\n    amounts: BigNumber[],\n    lpSupply:BigNumber,\n    deposit: boolean,\n    tokenBalances: BigNumber[]\n): BigNumber {\n    let lpTokenAmount = ZERO\n    if (deposit) {\n        const { lpOut } = _calcLpOutGivenExactTokensIn(\n            _xp(tokenBalances, self.tokenMultipliers),\n            self.normalizedWeights,\n            _xp(amounts, self.tokenMultipliers),\n            lpSupply,\n            self.fee\n        );\n        lpTokenAmount = lpOut\n    } else {\n        const { lpIn } = _calcLpInGivenExactTokensOut(\n            _xp(tokenBalances, self.tokenMultipliers),\n            self.normalizedWeights,\n            _xp(amounts, self.tokenMultipliers),\n            lpSupply,\n            self.fee\n        );\n        lpTokenAmount = lpIn\n    }\n\n    return lpTokenAmount\n}\n\nexport function calculateSwapGivenIn(self: WeightedSwapStorage, inIndex: number, outIndex: number, amountIn: BigNumber, tokenBalances: BigNumber[]): BigNumber {\n    // use in amount with fee alredy deducted\n    const amountInWithFee = amountIn.mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR.sub(self.fee));\n\n    // calculate out amount\n    let amountOut = _calcOutGivenIn(\n        tokenBalances[inIndex].mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[inIndex],\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[outIndex],\n        amountInWithFee\n    );\n\n    // downscale out amount\n    return amountOut.div(FEE_DENOMINATOR).div(self.tokenMultipliers[outIndex]);\n\n}\n\n\nexport function calculateSwapGivenOut(self: WeightedSwapStorage, inIndex: number, outIndex: number, amountOut: BigNumber,tokenBalances: BigNumber[]): BigNumber {\n    // calculate in amount with upscaled balances\n    const amountIn = _calcInGivenOut(\n        tokenBalances[inIndex].mul(self.tokenMultipliers[inIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[inIndex],\n        tokenBalances[outIndex].mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR),\n        self.normalizedWeights[outIndex],\n        amountOut.mul(self.tokenMultipliers[outIndex]).mul(FEE_DENOMINATOR)\n    );\n    // adjust for fee and scale down - rounding up\n    return amountIn.div(FEE_DENOMINATOR.sub(self.fee)).div(self.tokenMultipliers[inIndex]).add(1);\n}\n\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst ZERO = BigNumber.from(0)\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\nconst TENK = BigNumber.from(10000)\nconst _256 = BigNumber.from('256')\nconst _128 = BigNumber.from('128')\nconst MIN_PRECISION = 32;\nconst MAX_PRECISION = 127;\n\nconst FIXED_1 = BigNumber.from('0x080000000000000000000000000000000')\nconst FIXED_2 = BigNumber.from('0x100000000000000000000000000000000')\nconst MAX_NUM = BigNumber.from('0x200000000000000000000000000000000')\n\nconst LN2_NUMERATOR = BigNumber.from('0x3f80fe03f80fe03f80fe03f80fe03f8')\nconst LN2_DENOMINATOR = BigNumber.from('0x5b9de1d10bf4103d647b0955897ba80')\n\nconst OPT_LOG_MAX_VAL = BigNumber.from('0x15bf0a8b1457695355fb8ac404e7a79e3')\nconst OPT_EXP_MAX_VAL = BigNumber.from('0x800000000000000000000000000000000')\n\n// const LAMBERT_CONV_RADIUS = BigNumber.from('0x002f16ac6c59de6f8d5d6f63c1482a7c86')\n// const LAMBERT_POS2_SAMPLE = BigNumber.from('0x0003060c183060c183060c183060c18306')\n// const LAMBERT_POS2_MAXVAL = BigNumber.from('0x01af16ac6c59de6f8d5d6f63c1482a7c80')\n// const LAMBERT_POS3_MAXVAL = BigNumber.from('0x6b22d43e72c326539cceeef8bb48f255ff')\n\n// const MAX_UNF_WEIGHT = BigNumber.from('0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9')\n\nconst maxExpArray = new Array<BigNumber>(128)\nmaxExpArray[32] = BigNumber.from('0x1c35fedd14ffffffffffffffffffffffff')\nmaxExpArray[33] = BigNumber.from('0x1b0ce43b323fffffffffffffffffffffff')\nmaxExpArray[34] = BigNumber.from('0x19f0028ec1ffffffffffffffffffffffff')\nmaxExpArray[35] = BigNumber.from('0x18ded91f0e7fffffffffffffffffffffff')\nmaxExpArray[36] = BigNumber.from('0x17d8ec7f0417ffffffffffffffffffffff')\nmaxExpArray[37] = BigNumber.from('0x16ddc6556cdbffffffffffffffffffffff')\nmaxExpArray[38] = BigNumber.from('0x15ecf52776a1ffffffffffffffffffffff')\nmaxExpArray[39] = BigNumber.from('0x15060c256cb2ffffffffffffffffffffff')\nmaxExpArray[40] = BigNumber.from('0x1428a2f98d72ffffffffffffffffffffff')\nmaxExpArray[41] = BigNumber.from('0x13545598e5c23fffffffffffffffffffff')\nmaxExpArray[42] = BigNumber.from('0x1288c4161ce1dfffffffffffffffffffff')\nmaxExpArray[43] = BigNumber.from('0x11c592761c666fffffffffffffffffffff')\nmaxExpArray[44] = BigNumber.from('0x110a688680a757ffffffffffffffffffff')\nmaxExpArray[45] = BigNumber.from('0x1056f1b5bedf77ffffffffffffffffffff')\nmaxExpArray[46] = BigNumber.from('0x0faadceceeff8bffffffffffffffffffff')\nmaxExpArray[47] = BigNumber.from('0x0f05dc6b27edadffffffffffffffffffff')\nmaxExpArray[48] = BigNumber.from('0x0e67a5a25da4107fffffffffffffffffff')\nmaxExpArray[49] = BigNumber.from('0x0dcff115b14eedffffffffffffffffffff')\nmaxExpArray[50] = BigNumber.from('0x0d3e7a392431239fffffffffffffffffff')\nmaxExpArray[51] = BigNumber.from('0x0cb2ff529eb71e4fffffffffffffffffff')\nmaxExpArray[52] = BigNumber.from('0x0c2d415c3db974afffffffffffffffffff')\nmaxExpArray[53] = BigNumber.from('0x0bad03e7d883f69bffffffffffffffffff')\nmaxExpArray[54] = BigNumber.from('0x0b320d03b2c343d5ffffffffffffffffff')\nmaxExpArray[55] = BigNumber.from('0x0abc25204e02828dffffffffffffffffff')\nmaxExpArray[56] = BigNumber.from('0x0a4b16f74ee4bb207fffffffffffffffff')\nmaxExpArray[57] = BigNumber.from('0x09deaf736ac1f569ffffffffffffffffff')\nmaxExpArray[58] = BigNumber.from('0x0976bd9952c7aa957fffffffffffffffff')\nmaxExpArray[59] = BigNumber.from('0x09131271922eaa606fffffffffffffffff')\nmaxExpArray[60] = BigNumber.from('0x08b380f3558668c46fffffffffffffffff')\nmaxExpArray[61] = BigNumber.from('0x0857ddf0117efa215bffffffffffffffff')\nmaxExpArray[62] = BigNumber.from('0x07ffffffffffffffffffffffffffffffff')\nmaxExpArray[63] = BigNumber.from('0x07abbf6f6abb9d087fffffffffffffffff')\nmaxExpArray[64] = BigNumber.from('0x075af62cbac95f7dfa7fffffffffffffff')\nmaxExpArray[65] = BigNumber.from('0x070d7fb7452e187ac13fffffffffffffff')\nmaxExpArray[66] = BigNumber.from('0x06c3390ecc8af379295fffffffffffffff')\nmaxExpArray[67] = BigNumber.from('0x067c00a3b07ffc01fd6fffffffffffffff')\nmaxExpArray[68] = BigNumber.from('0x0637b647c39cbb9d3d27ffffffffffffff')\nmaxExpArray[69] = BigNumber.from('0x05f63b1fc104dbd39587ffffffffffffff')\nmaxExpArray[70] = BigNumber.from('0x05b771955b36e12f7235ffffffffffffff')\nmaxExpArray[71] = BigNumber.from('0x057b3d49dda84556d6f6ffffffffffffff')\nmaxExpArray[72] = BigNumber.from('0x054183095b2c8ececf30ffffffffffffff')\nmaxExpArray[73] = BigNumber.from('0x050a28be635ca2b888f77fffffffffffff')\nmaxExpArray[74] = BigNumber.from('0x04d5156639708c9db33c3fffffffffffff')\nmaxExpArray[75] = BigNumber.from('0x04a23105873875bd52dfdfffffffffffff')\nmaxExpArray[76] = BigNumber.from('0x0471649d87199aa990756fffffffffffff')\nmaxExpArray[77] = BigNumber.from('0x04429a21a029d4c1457cfbffffffffffff')\nmaxExpArray[78] = BigNumber.from('0x0415bc6d6fb7dd71af2cb3ffffffffffff')\nmaxExpArray[79] = BigNumber.from('0x03eab73b3bbfe282243ce1ffffffffffff')\nmaxExpArray[80] = BigNumber.from('0x03c1771ac9fb6b4c18e229ffffffffffff')\nmaxExpArray[81] = BigNumber.from('0x0399e96897690418f785257fffffffffff')\nmaxExpArray[82] = BigNumber.from('0x0373fc456c53bb779bf0ea9fffffffffff')\nmaxExpArray[83] = BigNumber.from('0x034f9e8e490c48e67e6ab8bfffffffffff')\nmaxExpArray[84] = BigNumber.from('0x032cbfd4a7adc790560b3337ffffffffff')\nmaxExpArray[85] = BigNumber.from('0x030b50570f6e5d2acca94613ffffffffff')\nmaxExpArray[86] = BigNumber.from('0x02eb40f9f620fda6b56c2861ffffffffff')\nmaxExpArray[87] = BigNumber.from('0x02cc8340ecb0d0f520a6af58ffffffffff')\nmaxExpArray[88] = BigNumber.from('0x02af09481380a0a35cf1ba02ffffffffff')\nmaxExpArray[89] = BigNumber.from('0x0292c5bdd3b92ec810287b1b3fffffffff')\nmaxExpArray[90] = BigNumber.from('0x0277abdcdab07d5a77ac6d6b9fffffffff')\nmaxExpArray[91] = BigNumber.from('0x025daf6654b1eaa55fd64df5efffffffff')\nmaxExpArray[92] = BigNumber.from('0x0244c49c648baa98192dce88b7ffffffff')\nmaxExpArray[93] = BigNumber.from('0x022ce03cd5619a311b2471268bffffffff')\nmaxExpArray[94] = BigNumber.from('0x0215f77c045fbe885654a44a0fffffffff')\nmaxExpArray[95] = BigNumber.from('0x01ffffffffffffffffffffffffffffffff')\nmaxExpArray[96] = BigNumber.from('0x01eaefdbdaaee7421fc4d3ede5ffffffff')\nmaxExpArray[97] = BigNumber.from('0x01d6bd8b2eb257df7e8ca57b09bfffffff')\nmaxExpArray[98] = BigNumber.from('0x01c35fedd14b861eb0443f7f133fffffff')\nmaxExpArray[99] = BigNumber.from('0x01b0ce43b322bcde4a56e8ada5afffffff')\nmaxExpArray[100] = BigNumber.from('0x019f0028ec1fff007f5a195a39dfffffff')\nmaxExpArray[101] = BigNumber.from('0x018ded91f0e72ee74f49b15ba527ffffff')\nmaxExpArray[102] = BigNumber.from('0x017d8ec7f04136f4e5615fd41a63ffffff')\nmaxExpArray[103] = BigNumber.from('0x016ddc6556cdb84bdc8d12d22e6fffffff')\nmaxExpArray[104] = BigNumber.from('0x015ecf52776a1155b5bd8395814f7fffff')\nmaxExpArray[105] = BigNumber.from('0x015060c256cb23b3b3cc3754cf40ffffff')\nmaxExpArray[106] = BigNumber.from('0x01428a2f98d728ae223ddab715be3fffff')\nmaxExpArray[107] = BigNumber.from('0x013545598e5c23276ccf0ede68034fffff')\nmaxExpArray[108] = BigNumber.from('0x01288c4161ce1d6f54b7f61081194fffff')\nmaxExpArray[109] = BigNumber.from('0x011c592761c666aa641d5a01a40f17ffff')\nmaxExpArray[110] = BigNumber.from('0x0110a688680a7530515f3e6e6cfdcdffff')\nmaxExpArray[111] = BigNumber.from('0x01056f1b5bedf75c6bcb2ce8aed428ffff')\nmaxExpArray[112] = BigNumber.from('0x00faadceceeff8a0890f3875f008277fff')\nmaxExpArray[113] = BigNumber.from('0x00f05dc6b27edad306388a600f6ba0bfff')\nmaxExpArray[114] = BigNumber.from('0x00e67a5a25da41063de1495d5b18cdbfff')\nmaxExpArray[115] = BigNumber.from('0x00dcff115b14eedde6fc3aa5353f2e4fff')\nmaxExpArray[116] = BigNumber.from('0x00d3e7a3924312399f9aae2e0f868f8fff')\nmaxExpArray[117] = BigNumber.from('0x00cb2ff529eb71e41582cccd5a1ee26fff')\nmaxExpArray[118] = BigNumber.from('0x00c2d415c3db974ab32a51840c0b67edff')\nmaxExpArray[119] = BigNumber.from('0x00bad03e7d883f69ad5b0a186184e06bff')\nmaxExpArray[120] = BigNumber.from('0x00b320d03b2c343d4829abd6075f0cc5ff')\nmaxExpArray[121] = BigNumber.from('0x00abc25204e02828d73c6e80bcdb1a95bf')\nmaxExpArray[122] = BigNumber.from('0x00a4b16f74ee4bb2040a1ec6c15fbbf2df')\nmaxExpArray[123] = BigNumber.from('0x009deaf736ac1f569deb1b5ae3f36c130f')\nmaxExpArray[124] = BigNumber.from('0x00976bd9952c7aa957f5937d790ef65037')\nmaxExpArray[125] = BigNumber.from('0x009131271922eaa6064b73a22d0bd4f2bf')\nmaxExpArray[126] = BigNumber.from('0x008b380f3558668c46c91c49a2f8e967b9')\nmaxExpArray[127] = BigNumber.from('0x00857ddf0117efa215952912839f6473e6')\n\nfunction leftShift(num: BigNumber, shift: BigNumber) {\n    return num.mul(TWO.pow(shift))\n}\n\nfunction signedRightShift(num: BigNumber, shift: BigNumber) {\n    return num.div(TWO.pow(shift))\n}\n\n/**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\nexport function power(\n    _baseN: BigNumber,\n    _baseD: BigNumber,\n    _expN: BigNumber,\n    _expD: BigNumber\n): [BigNumber, number] {\n    invariant(_baseN.gt(_baseD), \"not support _baseN < _baseD\");\n    invariant(_baseN.lt(MAX_NUM))\n\n    let baseLog;\n    let base = (_baseN.mul(FIXED_1)).div(_baseD);\n    if (base.lt(OPT_LOG_MAX_VAL)) {\n        baseLog = optimalLog(base);\n    } else {\n        baseLog = generalLog(base);\n    }\n\n    let baseLogTimesExp = (baseLog.mul(_expN)).div(_expD);\n    if (baseLogTimesExp.lt(OPT_EXP_MAX_VAL)) {\n        return [optimalExp(baseLogTimesExp), MAX_PRECISION]\n    } else {\n        let precision = findPositionInMaxExpArray(baseLogTimesExp);\n        return [generalExp(signedRightShift(baseLogTimesExp, BigNumber.from(MAX_PRECISION - precision)), BigNumber.from(precision)), precision]\n    }\n}\n\n/**\n * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n */\nfunction floorLog2(_n: BigNumber): BigNumber {\n    let res = ZERO;\n    if (_n.lt(_256)) {\n        // At most 8 iterations\n        while (_n.gt(ONE)) {\n            _n = signedRightShift(_n, ONE);\n            res = res.add(ONE);\n        }\n    } else {\n        // Exactly 8 iterations\n        for (let s = _128; s.gt(ZERO); s = signedRightShift(s, ONE)) {\n            if (_n.gt(leftShift(ONE, s))) {\n                _n = signedRightShift(_n, s)\n                res = res.or(s);\n            }\n        }\n    }\n\n    return res;\n}\n\n/**\n * @dev computes log(x / FIXED_1) * FIXED_1.\n * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n */\nexport function generalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n    if (x.gte(FIXED_2)) {\n        const count = floorLog2(x.div(FIXED_1));\n        x = signedRightShift(x, count);\n        // now x < 2\n        res = count.mul(FIXED_1);\n    }\n\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n    if (x.gt(FIXED_1)) {\n        for (let i = MAX_PRECISION; i > 0; --i) {\n            x = (x.mul(x)).div(FIXED_1);\n            // now 1 < x < 4\n            if (x.gte(FIXED_2)) {\n                x = signedRightShift(x, ONE);\n                // now 1 < x < 2\n                res = res.add(leftShift(ONE, BigNumber.from(i - 1)));\n            }\n        }\n    }\n\n    return (res.mul(LN2_NUMERATOR)).div(LN2_DENOMINATOR)\n}\n\n/**\n    * @dev computes log(x / FIXED_1) * FIXED_1\n    * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n    * Auto-generated via \"PrintFunctionOptimalLog.py\"\n    * Detailed description:\n    * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n    * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n    * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n    * - The natural logarithm of the input is calculated by summing up the intermediate results above\n    * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n    */\nexport function optimalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n    let w;\n\n    if (x.gte('0xd3094c70f034de4b96ff7d5b6f99fcd8')) {\n        res = res.add(BigNumber.from('0x40000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xd3094c70f034de4b96ff7d5b6f99fcd8'));\n    }\n    // add 1 / 2^1\n    if (x.gte('0xa45af1e1f40c333b3de1db4dd55f29a7')) {\n        res = res.add(BigNumber.from('0x20000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xa45af1e1f40c333b3de1db4dd55f29a7'));\n    }\n    // add 1 / 2^2\n    if (x.gte('0x910b022db7ae67ce76b441c27035c6a1')) {\n        res = res.add(BigNumber.from('0x10000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x910b022db7ae67ce76b441c27035c6a1'));\n    }\n    // add 1 / 2^3\n    if (x.gte('0x88415abbe9a76bead8d00cf112e4d4a8')) {\n        res = res.add(BigNumber.from('0x08000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x88415abbe9a76bead8d00cf112e4d4a8'));\n    }\n    // add 1 / 2^4\n    if (x.gte('0x84102b00893f64c705e841d5d4064bd3')) {\n        res = res.add(BigNumber.from('0x04000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x84102b00893f64c705e841d5d4064bd3'));\n    }\n    // add 1 / 2^5\n    if (x.gte('0x8204055aaef1c8bd5c3259f4822735a2')) {\n        res = res.add(BigNumber.from('0x02000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x8204055aaef1c8bd5c3259f4822735a2'));\n    }\n    // add 1 / 2^6\n    if (x.gte('0x810100ab00222d861931c15e39b44e99')) {\n        res = res.add(BigNumber.from('0x01000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x810100ab00222d861931c15e39b44e99'));\n    }\n    // add 1 / 2^7\n    if (x.gte('0x808040155aabbbe9451521693554f733')) {\n        res = res.add(BigNumber.from('0x00800000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x808040155aabbbe9451521693554f733'));\n    }\n    // add 1 / 2^8\n\n    z = y = x.sub(FIXED_1);\n    w = (y.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x100000000000000000000000000000000').sub(y)).div(BigNumber.from('0x100000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^01 / 01 - y^02 / 02\n    res = res.add(z.mul(BigNumber.from('0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').sub(y)).div(BigNumber.from('0x200000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^03 / 03 - y^04 / 04\n    res = res.add(z.mul(BigNumber.from('0x099999999999999999999999999999999').sub(y)).div(BigNumber.from('0x300000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^05 / 05 - y^06 / 06\n    res = res.add(z.mul(BigNumber.from('0x092492492492492492492492492492492').sub(y)).div(BigNumber.from('0x400000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^07 / 07 - y^08 / 08\n    res = res.add(z.mul(BigNumber.from('0x08e38e38e38e38e38e38e38e38e38e38e').sub(y)).div(BigNumber.from('0x500000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^09 / 09 - y^10 / 10\n    res = res.add(z.mul(BigNumber.from('0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b').sub(y)).div(BigNumber.from('0x600000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^11 / 11 - y^12 / 12\n    res = res.add(z.mul(BigNumber.from('0x089d89d89d89d89d89d89d89d89d89d89').sub(y)).div(BigNumber.from('0x700000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^13 / 13 - y^14 / 14\n    res = res.add(z.mul(BigNumber.from('0x088888888888888888888888888888888').sub(y)).div(BigNumber.from('0x800000000000000000000000000000000')));\n    // add y^15 / 15 - y^16 / 16\n\n    return res;\n}\n\nexport function optimalExp(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n\n    z = y = x.mod(BigNumber.from('0x10000000000000000000000000000000'));\n    // get the input modulo 2^(-3)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x10e1b3be415a0000')));\n    // add y^02 * (20! / 02!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x05a0913f6b1e0000')));\n    // add y^03 * (20! / 03!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0168244fdac78000')));\n    // add y^04 * (20! / 04!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x004807432bc18000')));\n    // add y^05 * (20! / 05!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000c0135dca04000')));\n    // add y^06 * (20! / 06!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0001b707b1cdc000')));\n    // add y^07 * (20! / 07!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000036e0f639b800')));\n    // add y^08 * (20! / 08!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000618fee9f800')));\n    // add y^09 * (20! / 09!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000009c197dcc00')));\n    // add y^10 * (20! / 10!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000e30dce400')));\n    // add y^11 * (20! / 11!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000012ebd1300')));\n    // add y^12 * (20! / 12!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000017499f00')));\n    // add y^13 * (20! / 13!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000001a9d480')));\n    // add y^14 * (20! / 14!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000000001c6380')));\n    // add y^15 * (20! / 15!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000001c638')));\n    // add y^16 * (20! / 16!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000001ab8')));\n    // add y^17 * (20! / 17!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000000017c')));\n    // add y^18 * (20! / 18!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000014')));\n    // add y^19 * (20! / 19!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000001')));\n    // add y^20 * (20! / 20!)\n    res = res.div(BigNumber.from('0x21c3677c82b40000')).add(y).add(FIXED_1);\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    if (!(x.and(BigNumber.from('0x010000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1c3d6a24ed82218787d624d3e5eba95f9'))).div(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e776'));\n    // multiply by e^2^(-3)\n    if (!(x.and(BigNumber.from('0x020000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e778'))).div(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed4'));\n    // multiply by e^2^(-2)\n    if (!(x.and(BigNumber.from('0x040000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed5'))).div(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21f'));\n    // multiply by e^2^(-1)\n    if (!(x.and(BigNumber.from('0x080000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21e'))).div(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c9'));\n    // multiply by e^2^(+0)\n    if (!(x.and(BigNumber.from('0x100000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c5'))).div(BigNumber.from('0x00960aadc109e7a3bf4578099615711ea'));\n    // multiply by e^2^(+1)\n    if (!(x.and(BigNumber.from('0x200000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x00960aadc109e7a3bf4578099615711d7'))).div(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdce3d'));\n    // multiply by e^2^(+2)\n    if (!(x.and(BigNumber.from('0x400000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdc307'))).div(BigNumber.from('0x0000003c6ab775dd0b95b4cbee7e65d11'));\n    // multiply by e^2^(+3)\n\n    return res;\n}\n\n/**\n   * @dev this function can be auto-generated by the script \"PrintFunctionGeneralExp.py\".\n   * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n   * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n   * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n   * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n   */\nexport function generalExp(_x: BigNumber, _precision: BigNumber) {\n    let xi = _x;\n    let res = ZERO;\n\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x3442c4e6074a82f1797f72ac0000000'));\n    // add x^02 * (33! / 02!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x116b96f757c380fb287fd0e40000000'));\n    // add x^03 * (33! / 03!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x045ae5bdd5f0e03eca1ff4390000000'));\n    // add x^04 * (33! / 04!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00defabf91302cd95b9ffda50000000'));\n    // add x^05 * (33! / 05!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x002529ca9832b22439efff9b8000000'));\n    // add x^06 * (33! / 06!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00054f1cf12bd04e516b6da88000000'));\n    // add x^07 * (33! / 07!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000a9e39e257a09ca2d6db51000000'));\n    // add x^08 * (33! / 08!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000012e066e7b839fa050c309000000'));\n    // add x^09 * (33! / 09!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000001e33d7d926c329a1ad1a800000'));\n    // add x^10 * (33! / 10!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000002bee513bdb4a6b19b5f800000'));\n    // add x^11 * (33! / 11!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000003a9316fa79b88eccf2a00000'));\n    // add x^12 * (33! / 12!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000048177ebe1fa812375200000'));\n    // add x^13 * (33! / 13!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000005263fe90242dcbacf00000'));\n    // add x^14 * (33! / 14!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000057e22099c030d94100000'));\n    // add x^15 * (33! / 15!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000057e22099c030d9410000'));\n    // add x^16 * (33! / 16!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000052b6b54569976310000'));\n    // add x^17 * (33! / 17!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000004985f67696bf748000'));\n    // add x^18 * (33! / 18!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000003dea12ea99e498000'));\n    // add x^19 * (33! / 19!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000031880f2214b6e000'));\n    // add x^20 * (33! / 20!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000025bcff56eb36000'));\n    // add x^21 * (33! / 21!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000001b722e10ab1000'));\n    // add x^22 * (33! / 22!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000001317c70077000'));\n    // add x^23 * (33! / 23!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000cba84aafa00'));\n    // add x^24 * (33! / 24!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000082573a0a00'));\n    // add x^25 * (33! / 25!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000005035ad900'));\n    // add x^26 * (33! / 26!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000000000002f881b00'));\n    // add x^27 * (33! / 27!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000001b29340'));\n    // add x^28 * (33! / 28!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000000000efc40'));\n    // add x^29 * (33! / 29!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000007fe0'));\n    // add x^30 * (33! / 30!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000420'));\n    // add x^31 * (33! / 31!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000021'));\n    // add x^32 * (33! / 32!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000001'));\n    // add x^33 * (33! / 33!)\n\n\n    return (res.div(BigNumber.from('0x688589cc0e9505e2f2fee5580000000'))).add(_x).add(leftShift(ONE, _precision));\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\n}\n\n/**\n    * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n    * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n    * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n    */\nexport function findPositionInMaxExpArray(_x: BigNumber): number {\n    let lo = MIN_PRECISION;\n    let hi = MAX_PRECISION;\n\n    while (lo + 1 < hi) {\n        let mid = (lo + hi) / 2;\n        if (maxExpArray[mid].gte(_x)) lo = mid;\n        else hi = mid;\n    }\n\n    if (maxExpArray[hi].gte(_x)) return hi;\n    if (maxExpArray[lo].gte(_x)) return lo;\n\n    invariant(false);\n}\n\n/**\n * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\n *\n * Formula:\n * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\n *\n * @param amountIn                  source reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountOut\n */\nexport function getAmountOut(\n    amountIn: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    // validate input\n    invariant(amountIn.gt(ZERO), \"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\");\n    // if (amountIn.lte(ZERO) || amountIn.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    const amountInWithFee = amountIn.mul(TENK.sub(swapFee))\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        return (reserveOut.mul(amountInWithFee)).div(reserveIn.mul(TENK).add(amountInWithFee));\n    }\n\n    // let result;\n    // let precision: number;\n    const baseN = (reserveIn.mul(TENK)).add(amountInWithFee)\n    const [result, precision] = power(baseN, reserveIn.mul(TENK), tokenWeightIn, tokenWeightOut);\n\n    const temp1 = reserveOut.mul(result);\n    const temp2 = leftShift(reserveOut, BigNumber.from(precision));\n\n    return (temp1.sub(temp2)).div(result)\n}\n\n/**\n * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n *\n * Formula:\n * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\n *\n * @param amountOut     target reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountIn\n */\nexport function getAmountIn(\n    amountOut: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n) {\n    // validate input\n    invariant(amountOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n    // if (amountOut.gte(ZERO) || amountOut.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        const numerator = reserveIn.mul(amountOut).mul(TENK);\n        const denominator = reserveOut.sub(amountOut).mul(TENK.sub(swapFee));\n        return (numerator.div(denominator)).add(1);\n    }\n\n    const baseD = reserveOut.sub(amountOut);\n    const [result, precision] = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\n    const baseReserveIn = reserveIn.mul(TENK);\n    const temp1 = baseReserveIn.mul(result);\n    const temp2 = leftShift(baseReserveIn, BigNumber.from(precision));\n    return (signedRightShift(temp1.sub(temp2), BigNumber.from(precision)).div(TENK.sub(swapFee))).add(1);\n}\n\n","import { BigNumber } from \"ethers\"\nimport { ZERO } from \"./LogExpMath\"\n\nexport class WeightedSwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly normalizedWeights: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    constructor(\n        tokenMultipliers: BigNumber[],\n        normalizedWeights: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n    ) {\n        this.tokenMultipliers = tokenMultipliers\n        this.normalizedWeights = normalizedWeights\n        this.fee = fee\n        this.adminFee = adminFee\n\n    }\n\n    public static mock(): WeightedSwapStorage {\n        return new WeightedSwapStorage([ZERO], [ZERO], ZERO, ZERO)\n    }\n\n}","import { BigNumber } from \"ethers\"\n\nexport class StableSwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): StableSwapStorage {\n        const dummy = BigNumber.from(0)\n        return new StableSwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport { Token } from '../token'\nimport { Price, TokenAmount } from '../fractions'\n\n// const ZERO = BigNumber.from(0)\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport abstract class Pool {\n\n    // the index-token map \n    public abstract readonly tokens: Token[]\n    public abstract readonly liquidityToken: Token\n    public abstract tokenBalances: BigNumber[]\n    public abstract readonly address: string\n    public abstract _name: string\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        let res = false\n        for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n            res || token.equals(this.tokens[i])\n        }\n\n        return res\n    }\n\n    // maps the index to the token in the stablePool\n    public tokenFromIndex(index: number): Token {\n        return this.tokens[index]\n    }\n\n    public indexFromToken(token: Token): number {\n        for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n            if (token.equals(this.tokens[index])) {\n                return index\n            }\n        }\n        throw new Error('token not in pool');\n    }\n\n    public getBalances(): BigNumber[] {\n        return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n    }\n\n    // calculates the swap output amount without\n    // pinging the blockchain for data\n    public abstract calculateSwapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        inAmount: BigNumber): BigNumber;\n\n\n    // calculates the swap output amount without\n    // pinging the blockchain for data\n    public abstract calculateSwapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        outAmount: BigNumber): BigNumber;\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): number {\n        return this.tokens[0].chainId\n    }\n\n    public token(index: number): Token {\n        return this.tokens[index]\n    }\n\n    public reserveOf(token: Token): BigNumber {\n        invariant(this.involvesToken(token), 'TOKEN')\n        for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n            if (token.equals(this.tokens[i]))\n                return this.tokenBalances[i]\n        }\n        return BigNumber.from(0)\n    }\n\n    public set name(value: string) {\n        this._name = value\n    }\n\n    public get name(): string {\n        return this._name\n    }\n\n\n    public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n        this.tokenBalances[index] = newBalance\n    }\n\n    public getTokenAmounts(): TokenAmount[] {\n        return this.tokens.map((t, i) => new TokenAmount(t, this.tokenBalances[i]))\n    }\n\n    public setTokenBalances(tokenBalances: BigNumber[]) {\n        this.tokenBalances = tokenBalances\n    }\n\n    public subtractBalanceValue(tokenAmount: TokenAmount) {\n        let newBalances = [] // safe way for replacement\n        for (let i = 0; i < this.tokenBalances.length; i++) {\n            newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n        }\n        this.setTokenBalances(newBalances)\n    }\n\n    public abstract poolPrice(tokenIn: Token, tokenOut: Token): Price;\n\n    public abstract poolPriceBases(tokenIn: Token, tokenOut: Token): {\n        priceBaseIn: BigNumber\n        priceBaseOut: BigNumber\n    };\n\n    // function that adjusts pool for swap  amounts if routed through more than once\n    public abstract adjustForSwap(amountIn: TokenAmount, amountOut: TokenAmount): void;\n\n    // function that adjusts pool for swap  amounts if routed through more than once\n    public abstract clone(): Pool;\n\n    public abstract getName(): string;\n}\n\n\nexport enum PoolType {\n    Pair = 'Pair',\n    StablePairWrapper = 'StablePairWrapper',\n    AmplifiedWeightedPair = 'AmplifiedWeightedPair',\n    PoolPairWrapper = 'PoolPairWrapper',\n}\n\nexport type PoolDictionary = { [id: string]: Pool }\n\nexport type PoolHops = {\n    [tokenAddress: string]: Set<Token>; // the set of pool ids\n}","import { Price } from '../../fractions/price'\nimport { TokenAmount } from '../../fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n    BigintIsh,\n    MINIMUM_LIQUIDITY,\n    ZERO,\n    // ONE,\n    FIVE,\n    // _100,\n    // FEES_NUMERATOR,\n    // FEES_DENOMINATOR,\n    FACTORY_ADDRESS,\n    TENK,\n} from '../../../constants'\nimport { sqrt, parseBigintIsh } from '../../../helperUtils'\nimport {\n    // InsufficientReservesError,\n    InsufficientInputAmountError, InsufficientReservesError\n} from '../../../errors'\nimport { Token } from '../../token'\nimport { getAmountOut, getAmountIn } from '../../calculators/weightedPairCalc'\nimport { PoolType, Pool } from '../pool'\n// import { getAmountIn, getAmountOut } from 'entities/calculators/weightedPairCalc'\nimport { ethers } from 'ethers'\nimport { ChainId } from '../../currency'\n\nconst _100 = BigNumber.from(100)\n\nlet PAIR_ADDRESS_CACHE: {\n    [token0Address: string]: {\n        [token1Address: string]: {\n            [weight0: string]: string\n        }\n    }\n} = {}\n\nconst PAIR_HASH: { [chainId: number]: string } = {\n    [ChainId.AVAX_TESTNET]: '0x9054fb12bf026c7ef2c6d1f68fbbead8f68cdbfa477faca7f9d8ec63173f87ff',\n    [ChainId.BSC_MAINNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.AVAX_MAINNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.OASIS_MAINNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.OASIS_TESTNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.BSC_TESTNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.MATIC_MAINNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.MATIC_TESTNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.QUARKCHAIN_DEV_S0]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84',\n    [ChainId.ARBITRUM_MAINNET]: '0x623d9ad8b6787321d0dff55d4f864a7cfdedfb1802a561c75cd01c62a079bc84'\n}\n\nexport class AmplifiedWeightedPair extends Pool {\n    public readonly address: string\n    public readonly tokens: Token[]\n    public tokenBalances: BigNumber[]\n    public virtualReserves: BigNumber[]\n    public readonly liquidityToken: Token\n    private readonly weights: BigNumber[]\n    private readonly fee: BigNumber\n    private readonly ampBPS: BigNumber\n    public readonly type: PoolType\n    public _name: string\n\n    public static getAddress(tokenA: Token, tokenB: Token, weightA: BigNumber): string {\n        const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n        const weights = tokenA.sortsBefore(tokenB) ? [weightA.toString(), _100.sub(weightA).toString()] : [_100.sub(weightA).toString(), weightA.toString()] // does safety checks\n        if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address]?.[`${weights[0]}`] === undefined) {\n            PAIR_ADDRESS_CACHE = {\n                ...PAIR_ADDRESS_CACHE,\n                [tokens[0].address]: {\n                    ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n                    [tokens[1].address]: {\n                        ...PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address],\n                        [`${weights[0]}`]: getCreate2Address(\n                            FACTORY_ADDRESS[tokens[0].chainId],\n                            keccak256(\n                                ['bytes'],\n                                [pack(\n                                    ['address', 'address', 'uint32'],\n                                    [tokens[0].address, tokens[1].address, weights[0]]\n                                )]\n                            ),\n                            PAIR_HASH[tokens[0].chainId]\n                        )\n                    },\n                },\n            }\n        }\n\n        return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address][`${weights[0]}`]\n    }\n\n    public constructor(tokens: Token[], tokenBalances: BigNumber[], virtualReserves: BigNumber[], weightA: BigNumber, fee: BigNumber, amp: BigNumber, address?: string) {\n        super()\n\n        this.tokenBalances = tokens[0].sortsBefore(tokens[1]) // does safety checks\n            ? tokenBalances\n            : [tokenBalances[1], tokenBalances[0]]\n        this.tokens = tokens[0].sortsBefore(tokens[1]) // does safety checks\n            ? tokens\n            : [tokens[1], tokens[0]]\n\n        this.ampBPS = amp\n        this.weights = tokens[0].sortsBefore(tokens[1]) // does safety checks\n            ? [weightA, _100.sub(weightA)]\n            : [_100.sub(weightA), weightA]\n\n        this.virtualReserves = tokens[0].sortsBefore(tokens[1]) // does safety checks\n            ? virtualReserves\n            : [virtualReserves[1], virtualReserves[0]]\n\n\n        this.fee = fee\n        this.liquidityToken = new Token(\n            tokens[0].chainId,\n            address ? ethers.utils.getAddress(address) : AmplifiedWeightedPair.getAddress(this.tokens[0], this.tokens[1], this.weights[0]),\n            18,\n            'Requiem-LP',\n            'Requiem LPs'\n        )\n        this.type = PoolType.AmplifiedWeightedPair\n        this.address = !address ? AmplifiedWeightedPair.getAddress(this.token0, this.token1, this.weight0) : address\n\n        this._name = tokens.map(t => t.symbol).join('-')\n    }\n\n    public static fromBigIntish(tokens: Token[], tokenBalances: BigintIsh[], virtualReserves: BigintIsh[], weightA: BigintIsh, fee: BigintIsh, amp: BigintIsh, address?: string): AmplifiedWeightedPair {\n        return new AmplifiedWeightedPair(\n            tokens,\n            tokenBalances.map(b => BigNumber.from(b)),\n            virtualReserves.map(b => BigNumber.from(b)),\n            BigNumber.from(weightA),\n            BigNumber.from(fee),\n            BigNumber.from(amp),\n            address\n        )\n    }\n\n    public getAddressForRouter(): string {\n        return this.liquidityToken.address\n    }\n\n    /**\n     * Returns true if the token is either token0 or token1\n     * @param token to check\n     */\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n    public get amp(): BigNumber {\n        return this.ampBPS\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token0 in virtual reserves\n     */\n    public get token0Price(): Price {\n        return new Price(\n            this.token0,\n            this.token1,\n            this.virtualReserves[0].mul(this.weights[1]),\n            this.virtualReserves[1].mul(this.weights[0])\n        )\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1 in virtual reserves\n     */\n    public get token1Price(): Price {\n        return new Price(\n            this.token1,\n            this.token0,\n            this.virtualReserves[1].mul(this.weights[0]),\n            this.virtualReserves[0].mul(this.weights[1])\n        )\n    }\n\n    public poolPrice(tokenIn: Token, _: Token): Price {\n        return tokenIn.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    public get fee0(): BigNumber {\n        return this.fee\n    }\n\n    public poolPriceBases(tokenIn: Token, _: Token): { priceBaseIn: BigNumber; priceBaseOut: BigNumber; } {\n        if (tokenIn.equals(this.token0)) {\n            return {\n                priceBaseIn: this.virtualReserves[0].mul(this.weights[1]),\n                priceBaseOut: this.virtualReserves[1].mul(this.weights[0])\n            }\n        } else {\n            return {\n                priceBaseIn: this.virtualReserves[1].mul(this.weights[0]),\n                priceBaseOut: this.virtualReserves[0].mul(this.weights[1])\n            }\n        }\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceOf(token: Token): Price {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price : this.token1Price\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokens[0]\n    }\n\n    public get token1(): Token {\n        return this.tokens[1]\n    }\n\n    public get reserve0(): TokenAmount {\n        return new TokenAmount(this.tokens[0], this.tokenBalances[0])\n    }\n\n    public get reserve1(): TokenAmount {\n        return new TokenAmount(this.tokens[1], this.tokenBalances[1])\n    }\n\n    public get virtualReserve0(): TokenAmount {\n        return new TokenAmount(this.tokens[0], this.virtualReserves[0])\n    }\n\n    public get virtualReserve1(): TokenAmount {\n        return new TokenAmount(this.tokens[1], this.virtualReserves[1])\n    }\n\n    public get weight0(): BigNumber {\n        return this.weights[0]\n    }\n\n    public get weight1(): BigNumber {\n        return this.weights[1]\n    }\n\n\n    public reserveOf(token: Token): BigNumber {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0.raw : this.reserve1.raw\n    }\n\n\n    public virtualReserveOf(token: Token): BigNumber {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.virtualReserve0.raw : this.virtualReserve1.raw\n    }\n\n    public weightOf(token: Token): BigNumber {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.weight0 : this.weight1\n    }\n\n\n    public getLiquidityMinted(\n        totalSupply: TokenAmount,\n        tokenAmountA: TokenAmount,\n        tokenAmountB: TokenAmount\n    ): TokenAmount {\n        invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n        const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n            ? [tokenAmountA, tokenAmountB]\n            : [tokenAmountB, tokenAmountA]\n        invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n        let liquidity: BigNumber\n        if (totalSupply.raw.eq(ZERO)) {\n            liquidity = sqrt(tokenAmounts[0].raw.mul(tokenAmounts[1].raw)).sub(MINIMUM_LIQUIDITY)\n        } else {\n            const amount0 = tokenAmounts[0].raw.mul(totalSupply.raw).div(this.reserve0.raw)\n            const amount1 = tokenAmounts[1].raw.mul(totalSupply.raw).div(this.reserve1.raw)\n            liquidity = amount0.lte(amount1) ? amount0 : amount1\n        }\n        if (!liquidity.gt(ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n        return new TokenAmount(this.liquidityToken, liquidity)\n    }\n\n    public getLiquidityValue(\n        token: Token,\n        totalSupply: TokenAmount,\n        liquidity: TokenAmount,\n        feeOn: boolean = false,\n        kLast?: BigintIsh\n    ): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n        invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n        invariant(liquidity.raw.lte(totalSupply.raw), 'LIQUIDITY')\n\n        let totalSupplyAdjusted: TokenAmount\n        if (!feeOn) {\n            totalSupplyAdjusted = totalSupply\n        } else {\n            invariant(!!kLast, 'K_LAST')\n            const kLastParsed = parseBigintIsh(kLast)\n            if (!kLastParsed.eq(ZERO)) {\n                const rootK = sqrt(this.reserve0.raw.mul(this.reserve1.raw))\n                const rootKLast = sqrt(kLastParsed)\n                if (rootK.gt(rootKLast)) {\n                    const numerator = totalSupply.raw.mul(rootK.sub(rootKLast))\n                    const denominator = rootK.mul(FIVE).add(rootKLast)\n                    const feeLiquidity = numerator.div(denominator)\n                    totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n                } else {\n                    totalSupplyAdjusted = totalSupply\n                }\n            } else {\n                totalSupplyAdjusted = totalSupply\n            }\n        }\n\n        return new TokenAmount(\n            token,\n            liquidity.raw.mul(this.reserveOf(token)).div(totalSupplyAdjusted.raw)\n        )\n    }\n\n    // these are only supposed to be used for liquidity calculations\n    /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n    public get token0PriceRaw(): Price {\n        return new Price(this.token0, this.token1, this.tokenBalances[0], this.tokenBalances[1])\n    }\n\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n    public get token1PriceRaw(): Price {\n        return new Price(this.token1, this.token0, this.tokenBalances[1], this.tokenBalances[0])\n    }\n\n    /**\n     * Return the price of the given token in terms of the other token in the pair.\n     * @param token token to return price of\n     */\n    public priceRatioOf(token: Token): Price {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0PriceRaw : this.token1PriceRaw\n    }\n\n\n    // calculates the swap output amount without\n    // pinging the blockchain for data\n    public calculateSwapGivenIn(\n        tokenIn: Token,\n        tokenOut: Token,\n        inAmount: BigNumber): BigNumber {\n        if (\n            inAmount.gte(this.reserveOf(tokenIn))\n        ) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.virtualReserveOf(tokenIn)\n        const outputReserve = this.virtualReserveOf(tokenOut)\n\n        const inputWeight = this.weightOf(tokenIn)\n        const outputWeight = this.weightOf(tokenOut)\n\n        return getAmountOut(\n            inAmount,\n            inputReserve,\n            outputReserve,\n            inputWeight,\n            outputWeight,\n            this.fee\n        )\n    }\n\n\n    // calculates the swap output amount without\n    // pinging the blockchain for data\n    public calculateSwapGivenOut(\n        tokenIn: Token,\n        tokenOut: Token,\n        outAmount: BigNumber): BigNumber {\n        if (\n            outAmount.gte(this.reserveOf(tokenOut))\n        ) {\n            throw new InsufficientReservesError()\n        }\n\n        const outputReserve = this.virtualReserveOf(tokenOut)\n        const inputReserve = this.virtualReserveOf(tokenIn)\n\n        const outputWeight = this.weightOf(tokenOut)\n        const inputWeight = this.weightOf(tokenIn)\n\n\n        return getAmountIn(\n            outAmount,\n            inputReserve,\n            outputReserve,\n            inputWeight,\n            outputWeight,\n            this.fee\n        )\n\n    }\n\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pool] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        if (this.reserve0.raw.eq(ZERO) || this.reserve1.raw.eq(ZERO)) {\n            throw new InsufficientReservesError()\n        }\n        const inputReserve = this.virtualReserveOf(inputAmount.token)\n        const outputReserve = this.virtualReserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const inputWeight = this.weightOf(inputAmount.token)\n        const outputWeight = this.weightOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        const outputAmount = new TokenAmount(\n            inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n\n            getAmountOut(\n                inputAmount.toBigNumber(),\n                inputReserve,\n                outputReserve,\n                inputWeight,\n                outputWeight,\n                this.fee\n            )\n        )\n        // console.log(\"OA\", outputAmount.raw.toString())\n        if (outputAmount.raw.eq(ZERO)) {\n            throw new InsufficientInputAmountError()\n        }\n\n        return [\n            outputAmount,\n            new AmplifiedWeightedPair(\n                [inputAmount.token, inputAmount.token.equals(this.token0) ? this.token1 : this.token0], // tokens\n                [this.reserveOf(inputAmount.token).add(inputAmount.raw), this.reserveOf(outputAmount.token).sub(outputAmount.raw)], // reserves\n                [inputReserve.add(inputAmount.raw), outputReserve.sub(outputAmount.raw)], // virtual reserves\n                inputWeight,\n                this.ampBPS,\n                this.fee\n            )\n        ]\n    }\n\n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pool] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n        console.log(\"-- this 0\", this.reserve0.raw, \"1\", this.reserve1.raw, \"out\", outputAmount.raw)\n        if (\n            this.reserve0.raw.eq(ZERO) ||\n            this.reserve1.raw.eq(ZERO) ||\n            outputAmount.raw.gte(this.reserveOf(outputAmount.token))\n        ) {\n            throw new Error(\"insufficcient reserves\")\n        }\n\n        const outputReserve = this.virtualReserveOf(outputAmount.token)\n        const inputReserve = this.virtualReserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const outputWeight = this.weightOf(outputAmount.token)\n        const inputWeight = this.weightOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const inputAmount = new TokenAmount(\n            outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n            getAmountIn(\n                outputAmount.toBigNumber(),\n                inputReserve,\n                outputReserve,\n                inputWeight,\n                outputWeight,\n                this.fee\n            )\n        )\n\n        return [\n            inputAmount,\n            new AmplifiedWeightedPair(\n                [inputAmount.token, outputAmount.token],\n                [this.reserveOf(inputAmount.token).add(inputAmount.raw), this.reserveOf(outputAmount.token).sub(outputAmount.raw)],\n                [inputReserve.add(inputAmount.raw), outputReserve.sub(outputAmount.raw)],\n                inputWeight,\n                this.ampBPS,\n                this.fee\n            )\n        ]\n    }\n\n    public adjustForSwap(amountIn: TokenAmount, amountOut: TokenAmount) {\n        this.virtualReserves[this.indexFromToken(amountIn.token)] = this.virtualReserves[this.indexFromToken(amountIn.token)].add(amountIn.raw.mul(this.amp).div(TENK))\n        this.virtualReserves[this.indexFromToken(amountOut.token)] = this.virtualReserves[this.indexFromToken(amountOut.token)].sub(amountOut.raw.mul(this.amp).div(TENK))\n    };\n\n    public clone(): AmplifiedWeightedPair {\n        return new AmplifiedWeightedPair(this.tokens, this.tokenBalances, this.virtualReserves, this.weight0, this.fee0, this.amp, this.address)\n    }\n\n    public getName(): string {\n        return this.tokens.map((t, i) => String(this.weights[i]) + '-' + t.symbol).join('/');\n    }\n}\n\n\n","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\n\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { WeightedSwapStorage } from '../../calculators/weightedSwapStorage'\nimport {\n  BigintIsh,\n} from '../../../constants'\nimport weightedPoolABI from '../../../abis/WeightedPool.json'\nimport { Token } from '../../token'\nimport { TokenAmount } from '../../fractions/tokenAmount'\nimport { ZERO } from '../../calculators/LogExpMath'\nimport { calculateRemoveLiquidityExactIn, calculateRemoveLiquidityOneTokenExactIn, calculateSwapGivenIn, calculateSwapGivenOut, calculateTokenAmount } from '../../calculators/WeightedPoolLib'\nimport { Pool } from '../pool'\nimport { Price } from '../../fractions'\nimport { ChainId } from '../../currency'\n// const ZERO = BigNumber.from(0)\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class WeightedPool extends Pool {\n  public readonly address: string\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: Token[]\n  public tokenBalances: BigNumber[]\n  public swapStorage: WeightedSwapStorage\n  public _name: string\n\n  public lpTotalSupply: BigNumber\n\n  public constructor(\n    poolAddress: string,\n    tokens: Token[],\n    tokenBalances: BigNumber[],\n    swapStorage: WeightedSwapStorage,\n    lpTotalSupply: BigNumber,\n    lpAddress?: string\n  ) {\n    super()\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this.address = ethers.utils.getAddress(poolAddress)\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      lpAddress ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'Requiem-LP',\n      'Requiem Swap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n\n    this._name = 'Weighted Pool'\n  }\n\n  public static mock() {\n    return new WeightedPool('', [new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC')], [ZERO], WeightedSwapStorage.mock(), ZERO)\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inToken: Token,\n    outToken: Token,\n    inAmount: BigNumber | BigintIsh,\n    // chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(\n      '0xCc62754F15f7F35E4c58Ce6aD5608fA575C5583E',\n      new ethers.utils.Interface(weightedPoolABI as any),\n      provider\n    ).calculateSwapGivenIn(inToken.address, outToken.address, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenIn(\n    tokenIn: Token,\n    tokenOut: Token,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwapGivenIn(\n      this.swapStorage,\n      this.indexFromToken(tokenIn),\n      this.indexFromToken(tokenOut),\n      inAmount,\n      this.tokenBalances\n    )\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenOut(\n    tokenIn: Token,\n    tokenOut: Token,\n    outAmount: BigNumber): BigNumber {\n\n    const inAmount: BigNumber = calculateSwapGivenOut(\n      this.swapStorage,\n      this.indexFromToken(tokenIn),\n      this.indexFromToken(tokenOut),\n      outAmount,\n      this.tokenBalances,\n    )\n\n    return inAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, tokenOut: Token): TokenAmount {\n    const swap = this.calculateSwapGivenIn(inputAmount.token, tokenOut, inputAmount.raw)\n    return new TokenAmount(tokenOut, swap)\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, tokenIn: Token): TokenAmount {\n    const swap = this.calculateSwapGivenOut(tokenIn, outputAmount.token, outputAmount.raw)\n    return new TokenAmount(tokenIn, swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return calculateRemoveLiquidityExactIn(\n      this.swapStorage,\n      amountLp,\n      this.lpTotalSupply,\n      this.tokenBalances\n    ).map((x, i) => x.div(this.swapStorage.tokenMultipliers[i]))\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { amountOut: BigNumber, swapFee: BigNumber } {\n    const { amountOut, swapFee } = calculateRemoveLiquidityOneTokenExactIn(\n      this.swapStorage,\n      index,\n      amount,\n      this.lpTotalSupply,\n      this.tokenBalances\n    )\n    return {\n      amountOut: amountOut.div(this.swapStorage.tokenMultipliers[index]),\n      swapFee\n    }\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      this.lpTotalSupply,\n      deposit,\n      this.tokenBalances,\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwapGivenIn(this.tokens[i], this.tokens[outIndex], userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount)\n  }\n\n  public setSwapStorage(swapStorage: WeightedSwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): WeightedPool {\n    return new WeightedPool(\n      this.address,\n      this.tokens,\n      this.tokenBalances,\n      this.swapStorage,\n      this.lpTotalSupply\n    )\n  }\n\n  public poolPrice(tokenIn: Token, tokenOut: Token): Price {\n    const inIndex = this.indexFromToken(tokenIn)\n    const outIndex = this.indexFromToken(tokenOut)\n    return new Price(\n      tokenIn,\n      tokenOut,\n      this.swapStorage.normalizedWeights[outIndex].mul(this.tokenBalances[inIndex]),\n      this.swapStorage.normalizedWeights[inIndex].mul(this.tokenBalances[outIndex])\n    )\n  }\n\n  public poolPriceBases(tokenIn: Token, tokenOut: Token): { priceBaseIn: BigNumber; priceBaseOut: BigNumber; } {\n    const inIndex = this.indexFromToken(tokenIn)\n    const outIndex = this.indexFromToken(tokenOut)\n    return {\n      priceBaseIn: this.swapStorage.normalizedWeights[outIndex].mul(this.tokenBalances[inIndex]),\n      priceBaseOut: this.swapStorage.normalizedWeights[inIndex].mul(this.tokenBalances[outIndex])\n    }\n  }\n\n  public adjustForSwap(amountIn: TokenAmount, amountOut: TokenAmount) {\n    this.tokenBalances[this.indexFromToken(amountIn.token)] = this.tokenBalances[this.indexFromToken(amountIn.token)].add(amountIn.raw)\n    this.tokenBalances[this.indexFromToken(amountOut.token)] = this.tokenBalances[this.indexFromToken(amountOut.token)].sub(amountOut.raw)\n  };\n\n  public getName(): string {\n    return this._name;\n  }\n\n}\n","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { ONE_18 } from './LogExpMath'\nimport { StableSwapStorage } from './stableSwapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(1000)\nconst FEE_DENOMINATOR = ONE_18\nconst ONE = BigNumber.from(1)\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: StableSwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: StableSwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwapGivenIn(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: StableSwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(ONE)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\nexport function calculateSwapGivenOut(inIndex: number, outIndex: number, outAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: StableSwapStorage\n): BigNumber {\n\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n\n    let _amountOutInclFee = outAmount.mul(FEE_DENOMINATOR).div(FEE_DENOMINATOR.sub(swapStorage.fee));\n    let newOutBalance = normalizedBalances[outIndex].sub(_amountOutInclFee.mul(swapStorage.tokenMultipliers[outIndex]));\n\n    let inBalance = _getY(\n        outIndex,\n        inIndex,\n        newOutBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    const inAmount = ((inBalance.sub(normalizedBalances[inIndex]).sub(ONE)).div(swapStorage.tokenMultipliers[inIndex])).add(ONE)\n    return inAmount;\n}\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: StableSwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: StableSwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: StableSwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: StableSwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwapGivenIn,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount,\n  calculateSwapGivenOut\n} from '../../calculators/stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { StableSwapStorage } from '../../calculators/stableSwapStorage'\nimport {\n  BigintIsh,\n  STABLE_POOL_ADDRESS\n} from '../../../constants'\nimport StableSwap from '../../../abis/RequiemStableSwap.json'\nimport { Token } from '../../token'\nimport { TokenAmount } from '../../fractions/tokenAmount'\nimport { Pool } from '../pool'\nimport { Price } from '../../fractions'\n\n// const ZERO = BigNumber.from(0)\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool extends Pool {\n  public readonly address: string\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: Token[]\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: StableSwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n  public _name: string\n\n  public constructor(\n    tokens: Token[],\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: StableSwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    poolAddress: string,\n    lpAddress?: string\n  ) {\n    super()\n    this.tokens = tokens\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      lpAddress ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n    this.address = ethers.utils.getAddress(poolAddress)\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n\n    this._name = 'Stable Pool'\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool([new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC')], [dummy], dummy, StableSwapStorage.mock(), 0, dummy, dummy, '0x0000000000000000000000000000000000000001')\n  }\n\n  public getAddressForRouter(): string {\n    return STABLE_POOL_ADDRESS[this.tokens[0].chainId]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inToken: Token,\n    outToken: Token,\n    inAmount: BigNumber | BigintIsh,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(this.address, new ethers.utils.Interface(StableSwap), provider).calculateSwap(inToken.address, outToken.address, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenIn(\n    tokenIn: Token,\n    tokenOut: Token,\n    inAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[inIndex].lte(inAmount)) // || inAmount.eq(ZERO))\n    //   return ZERO\n\n    const outAmount: BigNumber = calculateSwapGivenIn(\n      this.indexFromToken(tokenIn),\n      this.indexFromToken(tokenOut),\n      inAmount,\n      this.tokenBalances,\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenOut(\n    tokenIn: Token,\n    tokenOut: Token,\n    outAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[outIndex].lte(outAmount)) // || outAmount.eq(ZERO))\n    //   return ZERO\n\n    const inAmount: BigNumber = calculateSwapGivenOut(\n      this.indexFromToken(tokenIn),\n      this.indexFromToken(tokenOut),\n      outAmount,\n      this.tokenBalances,\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return inAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, tokenOut: Token): TokenAmount {\n    const swap = this.calculateSwapGivenIn(inputAmount.token, tokenOut, inputAmount.toBigNumber())\n    return new TokenAmount(tokenOut, swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, tokenIn: Token): TokenAmount {\n    const swap = this.calculateSwapGivenOut(tokenIn, outputAmount.token, outputAmount.toBigNumber())\n    return new TokenAmount(tokenIn, swap)\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwapGivenIn(this.tokens[i], this.tokens[outIndex], userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: StableSwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): StablePool {\n    return new StablePool(\n      this.tokens, this.tokenBalances, this._A, this.swapStorage, this.blockTimestamp.toNumber(), this.lpTotalSupply, this.currentWithdrawFee, this.address\n    )\n  }\n\n  public poolPrice(tokenIn: Token, tokenOut: Token): Price {\n    const virtualIn = BigNumber.from(this.tokenBalances[this.indexFromToken(tokenIn)]).div(10000)\n    return new Price(tokenIn, tokenOut, virtualIn, this.calculateSwapGivenIn(tokenIn, tokenOut, virtualIn))\n  }\n\n\n  public poolPriceBases(tokenIn: Token, tokenOut: Token): { priceBaseIn: BigNumber; priceBaseOut: BigNumber; } {\n    const virtualIn = this.tokenBalances[this.indexFromToken(tokenIn)].div(10000)\n    return {\n      priceBaseIn: virtualIn,\n      priceBaseOut: this.calculateSwapGivenIn(tokenIn, tokenOut, virtualIn)\n    }\n  }\n\n  public adjustForSwap(amountIn: TokenAmount, amountOut: TokenAmount) {\n    this.tokenBalances[this.indexFromToken(amountIn.token)] = this.tokenBalances[this.indexFromToken(amountIn.token)].add(amountIn.raw)\n    this.tokenBalances[this.indexFromToken(amountOut.token)] = this.tokenBalances[this.indexFromToken(amountOut.token)].sub(amountOut.raw)\n  };\n\n  public getName(): string {\n    return this._name;\n  }\n} \n","import { BigNumber } from \"ethers\";\nimport invariant from \"tiny-invariant\";\nimport { ChainId } from \"../currency\";\nimport { TokenAmount } from \"../fractions\";\nimport { Token } from \"../token\";\nimport { Pool, PoolDictionary } from \"./pool\";\n\nexport interface SwapReturn {\n    amount: TokenAmount;\n    pool: { [id: string]: Pool };\n}\n\n// class that stores data for a Pair to swap through\n// does not store any pricing or calculation functions - these are used through the poolId which is taken from a pool dictionary\n// these pools are then used for pricing\nexport class SwapData {\n\n    public readonly tokenIn: Token\n    public readonly tokenOut: Token\n    public readonly poolRef: string\n    public pool: Pool | null\n\n    // these are for saving the pool price with not using the price class as it would store the token object twice\n    public priceBaseIn: BigNumber | undefined\n    public priceBaseOut: BigNumber | undefined\n\n    constructor(tokenIn: Token, tokenOut: Token, poolRef: string) {\n        // invariant(!tokenIn.equals(tokenOut), 'TOKEN')\n        this.tokenIn = tokenIn\n        this.tokenOut = tokenOut\n        this.poolRef = poolRef\n        this.pool = null;\n\n    }\n\n    public calculateSwapGivenOut(\n        tokenOutAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        return new TokenAmount(this.tokenIn, poolDict[this.poolRef].calculateSwapGivenOut(this.tokenIn, tokenOutAmount.token, tokenOutAmount.raw))\n    }\n\n    public calculateSwapGivenIn(\n        tokenInAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        return new TokenAmount(this.tokenOut, poolDict[this.poolRef].calculateSwapGivenIn(tokenInAmount.token, this.tokenOut, tokenInAmount.raw))\n    }\n\n\n    public calculateSwapGivenOutAmendingPool(\n        tokenOutAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        // const poolDictCopy = { ...poolDict }\n        const refPool: Pool = Object.assign({}, poolDict[this.poolRef]);\n        const amount = new TokenAmount(this.tokenIn, refPool.calculateSwapGivenOut(this.tokenIn, tokenOutAmount.token, tokenOutAmount.raw))\n        poolDict[this.poolRef] = refPool;\n        return amount\n    }\n\n    public calculateSwapGivenInAmendingPool(\n        tokenInAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        // const poolDictCopy = { ...poolDict }\n        const refPool: Pool = Object.assign({}, poolDict[this.poolRef]);\n        const amount = new TokenAmount(this.tokenOut, refPool.calculateSwapGivenIn(tokenInAmount.token, this.tokenOut, tokenInAmount.raw))\n        refPool.adjustForSwap(tokenInAmount, amount)\n        poolDict[this.poolRef] = refPool;\n        return amount\n\n    }\n\n    public get chainId(): ChainId { return this.tokenIn.chainId }\n\n    public involvesToken(token: Token) {\n        return this.tokenIn.address === token.address || this.tokenOut.address === token.address\n    }\n\n    /**\n     *  Calculate the mid price for a pool - if possible\n     * @param tokenIn in token for price\n     * @param tokenOut out/ quote token for price\n     * @param poolDict pool dictionary to fetch the underlying pool from\n     * @returns price object\n     */\n    public poolPrice(poolDict: { [id: string]: Pool }) {\n        return poolDict[this.poolRef].poolPrice(this.tokenIn, this.tokenOut)\n    }\n\n\n    /**\n * @param pool input pool to generate pair from\n * @returns pair route\n */\n    public static singleDataFromPool(tokenIn: Token, tokenOut: Token, pool: Pool): SwapData {\n        invariant(pool.tokens.includes(tokenIn) && pool.tokens.includes(tokenOut))\n        const data = new SwapData(tokenIn, tokenOut, pool.address)\n        data.pool = pool\n        return data;\n\n    }\n\n    public fetchPoolPrice(poolDict: PoolDictionary) {\n        const { priceBaseIn, priceBaseOut } = poolDict[this.poolRef].poolPriceBases(this.tokenIn, this.tokenOut)\n        this.priceBaseIn = priceBaseIn\n        this.priceBaseOut = priceBaseOut\n    }\n\n    public setPool(pool: Pool) {\n        this.pool = pool;\n    }\n\n}","import { ChainId } from \"../currency\";\nimport { TokenAmount } from \"../fractions\";\nimport { Token } from \"../token\";\nimport { Pool } from \"./pool\";\nimport { SwapData } from \"./swapData\";\n\n\n// class that stores data for a Pair to swap through\n// does not store any pricing or calculation functions - these are used through the poolId which is taken from a pool dictionary\n// these pools are then used for pricing\nexport class PairData {\n\n    public readonly token0: Token\n    public readonly token1: Token\n    public readonly poolRef: string\n    constructor(token0: Token, token1: Token, poolRef: string) {\n        this.token0 = token0\n        this.token1 = token1\n        this.poolRef = poolRef\n\n    }\n\n    public calculateSwapGivenOut(\n        tokenOutAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        const tokenIn = tokenOutAmount.token.equals(this.token0) ? this.token1 : this.token0\n        return new TokenAmount(tokenIn, poolDict[this.poolRef].calculateSwapGivenOut(tokenIn, tokenOutAmount.token, tokenOutAmount.raw))\n    }\n\n    public calculateSwapGivenIn(\n        tokenInAmount: TokenAmount,\n        poolDict: { [id: string]: Pool }\n    ): TokenAmount {\n        const tokenOut = tokenInAmount.token.equals(this.token0) ? this.token1 : this.token0\n        return new TokenAmount(tokenOut, poolDict[this.poolRef].calculateSwapGivenIn(tokenInAmount.token, tokenOut, tokenInAmount.raw))\n    }\n\n    public get chainId(): ChainId { return this.token0.chainId }\n\n    public involvesToken(token: Token) {\n        return this.token0.address === token.address || this.token1.address === token.address\n    }\n\n    /**\n     *  Calculate the mid price for a pool - if possible\n     * @param tokenIn in token for price\n     * @param tokenOut out/ quote token for price\n     * @param poolDict pool dictionary to fetch the underlying pool from\n     * @returns price object\n     */\n    public poolPrice(tokenIn: Token, tokenOut: Token, poolDict: { [id: string]: Pool }) {\n        return poolDict[this.poolRef].poolPrice(tokenIn, tokenOut)\n    }\n\n    /**\n     * Pools with n > 2 tokens generate (n^2-n)/2 possible pair routes to trade\n     * The fubnction creates these pair routes\n     * @param pool input pool to generate pairs from\n     * @returns pair routes\n     */\n    public static dataFromPool(pool: Pool): PairData[] {\n        let pairData = []\n\n        for (let i = 0; i < pool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                pairData.push(new PairData(pool.tokens[i], pool.tokens[j], pool.address))\n            }\n        }\n        return pairData\n    }\n\n    /**\n     * @param pool input pool to generate pair from\n     * @returns pair route\n     */\n    public static singleDataFromPool(index0: number, index1: number, pool: Pool): PairData {\n        return new PairData(pool.tokens[index0], pool.tokens[index1], pool.address)\n    }\n\n    /**\n     * Pools with n > 2 tokens generate (n^2-n)/2 possible pair routes to trade\n     * The fubnction creates these pair routes\n     * @param pool input pool to generate pairs from\n     * @returns pair routes\n     */\n    public static dataFromPools(pools: Pool[]): PairData[] {\n        let pairData = []\n        for (let k = 0; k < pools.length; k++) {\n            const pool = pools[k]\n            for (let i = 0; i < pool.tokenBalances.length; i++) {\n                for (let j = 0; j < i; j++) {\n                    pairData.push(new PairData(pool.tokens[i], pool.tokens[j], pool.address))\n                }\n            }\n        }\n        return pairData\n    }\n\n    /**\n     * Converts unordered pair to directioned swap pair\n     * @param tokenIn in token, the other will be tokenOut\n     * @returns SwapData object\n     */\n    public toSwapDataFrom(tokenIn: Token): SwapData {\n        return new SwapData(tokenIn, this.token0.equals(tokenIn) ? this.token1 : this.token0, this.poolRef)\n    }\n\n    /**\n    * Converts unordered pair to directioned swap pair\n    * @param tokenIn in token, the other will be tokenOut\n    * @returns SwapData object\n    */\n    public toSwapDataTo(tokenOut: Token): SwapData {\n        return new SwapData(this.token0.equals(tokenOut) ? this.token1 : this.token0, tokenOut, this.poolRef)\n    }\n\n    /**\n     * Converts unordered swap pairs to swap route\n     * @param pairData input pair array - has to be a route to make sense\n     * @param tokenIn \n     * @returns \n     */\n    public static toSwapArrayFrom(pairData: PairData[], tokenIn: Token): SwapData[] {\n        let swaps = []\n        let currentIn = tokenIn\n        for (let i = 0; i < pairData.length; i++) {\n            const swap = pairData[i].toSwapDataFrom(currentIn)\n            swaps.push(swap)\n            currentIn = swap.tokenOut\n        }\n        return swaps\n    }\n\n    /**\n * Converts unordered swap pairs to swap route\n * @param pairData input pair array - has to be a route to make sense\n * @param tokenIn \n * @returns \n */\n    public static toSwapArrayTo(pairData: PairData[], tokenOut: Token): SwapData[] {\n        let swaps = new Array(pairData.length)\n        let currentOut = tokenOut\n        for (let i = pairData.length - 1; i >= 0; i--) {\n            const swap = pairData[i].toSwapDataTo(currentOut)\n            swaps[i] = swap\n            currentOut = swap.tokenIn\n        }\n        return swaps\n    }\n\n\n}","import { BigNumber } from 'ethers'\nimport { Token } from '../token';\nimport {  AmplifiedWeightedPair } from '../pools/weightedPair';\n\nconst ONE = BigNumber.from(1)\nconst TEN = BigNumber.from(10)\nconst TWO = BigNumber.from(2)\nconst SQRT2x100 = BigNumber.from('141421356237309504880');\nconst ONE_E18 = BigNumber.from('1000000000000000000')\n\n\nexport function sqrrt(a: BigNumber): BigNumber {\n    let c = ONE\n    if (a.gt(3)) {\n        c = a;\n        let b = a.div(TWO).add(ONE);\n        while (b < c) {\n            c = b;\n            b = (a.div(b).add(b)).div(TWO);\n        }\n    } else if (!a.eq(0)) {\n        c = ONE;\n    }\n    return c\n}\n\nexport function getTotalValue(pair: AmplifiedWeightedPair, payoutToken: Token): BigNumber {\n    const reserve0 = pair.reserve0\n    const reserve1 = pair.reserve1\n\n    const [reservesOther, weightPayoutToken, weightOther] = payoutToken.equals(pair.token0)\n        ? [reserve1, pair.weight0, pair.weight1]\n        : [reserve0, pair.weight1, pair.weight0]\n\n    return SQRT2x100.mul(reservesOther.toBigNumber()).div(\n        sqrrt(weightOther.mul(weightOther).add(weightPayoutToken.add(weightPayoutToken))\n        )).div(ONE_E18)\n}\n\n/**\n* - calculates the value in payoutToken of the input LP amount provided\n* @param _pair general pair that has the RequiemSwap interface implemented\n* @param amount_ the amount of LP to price in REQT\n*  - is consistent with the uniswapV2-type case \n*/\nexport function valuation(pair: AmplifiedWeightedPair, totalSupply: BigNumber, amount: BigNumber, payoutToken: Token) {\n    const totalValue = getTotalValue(pair, payoutToken);\n    return totalValue.mul(amount).div(totalSupply);\n}\n\n\n\n// markdown function for bond valuation\nexport function markdown(pair: AmplifiedWeightedPair, payoutToken: Token): BigNumber {\n    const [reservesOther, weightOther, weightPayoutToken] = payoutToken.equals(pair.token0)\n        ? [pair.reserve1.toBigNumber(), BigNumber.from(pair.weight1.toString()), BigNumber.from(pair.weight0.toString())]\n        : [pair.reserve0.toBigNumber(), BigNumber.from(pair.weight0.toString()), BigNumber.from(pair.weight1.toString())];\n\n    // adjusted markdown scaling up the reserve as the trading mechnism allows\n    // higher or lower valuation for payoutToken reserve\n    return reservesOther.add(\n        weightOther.mul(reservesOther).div(weightPayoutToken)).mul(\n            TEN.pow(BigNumber.from((payoutToken.decimals))).div(\n                getTotalValue(pair, payoutToken)\n            )\n        )\n}","\n\nimport { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant';\n\nconst RESOLUTION = BigNumber.from(112);\nconst resPrec = BigNumber.from(2).pow(RESOLUTION)\nconst ZERO = BigNumber.from(0)\n// const Q112 = BigNumber.from('0x10000000000000000000000000000');\n// const Q224 = BigNumber.from('0x100000000000000000000000000000000000000000000000000000000');\n// const LOWER_MASK = BigNumber.from('0xffffffffffffffffffffffffffff'); // decimal of UQ*x112 (lower 112 bits)\n\nexport function decode(x: BigNumber) {\n    return x.div(RESOLUTION);\n}\n\nexport function decode112with18(x: BigNumber) {\n    return x.div(BigNumber.from('5192296858534827'))\n}\n\nexport function fraction(numerator: BigNumber, denominator: BigNumber) {\n\n    invariant(denominator.gt(ZERO), \"FixedPoint::fraction: division by zero\");\n    if (numerator.isZero()) return ZERO;\n\n    // if (numerator.lte(BigNumber.) <= type(uint144).max) {\n    const result = (numerator.mul(resPrec)).div(denominator)\n    //   require(result <= type(uint224).max, \"FixedPoint::fraction: overflow\");\n    return result;\n    // } else {\n    //    return numerator.mul(Q112).div(denominator);\n    // }\n}","import { BigNumber } from 'ethers'\nimport { Token } from '../token';\nimport {  AmplifiedWeightedPair } from '../pools/weightedPair';\nimport { valuation } from './bondCalculator';\n// import JSBI from 'jsbi';\nimport { fraction, decode112with18 } from './fixedPoint';\n\nconst ONE_E16 = BigNumber.from('10000000000000000')\nconst ONE_E18 = BigNumber.from('10000000000000000')\nconst ONE_E9 = BigNumber.from('1000000000')\n\nexport interface BondTerms {\n    controlVariable: BigNumber; // scaling variable for price\n    vesting: BigNumber; // in blocks\n    maxPayout: BigNumber; // in thousandths of a %. i.e. 500 = 0.5%\n    maxDebt: BigNumber;\n}\n\nexport function payoutFor(value: BigNumber, bondPrice: BigNumber): BigNumber {\n    return value.mul(ONE_E18.mul(ONE_E18)).div(bondPrice).div(ONE_E18)\n}\n\n\nexport function fullPayoutFor(\n    pair: AmplifiedWeightedPair,\n    currentDebt: BigNumber,\n    totalSupply: BigNumber,\n    amount: BigNumber,\n    payoutToken: Token,\n    terms: BondTerms\n): BigNumber {\n    const value = valuation(pair, totalSupply, amount, payoutToken)\n    const bondPrice_ = bondPrice(terms.controlVariable, totalSupply, currentDebt)\n    return payoutFor(value, bondPrice_)\n}\n\n\n/**\n *  @notice calculate current ratio of debt to REQT supply\n *  @return debtRatio_ uint\n */\nexport function debtRatio(totalSupply: BigNumber, currentDebt: BigNumber): BigNumber {\n\n    return decode112with18(fraction(currentDebt.mul(ONE_E9), totalSupply)).div(\n        ONE_E18);\n}\n\n\n/**\n *  @notice calculate current bond premium\n *  @return price_ uint\n */\nexport function bondPrice(controlVariable: BigNumber, totalSupply: BigNumber, currentDebt: BigNumber): BigNumber {\n    let price_ = (controlVariable.mul(debtRatio(totalSupply, currentDebt)).add(ONE_E18)).div(ONE_E16);\n    return price_\n}\n\n\n/**\n *  @notice calculate current bond premium\n *  @return price_ uint\n */\nexport function bondPriceUsingDebtRatio(controlVariable: BigNumber, debtRatio: BigNumber): BigNumber {\n    return controlVariable.mul(debtRatio).div(ONE_E18);\n\n}\n\nexport function fullPayoutForUsingDebtRatio(\n    pair: AmplifiedWeightedPair,\n    debtRatio: BigNumber,\n    totalSupply: BigNumber,\n    amount: BigNumber,\n    payoutToken: Token,\n    terms: BondTerms\n): BigNumber {\n    const value = valuation(pair, totalSupply, amount, payoutToken)\n    const bondPrice_ = bondPriceUsingDebtRatio(terms.controlVariable, debtRatio)\n    return payoutFor(value, bondPrice_)\n}","import invariant from 'tiny-invariant'\nimport { Pool, PoolDictionary } from './pools/pool'\nimport { ChainId, Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Price } from './fractions/price'\nimport { PairData } from './pools/pairData'\n\n\n/**\n * \n * @param pools pools to generate pairData with, i.e. a 3-Pool generating the respective 6 pairs\n * @returns an array of the pairData\n */\nexport function pairDataFromPools(pools: Pool[]): PairData[] {\n  let pairData = PairData.dataFromPool(pools[0])\n  for (let i = 1; i < pools.length; i++) {\n    pairData = pairData.concat(PairData.dataFromPool(pools[i]))\n  }\n\n  return pairData\n}\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class Route {\n  public readonly pairData: PairData[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(poolDict: PoolDictionary, pairData: PairData[], input: Currency, output?: Currency) {\n    invariant(pairData.length > 0, 'pairData')\n\n    invariant(\n      (input instanceof Token && pairData[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairData[0].chainId] && pairData[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairData[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairData[pairData.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairData[0].chainId] && pairData[pairData.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairData[0].chainId])),\n      'OUTPUT'\n    )\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairData[0].chainId]]\n    for (const [i, pool] of pairData.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pool.token0) || currentInput.equals(pool.token1), 'PATH')\n      const output = currentInput.equals(pool.token0) ? pool.token1 : pool.token0\n      path.push(output)\n    }\n\n    this.pairData = pairData\n    this.path = path\n    this.midPrice = Price.fromRoute(this, poolDict)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairData[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ONE, ZERO } from '../constants'\n// import { sortedInsert } from '../helperUtils'\nimport { ChainId, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { currencyEquals, WRAPPED_NETWORK_TOKENS } from './token'\nimport {\n  PoolDictionary\n} from './pools/pool'\nimport { SwapRoute } from './swapRoute'\nimport * as _ from \"lodash\";\n// import { SwapRoute } from './swapRoute'\n// import { SwapData } from './pools/swapData'\n\nexport enum SwapType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n// function computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n//   const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// function computePriceImpactWeightedPair(pair: WeightedPair, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n//   const artificialMidPrice = new Price(\n//     inputAmount.currency,\n//     outputAmount.currency,\n//     pair.reserveOf(wrappedCurrency(inputAmount.currency, pair.chainId)).raw,\n//     pair.reserveOf(wrappedCurrency(outputAmount.currency, pair.chainId)).raw)\n//   const exactQuote = artificialMidPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Swap, b: Swap) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // // consider lowest slippage next, since these are less likely to fail\n  // if (a.priceImpact.lessThan(b.priceImpact)) {\n  //   return -1\n  // } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n  //   return 1\n  // }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Swap {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: SwapRoute\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: SwapType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly swapAmounts: TokenAmount[]\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: TokenAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: TokenAmount\n\n  public readonly isValid: boolean\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  // public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: SwapRoute, amountIn: TokenAmount, poolDict: PoolDictionary): Swap {\n    return new Swap(route, amountIn, SwapType.EXACT_INPUT, poolDict)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: SwapRoute, amountOut: TokenAmount, poolDict: PoolDictionary): Swap {\n    return new Swap(route, amountOut, SwapType.EXACT_OUTPUT, poolDict)\n  }\n\n  public constructor(route: SwapRoute, amount: TokenAmount, tradeType: SwapType, poolDict: PoolDictionary) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    let _isValid = true\n    if (tradeType === SwapType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      let poolDictCopy: PoolDictionary = _.cloneDeep(poolDict);\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.swapData[i]\n        try {\n          const outputAmount = pair.calculateSwapGivenIn(amounts[i], poolDictCopy);\n          // clone pool and adjust it for the swapped amount\n          const pool = _.cloneDeep(poolDictCopy[pair.poolRef]);\n          pool.adjustForSwap(amounts[i], outputAmount)\n          // assign to cloned pool\n          poolDictCopy[pair.poolRef] = pool;\n          amounts[i + 1] = outputAmount;\n        } catch {\n          _isValid = false\n          break;\n        }\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      let poolDictCopy: PoolDictionary = _.cloneDeep(poolDict);\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.swapData[i - 1]\n        try {\n          const inputAmount = pair.calculateSwapGivenOut(amounts[i], poolDictCopy)\n          // clone pool and adjust it for the swapped amount\n          const pool = _.cloneDeep(poolDictCopy[pair.poolRef]);\n          pool.adjustForSwap(inputAmount, amounts[i])\n          // assign to cloned pool\n          poolDictCopy[pair.poolRef] = pool;\n          amounts[i - 1] = inputAmount\n        } catch {\n          _isValid = false\n          break;\n        }\n      }\n    }\n    this.isValid = _isValid\n    this.route = route\n    this.tradeType = tradeType\n    this.swapAmounts = amounts\n    if (this.isValid) {\n      this.inputAmount = tradeType === SwapType.EXACT_INPUT ? amount : amounts[0]\n      this.outputAmount = tradeType === SwapType.EXACT_OUTPUT ? amount : amounts[amounts.length - 1]\n    } else { // default\n      this.inputAmount = tradeType === SwapType.EXACT_INPUT ? amount : new TokenAmount(this.route.swapData[0].tokenIn, '0')\n      this.outputAmount = tradeType === SwapType.EXACT_OUTPUT ? amount : new TokenAmount(this.route.swapData[this.route.swapData.length - 1].tokenIn, '0')\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    // this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === SwapType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === SwapType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n    }\n  }\n  /**\n   * \n   * @param swapRoutes input routes - should already not include duplicates\n   * @param swapType determines in which direction the swap will be calculated\n   * @param poolDict dictionary used to price the trade routes\n   * @returns trades in an array\n   */\n  public static PriceRoutes(swapRoutes: SwapRoute[], amount: TokenAmount, swapType: SwapType, poolDict: PoolDictionary): Swap[] {\n    const swaps: Swap[] = []\n    for (let i = 0; i < swapRoutes.length; i++) {\n      const swap = new Swap(swapRoutes[i], amount, swapType, poolDict)\n      if (swap.isValid)\n        swaps.push(swap)\n    }\n    if (swapType === SwapType.EXACT_INPUT)\n      return swaps.sort((a, b) => (a.outputAmount.raw.lt(b.outputAmount.raw) ? 1 : -1))\n    else\n      return swaps.filter(s => Swap.validateRouteForExactOut(s.route)).sort((a, b) => (a.inputAmount.raw.gt(b.inputAmount.raw)) ? 1 : -1)\n  }\n\n  /**\n   * @notice the solidity router cannot calculate exact out swaps whewn routing twice through the same pool\n   * -> this function returns false if the route is of that kind\n   * @param route \n   * @returns \n   */\n  public static validateRouteForExactOut(route: SwapRoute): boolean {\n    const refs = route.swapData.map(sd => sd.poolRef)\n    return (new Set(refs)).size === refs.length;\n  }\n\n}\n\n\n\n\n\n\n\n","import { ChainId } from './currency'\nimport { Token } from './token'\nimport { SwapData } from './pools/swapData'\n\n\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class SwapRoute {\n  public readonly swapData: SwapData[]\n  public readonly path: Token[]\n  public readonly input: Token\n  public readonly output: Token\n  public readonly identifier: string\n  // public readonly midPrice: Price\n\n  public constructor(swapData: SwapData[]) {\n\n    const path: Token[] = [swapData[0].tokenIn]\n\n    // it can happen that the pool is traded through consecutively, we want to remove this case \n    const swapDataAggregated = []\n    for (let i = 0; i < swapData.length; i++) {\n      let currentSwap = swapData[i]\n      const tokenIn = currentSwap.tokenIn\n      let relevantOut = currentSwap.tokenOut\n      for (let j = i + 1; j < swapData.length; j++) {\n        if (swapData[j].poolRef === currentSwap.poolRef) {\n          currentSwap = swapData[j]\n          relevantOut = currentSwap.tokenOut\n          i++\n        } else {\n          break;\n        }\n      }\n      const swap = new SwapData(tokenIn, relevantOut, currentSwap.poolRef)\n      swapDataAggregated.push(swap)\n      // const currentInput = path[i]\n      // invariant(currentInput.equals(currentSwap.tokenIn), 'PATH')\n      const output = currentSwap.tokenOut\n      path.push(output)\n    }\n\n\n    this.swapData = swapDataAggregated\n\n    this.identifier = swapDataAggregated.map(x => x.poolRef).join('') + path.map(p => p.address).join('')\n    this.path = path\n    // this.midPrice = Price.fromRoute(this, poolDict)\n    this.input = path[0]\n    this.output = path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.swapData[0].chainId\n  }\n\n  public equals(otherRoute: SwapRoute): boolean {\n    for (let i = 0; i < this.swapData.length; i++) {\n      if (!this.swapData[i].tokenIn.equals(otherRoute.swapData[i].tokenIn) && !this.swapData[i].tokenOut.equals(otherRoute.swapData[i].tokenOut) && !(this.swapData[i].poolRef === otherRoute.swapData[i].poolRef))\n        return false\n    }\n    return true\n  }\n\n  public static cleanRoutes(swapRoutes: SwapRoute[]): SwapRoute[] {\n    var routeIds: string[] = []\n    var routes: SwapRoute[] = []\n    for (var i = 0; i < swapRoutes.length; i++) {\n      if (!routeIds.includes(swapRoutes[i].identifier)) {\n        routeIds.push(swapRoutes[i].identifier)\n        routes.push(swapRoutes[i])\n      }\n    }\n    return routes\n  }\n\n}\n","\n\n// import { SwapData } from \"entities/pools/SwapData\";\n// import { BigNumber } from \"ethers\";\n// import { Pool, PoolDictionary, PoolHops, Token, ZERO } from \".\";\n\nimport { PairData } from \"./entities/pools/pairData\"\nimport { SwapData } from \"./entities/pools/swapData\"\nimport { SwapRoute } from \"./entities/swapRoute\"\nimport invariant from \"tiny-invariant\"\nimport { ChainId, Currency, NETWORK_CCY, Token, WRAPPED_NETWORK_TOKENS } from \"./entities\"\n\n\nexport function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n    if (currency instanceof Token) return currency\n    if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n    invariant(false, 'CURRENCY')\n  }\n\nexport class RouteProvider {\n\n  /**\n  * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  * amount to an output token, making at most `maxHops` hops.\n  * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n  * the amount in among multiple routes.\n  * @param pairs the pairs to consider in finding the best trade\n  * @param currencyAmountIn exact amount of input currency to spend\n  * @param currencyOut the desired currency out\n  * @param maxNumResults maximum number of results to return\n  * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n  * @param currentPairs used in recursion; the current list of pairs\n  * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n  * @param bestTrades used in recursion; the current list of best trades\n  */\n   public static getRouteIteration(\n    pairData: PairData[],\n    tokenIn: Token,\n    tokenOut: Token,\n    maxHops = 3,\n    // used in recursion.\n    lastPool:string='',\n    currentpools: SwapData[] = [],\n    originalCurrencyIn: Token = tokenIn,\n    bestRoutes: SwapRoute[] = []\n  ): SwapRoute[] {\n    invariant(pairData.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalCurrencyIn === tokenIn || currentpools.length > 0, 'INVALID_RECURSION')\nconst relevantPairs = pairData.filter(p=>p.poolRef !== lastPool)\n    for (let i = 0; i < relevantPairs.length; i++) {\n      let pair = relevantPairs[i]\n      // filters for valid connection\n      const inIs0 = pair.token0.equals(tokenIn)\n      if (!inIs0 && !pair.token1.equals(tokenIn)) continue;\n      \n      const tokenOutNew: Token = inIs0 ? pair.token1 : pair.token0\n      \n      let swap:SwapData\n      // const lastSwap:SwapData = currentpools[currentpools.length -1]\n\n      // if(lastSwap?.poolRef === pair.poolRef)\n      // {\n        // swap =  new SwapData(lastSwap.tokenIn, tokenOutNew, pair.poolRef)\n      //   currentpools.splice(currentpools.length -1,1)\n      // } else\n      // {\n        swap = new SwapData(tokenIn, tokenOutNew, pair.poolRef)\n      // }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (tokenOutNew.equals(tokenOut)) {\n        bestRoutes.push(new SwapRoute([...currentpools, swap]))\n      } else if (maxHops > 1 && relevantPairs.length > 1) {\n        // const poolsExcludingThispool = pairData.slice(0, i).concat(pairData.slice(i + 1, pairData.length)) // pairData.filter(data => data.poolRef !== pair.poolRef)\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        RouteProvider.getRouteIteration(\n          // poolsExcludingThispool,\n          pairData,\n          tokenOutNew,\n          tokenOut,\n          maxHops - 1,\n          pair.poolRef,\n          [...currentpools, swap],\n          originalCurrencyIn,\n          bestRoutes\n        )\n      }\n\n    }\n    return bestRoutes\n  }\n\n  public static getRoutes(\n    pairData: PairData[],\n    currencyIn: Token,\n    currencyOut: Token,\n    maxHops = 3\n  ): SwapRoute[] {\n    return this.getRouteIteration(\n      pairData,\n      currencyIn,\n      currencyOut,\n      maxHops,\n      '',\n      [],\n      currencyIn,\n      []\n    )\n  }\n}\n\n\n// export enum SwapTypes {\n//     SwapExactIn,\n//     SwapExactOut,\n// }\n\n// export interface SwapOptions {\n//     gasPrice: BigNumber;\n//     swapGas: BigNumber;\n//     timestamp: number;\n//     maxPools: number;\n//     poolTypeFilter: PoolFilter;\n//     forceRefresh: boolean;\n// }\n\n\n// export enum PoolFilter {\n//     All = 'All',\n//     Weighted = 'Weighted',\n//     Stable = 'Stable',\n//     MetaStable = 'MetaStable',\n//     LBP = 'LiquidityBootstrapping',\n//     Investment = 'Investment',\n//     Element = 'Element',\n//     AaveLinear = 'AaveLinear',\n//     StablePhantom = 'StablePhantom',\n//     ERC4626Linear = 'ERC4626Linear',\n// }\n\n\n// /*\n// The purpose of this function is to build dictionaries of direct pools \n// and plausible hop pools.\n// */\n// export function filterPoolsOfInterest(\n//     allPools: PoolDictionary,\n//     tokenIn: Token,\n//     tokenOut: Token,\n//     maxPools: number\n// ): [PoolDictionary, PoolHops, PoolHops] {\n//     const directPools: PoolDictionary = {};\n//     const hopsIn: PoolHops = {};\n//     const hopsOut: PoolHops = {};\n\n//     Object.keys(allPools).forEach((id) => {\n//         const pool = allPools[id];\n//         const tokenListSet = new Set(pool.tokens);\n//         const containsTokenIn = tokenListSet.has(tokenIn);\n//         const containsTokenOut = tokenListSet.has(tokenOut);\n\n//         // This is a direct pool as has both tokenIn and tokenOut\n//         if (containsTokenIn && containsTokenOut) {\n//             directPools[pool.address] = pool;\n//             return;\n//         }\n\n//         if (maxPools > 1) {\n//             if (containsTokenIn && !containsTokenOut) {\n//                 for (const hopToken of tokenListSet) {\n//                     if (!hopsIn[hopToken.address]) hopsIn[hopToken.address] = new Set([]);\n//                     hopsIn[hopToken.address].add(pool.address);\n//                 }\n//             } else if (!containsTokenIn && containsTokenOut) {\n//                 for (const hopToken of [...tokenListSet]) {\n//                     if (!hopsOut[hopToken.address]) hopsOut[hopToken.address] = new Set([]);\n//                     hopsOut[hopToken.address].add(pool.address);\n//                 }\n//             }\n//         }\n//     });\n//     return [directPools, hopsIn, hopsOut];\n// }\n\n\n\n// export function searchConnectionsTo(\n//     token: Token,\n//     poolsDict: { [id: string]: Pool },\n//     toToken: Token\n//   ): Path[] {\n//     // this assumes that every pool in poolsDict contains toToken\n//     const connections: Path[] = [];\n//     for (const id in poolsDict) {\n//       const pool = poolsDict[id];\n//       if (pool.involvesToken(token)) {\n//         const connection = createPath([token, toToken], [pool]);\n//         connections.push(connection);\n//       }\n//     }\n//     return connections;\n//   }\n  \n//   export interface Path {\n//     id: string; // pool address if direct path, contactenation of pool addresses if multihop\n//     swaps: Swap[];\n//   }\n  \n//   export interface Swap {\n//     pool: string;\n//     tokenIn: Token;\n//     tokenOut: Token;\n//     swapAmount?: BigNumber;\n//   }\n  \n//   // Creates a path with pools.length hops\n//   // i.e. tokens[0]>[Pool0]>tokens[1]>[Pool1]>tokens[2]>[Pool2]>tokens[3]\n//   export function createPath(tokens: Token[], pools: Pool[]): Path {\n//     let tI: Token, tO: Token;\n//     const swaps: Swap[] = [];\n//     // const poolPairData: PairData[] = [];\n//     let id = '';\n  \n//     for (let i = 0; i < pools.length; i++) {\n//       tI = tokens[i];\n//       tO = tokens[i + 1];\n//       // const poolPair = pools[i].parsePoolPairData(tI, tO);\n//       // poolPairData.push(poolPair);\n  \n//       const swap: Swap = {\n//         pool: pools[i].address,\n//         tokenIn: tI,\n//         tokenOut: tO,\n//       };\n  \n//       swaps.push(swap);\n//     }\n  \n//     const path: Path = {\n//       id,\n//       swaps,\n//     };\n  \n//     return path;\n//   }\n  \n  \n  \n\n\n// export function producePaths(\n//     tokenIn: Token,\n//     tokenOut: Token,\n//     directPools: PoolDictionary,\n//     hopsIn: PoolHops,\n//     hopsOut: PoolHops,\n//     pools: PoolDictionary\n// ): Path[] {\n//     const paths: Path[] = [];\n\n//     // Create direct paths\n//     for (const id in directPools) {\n//         const path = createPath([tokenIn, tokenOut], [pools[id]]);\n//         paths.push(path);\n//     }\n\n//     for (const hopToken in hopsIn) {\n//         if (hopsOut[hopToken]) {\n//             let highestNormalizedLiquidityFirst = ZERO; // Aux variable to find pool with most liquidity for pair (tokenIn -> hopToken)\n//             let highestNormalizedLiquidityFirstPoolId: string | undefined; // Aux variable to find pool with most liquidity for pair (tokenIn -> hopToken)\n//             let highestNormalizedLiquiditySecond = ZERO; // Aux variable to find pool with most liquidity for pair (hopToken -> tokenOut)\n//             let highestNormalizedLiquiditySecondPoolId: string | undefined; // Aux variable to find pool with most liquidity for pair (hopToken -> tokenOut)\n//             for (const poolInId of [...hopsIn[hopToken]]) {\n//                 const poolIn = pools[poolInId.address];\n//                 const poolPairData = SwapData.singleDataFromPool(\n//                     tokenIn,\n//                     hopToken,\n//                     poolIn\n//                 );\n     \n//                 // Cannot be strictly greater otherwise highestNormalizedLiquidityPoolId = 0 if hopTokens[i] balance is 0 in this pool.\n//                 if (\n//                     normalizedLiquidity.isGreaterThanOrEqualTo(\n//                         highestNormalizedLiquidityFirst\n//                     )\n//                 ) {\n//                     highestNormalizedLiquidityFirst = normalizedLiquidity;\n//                     highestNormalizedLiquidityFirstPoolId = poolIn.id;\n//                 }\n//             }\n//             for (const poolOutId of [...hopsOut[hopToken]]) {\n//                 const poolOut = pools[poolOutId.address];\n//                 const poolPairData = poolOut.parsePoolPairData(\n//                     hopToken,\n//                     tokenOut\n//                 );\n//                 const normalizedLiquidity =\n//                     poolOut.getNormalizedLiquidity(poolPairData);\n//                 // Cannot be strictly greater otherwise highestNormalizedLiquidityPoolId = 0 if hopTokens[i] balance is 0 in this pool.\n//                 if (\n//                     normalizedLiquidity.isGreaterThanOrEqualTo(\n//                         highestNormalizedLiquiditySecond\n//                     )\n//                 ) {\n//                     highestNormalizedLiquiditySecond = normalizedLiquidity;\n//                     highestNormalizedLiquiditySecondPoolId = poolOut.address;\n//                 }\n//             }\n//             if (\n//                 highestNormalizedLiquidityFirstPoolId &&\n//                 highestNormalizedLiquiditySecondPoolId\n//             ) {\n//                 const path = createPath(\n//                     [tokenIn, hopToken, tokenOut],\n//                     [\n//                         pools[highestNormalizedLiquidityFirstPoolId],\n//                         pools[highestNormalizedLiquiditySecondPoolId],\n//                     ]\n//                 );\n//                 paths.push(path);\n//             }\n//         }\n//     }\n//     return paths;\n// }\n\n\n// export class RouteProvider {\n//     cache: Record<string, { paths: Path[] }> = {};\n\n//     // constructor(private readonly config: SorConfig) {}\n\n//     /**\n//      * Given a list of pools and a desired input/output, returns a set of possible paths to route through\n//      */\n//     getCandidatePaths(\n//         tokenIn: Token,\n//         tokenOut: Token,\n//         swapType: SwapTypes,\n//         poolsAllDict: PoolDictionary,\n//         swapOptions: SwapOptions\n//     ): Path[] {\n//         if (!poolsAllDict) return [];\n\n//         // If token pair has been processed before that info can be reused to speed up execution\n//         const cache =\n//             this.cache[\n//             `${tokenIn.address}${tokenOut.address}${swapType}${swapOptions.timestamp}`\n//             ];\n\n//         // forceRefresh can be set to force fresh processing of paths/prices\n//         if (!swapOptions.forceRefresh && !!cache) {\n//             // Using pre-processed data from cache\n//             return cache.paths;\n//         }\n\n//         const [directPools, hopsIn, hopsOut] = filterPoolsOfInterest(\n//             poolsAllDict,\n//             tokenIn,\n//             tokenOut,\n//             swapOptions.maxPools\n//         );\n\n//         const pathData = producePaths(\n//             tokenIn,\n//             tokenOut,\n//             directPools,\n//             hopsIn,\n//             hopsOut,\n//             poolsAllDict\n//         );\n\n//         const boostedPaths = getBoostedPaths(\n//             tokenIn,\n//             tokenOut,\n//             poolsAllDict,\n//             this.config\n//         );\n\n//         const pathsUsingStaBal = getPathsUsingStaBalPool(\n//             tokenIn,\n//             tokenOut,\n//             poolsAllDict,\n//             poolsAllDict,\n//             this.config\n//         );\n\n//         const combinedPathData = pathData\n//             .concat(...boostedPaths)\n//             .concat(...pathsUsingStaBal);\n//         const [paths] = calculatePathLimits(combinedPathData, swapType);\n\n//         this.cache[`${tokenIn}${tokenOut}${swapType}${swapOptions.timestamp}`] =\n//         {\n//             paths: paths,\n//         };\n\n//         return paths;\n//     }\n\n//     /**\n//      * Given a pool dictionary and a desired input/output, returns a set of possible paths to route through.\n//      * @param {string} tokenIn - Address of tokenIn\n//      * @param {string} tokenOut - Address of tokenOut\n//      * @param {SwapTypes} swapType - SwapExactIn where the amount of tokens in (sent to the Pool) is known or SwapExactOut where the amount of tokens out (received from the Pool) is known.\n//      * @param {PoolDictionary} poolsAllDict - Dictionary of pools.\n//      * @param {number }maxPools - Maximum number of pools to hop through.\n//      * @returns {NewPath[]} Array of possible paths sorted by liquidity.\n//      */\n//     getCandidatePathsFromDict(\n//         tokenIn: string,\n//         tokenOut: string,\n//         swapType: SwapTypes,\n//         poolsAllDict: PoolDictionary,\n//         maxPools: number\n//     ): NewPath[] {\n//         if (Object.keys(poolsAllDict).length === 0) return [];\n\n//         const [directPools, hopsIn, hopsOut] = filterPoolsOfInterest(\n//             poolsAllDict,\n//             tokenIn,\n//             tokenOut,\n//             maxPools\n//         );\n\n//         const pathData = producePaths(\n//             tokenIn,\n//             tokenOut,\n//             directPools,\n//             hopsIn,\n//             hopsOut,\n//             poolsAllDict\n//         );\n\n//         const boostedPaths = getBoostedPaths(\n//             tokenIn,\n//             tokenOut,\n//             poolsAllDict,\n//             this.config\n//         );\n\n//         const combinedPathData = pathData.concat(...boostedPaths);\n//         const [paths] = calculatePathLimits(combinedPathData, swapType);\n//         return paths;\n//     }\n// }\n","\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './helperUtils'\nimport { CurrencyAmount, Percent, Swap, SwapType } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface SwapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n\n  /**\n   * Checks whether the networkccy is used in in- or output: helps us to avoid checks in route calculations\n   */\n  etherIn: boolean\n  etherOut: boolean\n}\n\nexport interface SwapOptionsDeadline extends Omit<SwapOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return currencyAmount.raw.toHexString()\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class SwapRouter {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Swap, options: SwapOptions | SwapOptionsDeadline): SwapParameters {\n    const etherIn = options.etherIn\n    const etherOut = options.etherOut\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case SwapType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case SwapType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = trade.route.path.map(token => token.address)\n      const pairData = trade.route.swapData.map(p => p.poolRef)\n\n      switch (trade.tradeType) {\n        case SwapType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'onSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pairData, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory pools, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pairData, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapExactTokensForTokens'\n            // function onSwapExactTokensForTokens(\n            //   address[] memory pools,\n            //   address[] memory tokens,\n            //   uint256 amountIn,\n            //   uint256 amountOutMin,\n            //   address to,\n            //   uint256 deadline\n            args = [pairData, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case SwapType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'onSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory pools, uint256 amountOut, uint256 deadline )\n            args = [pairData, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory pools,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [pairData, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory pools, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [pairData, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["TradeType","FACTORY_ADDRESS","WEIGHTED_FACTORY_ADDRESS","INIT_CODE_HASH","INIT_CODE_HASH_WEIGHTED","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","BigNumber","from","ZERO","ONE","TWO","THREE","FIVE","TEN","TENK","_100","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","gte","invariant","lte","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","gt","div","add","lt","eq","Currency","chainId","decimals","symbol","ChainId","NETWORK_CCY","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","OASIS_MAINNET","OASIS_TESTNET","QUARKCHAIN_DEV_S0","Token","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","Rounding","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","mul","subtract","sub","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toSignificantDigits","decimalPlaces","toFixed","DP","RM","mod","_100_PERCENT","Percent","CurrencyAmount","currency","amount","parsedAmount","pow","networkCCYAmount","raw","toExact","toBigNumber","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","poolDict","prices","pairData","entries","i","pool","price","poolPrice","path","push","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","ONE_18","ONE_20","ONE_36","LN_36_LOWER_BOUND","LN_36_UPPER_BOUND","x0","a0","x1","a1","x2","a2","x3","a3","x4","a4","x5","a5","x6","a6","x7","a7","x8","a8","x9","a9","x10","a10","x11","a11","x_int256","y_int256","logx_times_y","ln_36_x","_ln_36","_ln","exp","firstAN","product","seriesSum","term","log","arg","base","logBase","logArg","ln","a","sum","z_squared","num","MAX_POW_RELATIVE_ERROR","MIN_POW_BASE_FREE_EXPONENT","mulDown","b","mulUp","divDown","aInflated","divUp","powDown","maxError","powUp","complement","max","min","_MAX_IN_RATIO","_MAX_OUT_RATIO","_MAX_INVARIANT_RATIO","_MIN_INVARIANT_RATIO","_calculateInvariant","normalizedWeights","balances","_invariant","length","_calcOutGivenIn","balanceIn","weightIn","balanceOut","weightOut","amountIn","exponent","power","_calcInGivenOut","amountOut","ratio","_calcLpOutGivenExactTokensIn","amountsIn","lpTotalSupply","swapFeePercentage","balanceRatiosWithFee","invariantRatioWithFees","_computeJoinExactTokensInInvariantRatio","invariantRatio","swapFees","lpOut","amountInWithoutFee","nonTaxableAmount","taxableAmount","swapFee","balanceRatio","_calcTokenInGivenExactLpOut","balance","normalizedWeight","lpAmountOut","taxablePercentage","taxableAmountPlusFees","_calcAllTokensInGivenExactLpOut","totalBPT","lpRatio","_calcLpInGivenExactTokensOut","amountsOut","balanceRatiosWithoutFee","Array","invariantRatioWithoutFees","_computeExitExactTokensOutInvariantRatio","lpIn","amountOutWithFee","_calcTokenOutGivenExactLpIn","lpAmountIn","amountOutWithoutFee","_calcTokensOutGivenExactLpIn","_calcDueTokenProtocolSwapFeeAmount","previousInvariant","currentInvariant","protocolSwapFeePercentage","tokenAccruedFees","FEE_DENOMINATOR","calculateRemoveLiquidityOneTokenExactIn","self","outIndex","lpAmount","lpSupply","tokenBalances","tokenMultipliers","fee","calculateRemoveLiquidityExactIn","_xp","calculateTokenAmount","amounts","deposit","lpTokenAmount","calculateSwapGivenIn","inIndex","amountInWithFee","calculateSwapGivenOut","rates","result","_256","_128","MIN_PRECISION","MAX_PRECISION","FIXED_1","FIXED_2","MAX_NUM","LN2_NUMERATOR","LN2_DENOMINATOR","OPT_LOG_MAX_VAL","OPT_EXP_MAX_VAL","maxExpArray","leftShift","shift","signedRightShift","_baseN","_baseD","_expN","_expD","baseLog","optimalLog","generalLog","baseLogTimesExp","optimalExp","findPositionInMaxExpArray","generalExp","floorLog2","_n","res","s","or","count","w","and","isZero","_x","_precision","xi","lo","hi","mid","getAmountOut","reserveIn","reserveOut","tokenWeightIn","tokenWeightOut","baseN","temp1","temp2","getAmountIn","baseD","baseReserveIn","WeightedSwapStorage","adminFee","mock","StableSwapStorage","initialA","futureA","initialATime","futureATime","lpAddress","dummy","Pool","involvesToken","keys","tokens","tokenFromIndex","index","indexFromToken","getBalances","map","_","reserveOf","setBalanceValueByIndex","newBalance","getTokenAmounts","t","setTokenBalances","subtractBalanceValue","tokenAmount","newBalances","_name","PoolType","PAIR_ADDRESS_CACHE","PAIR_HASH","AmplifiedWeightedPair","virtualReserves","weightA","amp","ampBPS","weights","liquidityToken","ethers","utils","type","token0","token1","weight0","join","tokenA","tokenB","undefined","getCreate2Address","keccak256","pack","fromBigIntish","getAddressForRouter","tokenIn","token0Price","token1Price","poolPriceBases","priceBaseIn","priceBaseOut","priceOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","weightOf","weight1","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","tokenAmounts","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","priceRatioOf","token0PriceRaw","token1PriceRaw","tokenOut","inAmount","inputReserve","outputReserve","inputWeight","outputWeight","outAmount","getOutputAmount","inputAmount","outputAmount","getInputAmount","console","adjustForSwap","clone","fee0","getName","String","WeightedPool","poolAddress","swapStorage","values","constants","AddressZero","calculateSwapViaPing","inToken","outToken","provider","Contract","Interface","weightedPoolABI","swap","toBigInt","calculateRemoveLiquidity","amountLp","calculateRemoveLiquidityOneToken","getLiquidityAmount","userBalances","setSwapStorage","setLpTotalSupply","setBalanceValue","addBalanceValue","MAX_ITERATION","A_PRECISION","_getAPrecise","blockTimestamp","_sumOf","_distance","_getD","xp","nCoins","Dprev","D","Ann","D_P","j","_getY","inBalance","normalizedBalances","c","lastY","newInBalance","outBalance","_fee","_amountOutInclFee","newOutBalance","_calculateRemoveLiquidity","currentWithdrawFee","feeAdjustedAmount","_getYD","A","yPrev","_feePerToken","_calculateRemoveLiquidityOneToken","D0","D1","newY","reducedXP","expectedDx","dy","_calculateTokenAmount","diff","StablePool","_A","StableSwap","calculateSwap","setBlockTimestamp","toNumber","virtualIn","feeToSet","SwapData","poolRef","tokenOutAmount","tokenInAmount","calculateSwapGivenOutAmendingPool","refPool","assign","calculateSwapGivenInAmendingPool","singleDataFromPool","includes","data","fetchPoolPrice","setPool","PairData","dataFromPool","index0","index1","dataFromPools","pools","k","toSwapDataFrom","toSwapDataTo","toSwapArrayFrom","swaps","currentIn","toSwapArrayTo","currentOut","SQRT2x100","ONE_E18","sqrrt","getTotalValue","pair","payoutToken","reservesOther","weightPayoutToken","weightOther","valuation","totalValue","markdown","RESOLUTION","resPrec","decode","decode112with18","ONE_E16","ONE_E9","payoutFor","bondPrice","fullPayoutFor","currentDebt","terms","bondPrice_","controlVariable","debtRatio","price_","bondPriceUsingDebtRatio","fullPayoutForUsingDebtRatio","pairDataFromPools","concat","Route","input","output","currentInput","midPrice","SwapType","inputOutputComparator","tradeComparator","ioComp","wrappedAmount","Swap","tradeType","_isValid","EXACT_INPUT","poolDictCopy","swapData","isValid","swapAmounts","EXACT_OUTPUT","executionPrice","exactIn","exactOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","PriceRoutes","swapRoutes","swapType","sort","filter","validateRouteForExactOut","refs","sd","Set","size","SwapRoute","swapDataAggregated","currentSwap","relevantOut","identifier","p","otherRoute","cleanRoutes","routeIds","routes","wrappedCurrency","RouteProvider","getRouteIteration","maxHops","lastPool","currentpools","originalCurrencyIn","bestRoutes","relevantPairs","inIs0","tokenOutNew","getRoutes","currencyIn","currencyOut","toHex","toHexString","ZERO_HEX","SwapRouter","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","methodName","args","deadline","Math","floor","Date","getTime","multiSwap","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAC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"}