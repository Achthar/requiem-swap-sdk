{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/entities/fractions/percent.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts","../src/entities/stables.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts","../src/stablesFetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x9067e2C2bf8531283AB97C34EaA74599E0004842',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xDf65aC8079A71f5174A35dE3D29e5458d03D5787'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      tokenAmounts[0].token.chainId === 56 ? 'Cake-LP' : 'Requiem-LP',\n      tokenAmounts[0].token.chainId === 56 ? 'Pancake LPs' : 'Requiem LPs'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\n\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp, swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(1)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\n\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount <= totalSupply, \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from '../entities'\nimport { Pair } from '..'\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public readonly tokenBalances: BigNumber[]\n  public readonly _A: BigNumber\n  public readonly swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public readonly blockTimestamp: BigNumber\n\n  public readonly lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      StablePool.getAddress(tokens[0].chainId),\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(-1, '', 1) }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\npublic set setCurrentWithdrawFee(feeToSet:BigNumber){\n  this.currentWithdrawFee = feeToSet\n}\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n\n  public generatePairs(pairs: Pair[]) {\n    let relevantStables: Token[] = []\n    let generatedPairs:Pair[]=[]\n    pairs.forEach(pair => {\n      if (Object.values(this.tokens).includes(pair.token0)) {\n        relevantStables.push(pair.token0)\n      }\n      if (Object.values(this.tokens).includes(pair.token1)) {\n        relevantStables.push(pair.token1)\n      }\n    })\n    if (relevantStables.length === 0) {\n      return []\n    }\n    for (let i = 0; i < relevantStables.length; i++) {\n      for (let j = i + 1; j < relevantStables.length; j++) {\n        //generatedPairs.push(new Pair(relevantStables[i], relevantStables[j]))\n      }\n    }\n    return generatedPairs\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigintIsh,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(this.liquidityToken.address, new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityMinted(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n  /*\n    public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, StablePool] {\n      invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n      if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n        throw new InsufficientReservesError()\n      }\n      const inputReserve = this.reserveOf(inputAmount.token)\n      const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n      const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n      const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n      const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n      const outputAmount = new TokenAmount(\n        inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n        JSBI.divide(numerator, denominator)\n      )\n      if (JSBI.equal(outputAmount.raw, ZERO)) {\n        throw new InsufficientInputAmountError()\n      }\n      return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n  \n    public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n      invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n      if (\n        JSBI.equal(this.reserve0.raw, ZERO) ||\n        JSBI.equal(this.reserve1.raw, ZERO) ||\n        JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n      ) {\n        throw new InsufficientReservesError()\n      }\n  \n      const outputReserve = this.reserveOf(outputAmount.token)\n      const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n      const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n      const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n      const inputAmount = new TokenAmount(\n        outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n        JSBI.add(JSBI.divide(numerator, denominator), ONE)\n      )\n      return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n    }\n  \n    public getLiquidityMinted(\n      totalSupply: TokenAmount,\n      tokenAmountA: TokenAmount,\n      tokenAmountB: TokenAmount\n    ): TokenAmount {\n      invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n      const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n        ? [tokenAmountA, tokenAmountB]\n        : [tokenAmountB, tokenAmountA]\n      invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n  \n      let liquidity: JSBI\n      if (JSBI.equal(totalSupply.raw, ZERO)) {\n        liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n      } else {\n        const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n        const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n        liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n      }\n      if (!JSBI.greaterThan(liquidity, ZERO)) {\n        throw new InsufficientInputAmountError()\n      }\n      return new TokenAmount(this.liquidityToken, liquidity)\n    }\n  \n    public getLiquidityValue(\n      token: Token,\n      totalSupply: TokenAmount,\n      liquidity: TokenAmount,\n      feeOn: boolean = false,\n      kLast?: BigintIsh\n    ): TokenAmount {\n      invariant(this.involvesToken(token), 'TOKEN')\n      invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n      invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n      invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n  \n      let totalSupplyAdjusted: TokenAmount\n      if (!feeOn) {\n        totalSupplyAdjusted = totalSupply\n      } else {\n        invariant(!!kLast, 'K_LAST')\n        const kLastParsed = parseBigintIsh(kLast)\n        if (!JSBI.equal(kLastParsed, ZERO)) {\n          const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n          const rootKLast = sqrt(kLastParsed)\n          if (JSBI.greaterThan(rootK, rootKLast)) {\n            const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n            const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n            const feeLiquidity = JSBI.divide(numerator, denominator)\n            totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n          } else {\n            totalSupplyAdjusted = totalSupply\n          }\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      }\n  \n      return new TokenAmount(\n        token,\n        JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n      )\n    } */\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency, stablePool?: StablePool) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool ?? StablePool.mock()\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n\n  public connectPairs(){\n    \n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new RouteV3(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n    43113: [\n      new Token(ChainId.AVAX_TESTNET, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin'),\n      new Token(ChainId.AVAX_TESTNET, '0x0bE04001Ad4725c697b6c6bD8Bc23d9848992CA0', 6, 'USDT', 'Tether USD'),\n      new Token(ChainId.AVAX_TESTNET, '0x66960440491bCc68BD30B2b0B08fF9e7aB3F9078', 18, 'DAI', 'Dai Stablecoin'),\n      new Token(ChainId.AVAX_TESTNET, '0xCCf7ed44c5A0f3Cb5c9a9B9f765F8D836fb93BA1', 18, 'TUSD', 'True USD'),\n    ]\n  }\n  \n  \n  export const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n    43113: {\n      0: STABLECOINS[43113][0],\n      1: STABLECOINS[43113][1],\n      2: STABLECOINS[43113][2],\n      3: STABLECOINS[43113][3]\n    }\n  }","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Pancake Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Pancake Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Pancake Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","NETWORK_CCY","ETHER","Token","chainId","projectLink","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","MAX_ITERATION","A_PRECISION","FEE_DENOMINATOR","_xp","balances","rates","result","mul","_getAPrecise","blockTimestamp","swapStorage","gte","futureATime","futureA","gt","initialA","sub","initialATime","_sumOf","sum","_distance","_getD","xp","amp","nCoins","eq","Dprev","D","Ann","D_P","j","lte","_getY","inIndex","outIndex","inBalance","normalizedBalances","c","b","lastY","index","calculateSwap","inAmount","tokenMultipliers","newInBalance","outBalance","outAmount","_fee","fee","_calculateRemoveLiquidity","currentWithdrawFee","feeAdjustedAmount","amounts","_getYD","A","s","_x","yPrev","lt","_feePerToken","_calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","expectedDx","dy","_calculateTokenAmount","deposit","newBalances","diff","SwapStorage","adminFee","lpAddress","mock","dummy","StablePool","tokenBalances","_A","lpTotalSupply","values","ethers","constants","AddressZero","res","keys","tokenFromIndex","indexFromToken","getBalances","map","_","generatePairs","relevantStables","generatedPairs","forEach","includes","calculateSwapViaPing","provider","Contract","utils","Interface","StableSwap","swap","toBigInt","calculateRemoveLiquidity","amountLp","calculateRemoveLiquidityOneToken","feeToSet","_100_PERCENT","Percent","RouteV3","input","output","stablePool","every","currentInput","midPrice","connectPairs","computePriceImpact","exactQuote","slippage","inputOutputComparatorV3","a","tradeComparatorV3","ioComp","priceImpact","wrappedAmount","wrappedCurrency","TradeV3","tradeType","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","STABLECOINS","STABLES_INDEX_MAP","Route","inputOutputComparator","tradeComparator","Trade","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","getDefaultProvider","getNetwork","ERC20","then","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","StablesFetcher","fetchStablePoolData","console","log","getTokens","tokenAddresses","indexes"],"mappings":"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"}