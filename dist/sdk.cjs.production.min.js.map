{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/weightedPairCalc.ts","../src/entities/weightedPair.ts","../src/router.ts","../src/fetcher.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/stablesFetcher.ts","../src/routerV3.ts","../src/entities/stables.ts","../src/entities/stablePairWrapper.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\nexport const WEIGHTED_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\nexport const INIT_CODE_HASH_WEIGHTED: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x9067e2C2bf8531283AB97C34EaA74599E0004842',\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xDf65aC8079A71f5174A35dE3D29e5458d03D5787'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const TENK = JSBI.BigInt(10000)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { RouteV3 } from 'entities/routeV3'\nimport { RouteV4 } from 'entities/routeV4'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n// import { Pair } from 'entities'\nimport { StablePairWrapper } from 'entities/stablePairWrapper'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV3(route: RouteV3): Price {\n    const prices: Price[] = []\n    for (const [i, source] of route.sources.entries()) {\n      // if (source.type !== 'Pair') {\n      //   console.log(\"invariant\", (source as StablePairWrapper).status)\n      //   invariant((source as StablePairWrapper).status === 'PRICED', 'NOT PRICED')\n      // }\n      prices.push(\n        route.path[i].equals(source.token0)\n          ? (source.type === 'Pair'\n            ? new Price(source.reserve0.currency, source.reserve1.currency, source.reserve0.raw, source.reserve1.raw)\n            // here we need the recorded prcing bases\n            : new Price(source.reserve0.currency, source.reserve1.currency,\n              (source as StablePairWrapper).pricingBasesIn[0].raw,\n              (source as StablePairWrapper).pricingBasesOut[1].raw))\n          : (source.type === 'Pair' ?\n            new Price(source.reserve1.currency, source.reserve0.currency, source.reserve1.raw, source.reserve0.raw)\n            // pricing base for stablePriceWrapper\n            : new Price(source.reserve1.currency, source.reserve0.currency,\n              (source as StablePairWrapper).pricingBasesIn[1].raw,\n              (source as StablePairWrapper).pricingBasesOut[0].raw))\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV4(route: RouteV4): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      let price: any\n      if (route.path[i].equals(pool.token0)) {\n        switch (pool.type) {\n          case 'Pair': {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency, pool.reserve0.raw, pool.reserve1.raw)\n            break;\n          }\n          // here we need the recorded prcing bases\n          case 'StablePoolWrapper': {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as StablePairWrapper).pricingBasesIn[0].raw,\n              (pool as StablePairWrapper).pricingBasesOut[1].raw)\n            break;\n          }\n          case 'WeightedPair': {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency, pool.reserve0.raw, pool.reserve1.raw)\n            break;\n          }\n        }\n      }\n      else {\n        switch (pool.type) {\n          case 'Pair': {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency, pool.reserve1.raw, pool.reserve0.raw)\n            break;\n          }\n          case 'WeightedPair': {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency, pool.reserve1.raw, pool.reserve0.raw)\n            break;\n          }\n          // pricing base for stablePriceWrapper\n          case 'StablePairWrapper': {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as StablePairWrapper).pricingBasesIn[1].raw,\n              (pool as StablePairWrapper).pricingBasesOut[0].raw)\n            break;\n          }\n        }\n      }\n      prices.push(price)\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { Source } from './source'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair implements Source {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly type: string\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = 'Pair'\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst ZERO = BigNumber.from(0)\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\nconst TENK = BigNumber.from(10000)\nconst _256 = BigNumber.from('256')\nconst _128 = BigNumber.from('128')\nconst MIN_PRECISION = 32;\nconst MAX_PRECISION = 127;\n\nconst FIXED_1 = BigNumber.from('0x080000000000000000000000000000000')\nconst FIXED_2 = BigNumber.from('0x100000000000000000000000000000000')\nconst MAX_NUM = BigNumber.from('0x200000000000000000000000000000000')\n\nconst LN2_NUMERATOR = BigNumber.from('0x3f80fe03f80fe03f80fe03f80fe03f8')\nconst LN2_DENOMINATOR = BigNumber.from('0x5b9de1d10bf4103d647b0955897ba80')\n\nconst OPT_LOG_MAX_VAL = BigNumber.from('0x15bf0a8b1457695355fb8ac404e7a79e3')\nconst OPT_EXP_MAX_VAL = BigNumber.from('0x800000000000000000000000000000000')\n\n// const LAMBERT_CONV_RADIUS = BigNumber.from('0x002f16ac6c59de6f8d5d6f63c1482a7c86')\n// const LAMBERT_POS2_SAMPLE = BigNumber.from('0x0003060c183060c183060c183060c18306')\n// const LAMBERT_POS2_MAXVAL = BigNumber.from('0x01af16ac6c59de6f8d5d6f63c1482a7c80')\n// const LAMBERT_POS3_MAXVAL = BigNumber.from('0x6b22d43e72c326539cceeef8bb48f255ff')\n\n// const MAX_UNF_WEIGHT = BigNumber.from('0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9')\n\nconst maxExpArray = new Array<BigNumber>(128)\nmaxExpArray[32] = BigNumber.from('0x1c35fedd14ffffffffffffffffffffffff')\nmaxExpArray[33] = BigNumber.from('0x1b0ce43b323fffffffffffffffffffffff')\nmaxExpArray[34] = BigNumber.from('0x19f0028ec1ffffffffffffffffffffffff')\nmaxExpArray[35] = BigNumber.from('0x18ded91f0e7fffffffffffffffffffffff')\nmaxExpArray[36] = BigNumber.from('0x17d8ec7f0417ffffffffffffffffffffff')\nmaxExpArray[37] = BigNumber.from('0x16ddc6556cdbffffffffffffffffffffff')\nmaxExpArray[38] = BigNumber.from('0x15ecf52776a1ffffffffffffffffffffff')\nmaxExpArray[39] = BigNumber.from('0x15060c256cb2ffffffffffffffffffffff')\nmaxExpArray[40] = BigNumber.from('0x1428a2f98d72ffffffffffffffffffffff')\nmaxExpArray[41] = BigNumber.from('0x13545598e5c23fffffffffffffffffffff')\nmaxExpArray[42] = BigNumber.from('0x1288c4161ce1dfffffffffffffffffffff')\nmaxExpArray[43] = BigNumber.from('0x11c592761c666fffffffffffffffffffff')\nmaxExpArray[44] = BigNumber.from('0x110a688680a757ffffffffffffffffffff')\nmaxExpArray[45] = BigNumber.from('0x1056f1b5bedf77ffffffffffffffffffff')\nmaxExpArray[46] = BigNumber.from('0x0faadceceeff8bffffffffffffffffffff')\nmaxExpArray[47] = BigNumber.from('0x0f05dc6b27edadffffffffffffffffffff')\nmaxExpArray[48] = BigNumber.from('0x0e67a5a25da4107fffffffffffffffffff')\nmaxExpArray[49] = BigNumber.from('0x0dcff115b14eedffffffffffffffffffff')\nmaxExpArray[50] = BigNumber.from('0x0d3e7a392431239fffffffffffffffffff')\nmaxExpArray[51] = BigNumber.from('0x0cb2ff529eb71e4fffffffffffffffffff')\nmaxExpArray[52] = BigNumber.from('0x0c2d415c3db974afffffffffffffffffff')\nmaxExpArray[53] = BigNumber.from('0x0bad03e7d883f69bffffffffffffffffff')\nmaxExpArray[54] = BigNumber.from('0x0b320d03b2c343d5ffffffffffffffffff')\nmaxExpArray[55] = BigNumber.from('0x0abc25204e02828dffffffffffffffffff')\nmaxExpArray[56] = BigNumber.from('0x0a4b16f74ee4bb207fffffffffffffffff')\nmaxExpArray[57] = BigNumber.from('0x09deaf736ac1f569ffffffffffffffffff')\nmaxExpArray[58] = BigNumber.from('0x0976bd9952c7aa957fffffffffffffffff')\nmaxExpArray[59] = BigNumber.from('0x09131271922eaa606fffffffffffffffff')\nmaxExpArray[60] = BigNumber.from('0x08b380f3558668c46fffffffffffffffff')\nmaxExpArray[61] = BigNumber.from('0x0857ddf0117efa215bffffffffffffffff')\nmaxExpArray[62] = BigNumber.from('0x07ffffffffffffffffffffffffffffffff')\nmaxExpArray[63] = BigNumber.from('0x07abbf6f6abb9d087fffffffffffffffff')\nmaxExpArray[64] = BigNumber.from('0x075af62cbac95f7dfa7fffffffffffffff')\nmaxExpArray[65] = BigNumber.from('0x070d7fb7452e187ac13fffffffffffffff')\nmaxExpArray[66] = BigNumber.from('0x06c3390ecc8af379295fffffffffffffff')\nmaxExpArray[67] = BigNumber.from('0x067c00a3b07ffc01fd6fffffffffffffff')\nmaxExpArray[68] = BigNumber.from('0x0637b647c39cbb9d3d27ffffffffffffff')\nmaxExpArray[69] = BigNumber.from('0x05f63b1fc104dbd39587ffffffffffffff')\nmaxExpArray[70] = BigNumber.from('0x05b771955b36e12f7235ffffffffffffff')\nmaxExpArray[71] = BigNumber.from('0x057b3d49dda84556d6f6ffffffffffffff')\nmaxExpArray[72] = BigNumber.from('0x054183095b2c8ececf30ffffffffffffff')\nmaxExpArray[73] = BigNumber.from('0x050a28be635ca2b888f77fffffffffffff')\nmaxExpArray[74] = BigNumber.from('0x04d5156639708c9db33c3fffffffffffff')\nmaxExpArray[75] = BigNumber.from('0x04a23105873875bd52dfdfffffffffffff')\nmaxExpArray[76] = BigNumber.from('0x0471649d87199aa990756fffffffffffff')\nmaxExpArray[77] = BigNumber.from('0x04429a21a029d4c1457cfbffffffffffff')\nmaxExpArray[78] = BigNumber.from('0x0415bc6d6fb7dd71af2cb3ffffffffffff')\nmaxExpArray[79] = BigNumber.from('0x03eab73b3bbfe282243ce1ffffffffffff')\nmaxExpArray[80] = BigNumber.from('0x03c1771ac9fb6b4c18e229ffffffffffff')\nmaxExpArray[81] = BigNumber.from('0x0399e96897690418f785257fffffffffff')\nmaxExpArray[82] = BigNumber.from('0x0373fc456c53bb779bf0ea9fffffffffff')\nmaxExpArray[83] = BigNumber.from('0x034f9e8e490c48e67e6ab8bfffffffffff')\nmaxExpArray[84] = BigNumber.from('0x032cbfd4a7adc790560b3337ffffffffff')\nmaxExpArray[85] = BigNumber.from('0x030b50570f6e5d2acca94613ffffffffff')\nmaxExpArray[86] = BigNumber.from('0x02eb40f9f620fda6b56c2861ffffffffff')\nmaxExpArray[87] = BigNumber.from('0x02cc8340ecb0d0f520a6af58ffffffffff')\nmaxExpArray[88] = BigNumber.from('0x02af09481380a0a35cf1ba02ffffffffff')\nmaxExpArray[89] = BigNumber.from('0x0292c5bdd3b92ec810287b1b3fffffffff')\nmaxExpArray[90] = BigNumber.from('0x0277abdcdab07d5a77ac6d6b9fffffffff')\nmaxExpArray[91] = BigNumber.from('0x025daf6654b1eaa55fd64df5efffffffff')\nmaxExpArray[92] = BigNumber.from('0x0244c49c648baa98192dce88b7ffffffff')\nmaxExpArray[93] = BigNumber.from('0x022ce03cd5619a311b2471268bffffffff')\nmaxExpArray[94] = BigNumber.from('0x0215f77c045fbe885654a44a0fffffffff')\nmaxExpArray[95] = BigNumber.from('0x01ffffffffffffffffffffffffffffffff')\nmaxExpArray[96] = BigNumber.from('0x01eaefdbdaaee7421fc4d3ede5ffffffff')\nmaxExpArray[97] = BigNumber.from('0x01d6bd8b2eb257df7e8ca57b09bfffffff')\nmaxExpArray[98] = BigNumber.from('0x01c35fedd14b861eb0443f7f133fffffff')\nmaxExpArray[99] = BigNumber.from('0x01b0ce43b322bcde4a56e8ada5afffffff')\nmaxExpArray[100] = BigNumber.from('0x019f0028ec1fff007f5a195a39dfffffff')\nmaxExpArray[101] = BigNumber.from('0x018ded91f0e72ee74f49b15ba527ffffff')\nmaxExpArray[102] = BigNumber.from('0x017d8ec7f04136f4e5615fd41a63ffffff')\nmaxExpArray[103] = BigNumber.from('0x016ddc6556cdb84bdc8d12d22e6fffffff')\nmaxExpArray[104] = BigNumber.from('0x015ecf52776a1155b5bd8395814f7fffff')\nmaxExpArray[105] = BigNumber.from('0x015060c256cb23b3b3cc3754cf40ffffff')\nmaxExpArray[106] = BigNumber.from('0x01428a2f98d728ae223ddab715be3fffff')\nmaxExpArray[107] = BigNumber.from('0x013545598e5c23276ccf0ede68034fffff')\nmaxExpArray[108] = BigNumber.from('0x01288c4161ce1d6f54b7f61081194fffff')\nmaxExpArray[109] = BigNumber.from('0x011c592761c666aa641d5a01a40f17ffff')\nmaxExpArray[110] = BigNumber.from('0x0110a688680a7530515f3e6e6cfdcdffff')\nmaxExpArray[111] = BigNumber.from('0x01056f1b5bedf75c6bcb2ce8aed428ffff')\nmaxExpArray[112] = BigNumber.from('0x00faadceceeff8a0890f3875f008277fff')\nmaxExpArray[113] = BigNumber.from('0x00f05dc6b27edad306388a600f6ba0bfff')\nmaxExpArray[114] = BigNumber.from('0x00e67a5a25da41063de1495d5b18cdbfff')\nmaxExpArray[115] = BigNumber.from('0x00dcff115b14eedde6fc3aa5353f2e4fff')\nmaxExpArray[116] = BigNumber.from('0x00d3e7a3924312399f9aae2e0f868f8fff')\nmaxExpArray[117] = BigNumber.from('0x00cb2ff529eb71e41582cccd5a1ee26fff')\nmaxExpArray[118] = BigNumber.from('0x00c2d415c3db974ab32a51840c0b67edff')\nmaxExpArray[119] = BigNumber.from('0x00bad03e7d883f69ad5b0a186184e06bff')\nmaxExpArray[120] = BigNumber.from('0x00b320d03b2c343d4829abd6075f0cc5ff')\nmaxExpArray[121] = BigNumber.from('0x00abc25204e02828d73c6e80bcdb1a95bf')\nmaxExpArray[122] = BigNumber.from('0x00a4b16f74ee4bb2040a1ec6c15fbbf2df')\nmaxExpArray[123] = BigNumber.from('0x009deaf736ac1f569deb1b5ae3f36c130f')\nmaxExpArray[124] = BigNumber.from('0x00976bd9952c7aa957f5937d790ef65037')\nmaxExpArray[125] = BigNumber.from('0x009131271922eaa6064b73a22d0bd4f2bf')\nmaxExpArray[126] = BigNumber.from('0x008b380f3558668c46c91c49a2f8e967b9')\nmaxExpArray[127] = BigNumber.from('0x00857ddf0117efa215952912839f6473e6')\n\nfunction leftShift(num: BigNumber, shift: BigNumber) {\n    return num.mul(TWO.pow(shift))\n}\n\nfunction signedRightShift(num: BigNumber, shift: BigNumber) {\n    return num.div(TWO.pow(shift))\n}\n\n/**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\nexport function power(\n    _baseN: BigNumber,\n    _baseD: BigNumber,\n    _expN: BigNumber,\n    _expD: BigNumber\n): [BigNumber, number] {\n    invariant(_baseN.gt(_baseD), \"not support _baseN < _baseD\");\n    invariant(_baseN.lt(MAX_NUM))\n\n    let baseLog;\n    let base = (_baseN.mul(FIXED_1)).div(_baseD);\n    if (base.lt(OPT_LOG_MAX_VAL)) {\n        baseLog = optimalLog(base);\n    } else {\n        baseLog = generalLog(base);\n    }\n\n    let baseLogTimesExp = (baseLog.mul(_expN)).div(_expD);\n    if (baseLogTimesExp.lt(OPT_EXP_MAX_VAL)) {\n        return [optimalExp(baseLogTimesExp), MAX_PRECISION]\n    } else {\n        let precision = findPositionInMaxExpArray(baseLogTimesExp);\n        return [generalExp(signedRightShift(baseLogTimesExp, BigNumber.from(MAX_PRECISION - precision)), BigNumber.from(precision)), precision]\n    }\n}\n\n/**\n * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n */\nfunction floorLog2(_n: BigNumber): BigNumber {\n    let res = ZERO;\n    if (_n.lt(_256)) {\n        // At most 8 iterations\n        while (_n.gt(ONE)) {\n            _n = signedRightShift(_n, ONE);\n            res = res.add(ONE);\n        }\n    } else {\n        // Exactly 8 iterations\n        for (let s = _128; s.gt(ZERO); s = signedRightShift(s, ONE)) {\n            if (_n.gt(leftShift(ONE, s))) {\n                _n = signedRightShift(_n, s)\n                res = res.or(s);\n            }\n        }\n    }\n    \n    return res;\n}\n\n/**\n * @dev computes log(x / FIXED_1) * FIXED_1.\n * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n */\nexport function generalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n    if (x.gte(FIXED_2)) {\n        const count = floorLog2(x.div(FIXED_1));\n        x = signedRightShift(x, count);\n        // now x < 2\n        res = count.mul(FIXED_1);\n    }\n\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n    if (x.gt(FIXED_1)) {\n        for (let i = MAX_PRECISION; i > 0; --i) {\n            x = (x.mul(x)).div(FIXED_1);\n            // now 1 < x < 4\n            if (x.gte(FIXED_2)) {\n                x = signedRightShift(x, ONE);\n                // now 1 < x < 2\n                res = res.add(leftShift(ONE, BigNumber.from(i - 1)));\n            }\n        }\n    }\n\n    return (res.mul(LN2_NUMERATOR)).div(LN2_DENOMINATOR)\n}\n\n/**\n    * @dev computes log(x / FIXED_1) * FIXED_1\n    * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n    * Auto-generated via \"PrintFunctionOptimalLog.py\"\n    * Detailed description:\n    * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n    * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n    * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n    * - The natural logarithm of the input is calculated by summing up the intermediate results above\n    * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n    */\nexport function optimalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n    let w;\n\n    if (x.gte('0xd3094c70f034de4b96ff7d5b6f99fcd8')) {\n        res = res.add(BigNumber.from('0x40000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xd3094c70f034de4b96ff7d5b6f99fcd8'));\n    }\n    // add 1 / 2^1\n    if (x.gte('0xa45af1e1f40c333b3de1db4dd55f29a7')) {\n        res = res.add(BigNumber.from('0x20000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xa45af1e1f40c333b3de1db4dd55f29a7'));\n    }\n    // add 1 / 2^2\n    if (x.gte('0x910b022db7ae67ce76b441c27035c6a1')) {\n        res = res.add(BigNumber.from('0x10000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x910b022db7ae67ce76b441c27035c6a1'));\n    }\n    // add 1 / 2^3\n    if (x.gte('0x88415abbe9a76bead8d00cf112e4d4a8')) {\n        res = res.add(BigNumber.from('0x08000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x88415abbe9a76bead8d00cf112e4d4a8'));\n    }\n    // add 1 / 2^4\n    if (x.gte('0x84102b00893f64c705e841d5d4064bd3')) {\n        res = res.add(BigNumber.from('0x04000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x84102b00893f64c705e841d5d4064bd3'));\n    }\n    // add 1 / 2^5\n    if (x.gte('0x8204055aaef1c8bd5c3259f4822735a2')) {\n        res = res.add(BigNumber.from('0x02000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x8204055aaef1c8bd5c3259f4822735a2'));\n    }\n    // add 1 / 2^6\n    if (x.gte('0x810100ab00222d861931c15e39b44e99')) {\n        res = res.add(BigNumber.from('0x01000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x810100ab00222d861931c15e39b44e99'));\n    }\n    // add 1 / 2^7\n    if (x.gte('0x808040155aabbbe9451521693554f733')) {\n        res = res.add(BigNumber.from('0x00800000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x808040155aabbbe9451521693554f733'));\n    }\n    // add 1 / 2^8\n\n    z = y = x.sub(FIXED_1);\n    w = (y.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x100000000000000000000000000000000').sub(y)).div(BigNumber.from('0x100000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^01 / 01 - y^02 / 02\n    res = res.add(z.mul(BigNumber.from('0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').sub(y)).div(BigNumber.from('0x200000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^03 / 03 - y^04 / 04\n    res = res.add(z.mul(BigNumber.from('0x099999999999999999999999999999999').sub(y)).div(BigNumber.from('0x300000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^05 / 05 - y^06 / 06\n    res = res.add(z.mul(BigNumber.from('0x092492492492492492492492492492492').sub(y)).div(BigNumber.from('0x400000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^07 / 07 - y^08 / 08\n    res = res.add(z.mul(BigNumber.from('0x08e38e38e38e38e38e38e38e38e38e38e').sub(y)).div(BigNumber.from('0x500000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^09 / 09 - y^10 / 10\n    res = res.add(z.mul(BigNumber.from('0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b').sub(y)).div(BigNumber.from('0x600000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^11 / 11 - y^12 / 12\n    res = res.add(z.mul(BigNumber.from('0x089d89d89d89d89d89d89d89d89d89d89').sub(y)).div(BigNumber.from('0x700000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^13 / 13 - y^14 / 14\n    res = res.add(z.mul(BigNumber.from('0x088888888888888888888888888888888').sub(y)).div(BigNumber.from('0x800000000000000000000000000000000')));\n    // add y^15 / 15 - y^16 / 16\n\n    return res;\n}\n\nexport function optimalExp(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n\n    z = y = x.mod(BigNumber.from('0x10000000000000000000000000000000'));\n    // get the input modulo 2^(-3)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x10e1b3be415a0000')));\n    // add y^02 * (20! / 02!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x05a0913f6b1e0000')));\n    // add y^03 * (20! / 03!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0168244fdac78000')));\n    // add y^04 * (20! / 04!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x004807432bc18000')));\n    // add y^05 * (20! / 05!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000c0135dca04000')));\n    // add y^06 * (20! / 06!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0001b707b1cdc000')));\n    // add y^07 * (20! / 07!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000036e0f639b800')));\n    // add y^08 * (20! / 08!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000618fee9f800')));\n    // add y^09 * (20! / 09!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000009c197dcc00')));\n    // add y^10 * (20! / 10!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000e30dce400')));\n    // add y^11 * (20! / 11!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000012ebd1300')));\n    // add y^12 * (20! / 12!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000017499f00')));\n    // add y^13 * (20! / 13!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000001a9d480')));\n    // add y^14 * (20! / 14!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000000001c6380')));\n    // add y^15 * (20! / 15!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000001c638')));\n    // add y^16 * (20! / 16!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000001ab8')));\n    // add y^17 * (20! / 17!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000000017c')));\n    // add y^18 * (20! / 18!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000014')));\n    // add y^19 * (20! / 19!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000001')));\n    // add y^20 * (20! / 20!)\n    res = res.div(BigNumber.from('0x21c3677c82b40000')).add(y).add(FIXED_1);\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    if (!(x.and(BigNumber.from('0x010000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1c3d6a24ed82218787d624d3e5eba95f9'))).div(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e776'));\n    // multiply by e^2^(-3)\n    if (!(x.and(BigNumber.from('0x020000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e778'))).div(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed4'));\n    // multiply by e^2^(-2)\n    if (!(x.and(BigNumber.from('0x040000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed5'))).div(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21f'));\n    // multiply by e^2^(-1)\n    if (!(x.and(BigNumber.from('0x080000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21e'))).div(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c9'));\n    // multiply by e^2^(+0)\n    if (!(x.and(BigNumber.from('0x100000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c5'))).div(BigNumber.from('0x00960aadc109e7a3bf4578099615711ea'));\n    // multiply by e^2^(+1)\n    if (!(x.and(BigNumber.from('0x200000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x00960aadc109e7a3bf4578099615711d7'))).div(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdce3d'));\n    // multiply by e^2^(+2)\n    if (!(x.and(BigNumber.from('0x400000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdc307'))).div(BigNumber.from('0x0000003c6ab775dd0b95b4cbee7e65d11'));\n    // multiply by e^2^(+3)\n    \n    return res;\n}\n\n/**\n   * @dev this function can be auto-generated by the script \"PrintFunctionGeneralExp.py\".\n   * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n   * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n   * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n   * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n   */\nexport function generalExp(_x: BigNumber, _precision: BigNumber) {\n    let xi = _x;\n    let res = ZERO;\n\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x3442c4e6074a82f1797f72ac0000000'));\n    // add x^02 * (33! / 02!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x116b96f757c380fb287fd0e40000000'));\n    // add x^03 * (33! / 03!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x045ae5bdd5f0e03eca1ff4390000000'));\n    // add x^04 * (33! / 04!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00defabf91302cd95b9ffda50000000'));\n    // add x^05 * (33! / 05!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x002529ca9832b22439efff9b8000000'));\n    // add x^06 * (33! / 06!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00054f1cf12bd04e516b6da88000000'));\n    // add x^07 * (33! / 07!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000a9e39e257a09ca2d6db51000000'));\n    // add x^08 * (33! / 08!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000012e066e7b839fa050c309000000'));\n    // add x^09 * (33! / 09!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000001e33d7d926c329a1ad1a800000'));\n    // add x^10 * (33! / 10!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000002bee513bdb4a6b19b5f800000'));\n    // add x^11 * (33! / 11!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000003a9316fa79b88eccf2a00000'));\n    // add x^12 * (33! / 12!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000048177ebe1fa812375200000'));\n    // add x^13 * (33! / 13!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000005263fe90242dcbacf00000'));\n    // add x^14 * (33! / 14!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000057e22099c030d94100000'));\n    // add x^15 * (33! / 15!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000057e22099c030d9410000'));\n    // add x^16 * (33! / 16!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000052b6b54569976310000'));\n    // add x^17 * (33! / 17!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000004985f67696bf748000'));\n    // add x^18 * (33! / 18!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000003dea12ea99e498000'));\n    // add x^19 * (33! / 19!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000031880f2214b6e000'));\n    // add x^20 * (33! / 20!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000025bcff56eb36000'));\n    // add x^21 * (33! / 21!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000001b722e10ab1000'));\n    // add x^22 * (33! / 22!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000001317c70077000'));\n    // add x^23 * (33! / 23!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000cba84aafa00'));\n    // add x^24 * (33! / 24!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000082573a0a00'));\n    // add x^25 * (33! / 25!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000005035ad900'));\n    // add x^26 * (33! / 26!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000000000002f881b00'));\n    // add x^27 * (33! / 27!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000001b29340'));\n    // add x^28 * (33! / 28!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000000000efc40'));\n    // add x^29 * (33! / 29!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000007fe0'));\n    // add x^30 * (33! / 30!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000420'));\n    // add x^31 * (33! / 31!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000021'));\n    // add x^32 * (33! / 32!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000001'));\n    // add x^33 * (33! / 33!)\n\n    \n    return (res.div(BigNumber.from('0x688589cc0e9505e2f2fee5580000000'))).add(_x).add(leftShift(ONE, _precision));\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\n}\n\n/**\n    * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n    * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n    * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n    */\nexport function findPositionInMaxExpArray(_x: BigNumber): number {\n    let lo = MIN_PRECISION;\n    let hi = MAX_PRECISION;\n\n    while (lo + 1 < hi) {\n        let mid = (lo + hi) / 2;\n        if (maxExpArray[mid].gte(_x)) lo = mid;\n        else hi = mid;\n    }\n\n    if (maxExpArray[hi].gte(_x)) return hi;\n    if (maxExpArray[lo].gte(_x)) return lo;\n\n    invariant(false);\n}\n\n/**\n * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\n *\n * Formula:\n * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\n *\n * @param amountIn                  source reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountOut\n */\nexport function getAmountOut(\n    amountIn: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    // validate input\n    invariant(amountIn.gt(ZERO), \"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\");\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    const amountInWithFee = amountIn.mul(TENK.sub(swapFee))\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        return (reserveOut.mul(amountInWithFee)).div(reserveIn.mul(TENK).add(amountInWithFee));\n    }\n\n    // let result;\n    // let precision: number;\n    const baseN = (reserveIn.mul(TENK)).add(amountInWithFee)\n    const [result, precision] = power(baseN, reserveIn.mul(TENK), tokenWeightIn, tokenWeightOut);\n    \n    const temp1 = reserveOut.mul(result);\n    const temp2 = leftShift(reserveOut, BigNumber.from(precision));\n    \n    return (temp1.sub(temp2)).div(result)\n}\n\n/**\n * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n *\n * Formula:\n * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\n *\n * @param amountOut     target reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountIn\n */\nexport function getAmountIn(\n    amountOut: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n) {\n    // validate input\n    invariant(amountOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\");\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        const numerator = reserveIn.mul(amountOut).mul(TENK);\n        const denominator = reserveOut.sub(amountOut).mul(TENK.sub(swapFee));\n        return (numerator.div(denominator)).add(1);\n    }\n\n\n    const baseD = reserveOut.sub(amountOut);\n    const [result, precision] = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\n    const baseReserveIn = reserveIn.mul(TENK);\n    const temp1 = baseReserveIn.mul(result);\n    const temp2 = leftShift(baseReserveIn, BigNumber.from(precision));\n    return (signedRightShift(temp1.sub(temp2), BigNumber.from(precision)).div(TENK.sub(swapFee))).add(1);\n}\n\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  BigintIsh,\n  WEIGHTED_FACTORY_ADDRESS,\n  INIT_CODE_HASH_WEIGHTED,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  // ONE,\n  FIVE,\n  _100,\n  // FEES_NUMERATOR,\n  // FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n// import { getAmountOut, getAmountIn } from './weightedPairCalc'\nimport { getAmountOut, getAmountIn } from './weightedPairCalc'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class WeightedPair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly weights: [JSBI, JSBI]\n  private readonly fee: JSBI\n  public readonly type: string\n\n  public static getAddress(tokenA: Token, tokenB: Token, weightA: JSBI, fee: JSBI): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            WEIGHTED_FACTORY_ADDRESS[tokens[0].chainId],\n            keccak256(['bytes'], [pack(['address', 'address', 'uint32', 'uint32'], [tokens[0].address, tokens[1].address, weightA.toString(), fee.toString()])]),\n            INIT_CODE_HASH_WEIGHTED[tokens[0].chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, weightA: JSBI, fee: JSBI) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.weights = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [weightA, JSBI.subtract(_100, weightA)]\n      : [JSBI.subtract(_100, weightA), weightA]\n    this.fee = fee\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      WeightedPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, JSBI.BigInt(50), fee),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = 'WeightedPair'\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get weight0(): JSBI {\n    return this.weights[0]\n  }\n\n  public get weight1(): JSBI {\n    return this.weights[1]\n  }\n\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n  public weightOf(token: Token): JSBI {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.weight0 : this.weight1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputWeight = this.weightOf(inputAmount.token)\n    const outputWeight = this.weightOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountOut(inputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(getAmountOut(inputAmount.toBigNumber(), inputReserve.toBigNumber(), outputReserve.toBigNumber(), BigNumber.from(inputWeight.toString()), BigNumber.from(outputWeight.toString()), BigNumber.from(this.fee.toString())).toString())\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const outputWeight = this.weightOf(outputAmount.token)\n    const inputWeight = this.weightOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountIn(outputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(getAmountIn(outputAmount.toBigNumber(), inputReserve.toBigNumber(), outputReserve.toBigNumber(),BigNumber.from(inputWeight.toString()), BigNumber.from(outputWeight.toString()), BigNumber.from(this.fee.toString())).toString())\n    )\n    return [inputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\n\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp, swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(1)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\n\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS,\n  STABLE_POOL_LP_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getRouterAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public static getLpAddress(chainId: number): string {\n    return STABLE_POOL_LP_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      STABLE_POOL_LP_ADDRESS[tokens[0].chainId] ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC') }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber | BigintIsh,\n    chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(StablePool.getRouterAddress(chainId), new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(outputAmount.token), inIndex, outputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(inIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwap(i, outIndex, userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: SwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): StablePool {\n    return new StablePool(\n      this.tokens, this.tokenBalances, this._A, this.swapStorage, this.blockTimestamp.toNumber(), this.lpTotalSupply, this.currentWithdrawFee\n    )\n  }\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getRouterAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV3 } from './entities/tradeV3'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV3Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV3OptionsDeadline extends Omit<TradeV3Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV3Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV3 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV3, options: TradeV3Options | TradeV3OptionsDeadline): SwapV3Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap && (trade.route.routerIds.length === 1 && trade.route.routerIds[0] === 1)) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = []\n      for (let i = 0; i < trade.route.pathMatrix.length; i++)\n      path.push(trade.route.pathMatrix[i].map(token => token.address))\n      const routerId = trade.route.routerIds.map(id => id.toString())\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'multiSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory routerId, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapExactTokensForTokens'\n            // multiSwapExactTokensForTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountIn, uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'multiSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory routerId, uint256 amountOut, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import { StablePool } from \"./stablePool\";\nimport { Token, } from \"./token\";\nimport { Price } from \"./fractions/price\";\nimport { TokenAmount } from \"./fractions/tokenAmount\";\nimport invariant from \"tiny-invariant\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Source } from './source';\nimport { ChainId, STABLE_POOL_LP_ADDRESS } from \"./../constants\";\n\n// A class that wraps a stablePool to a pair-like structure\nexport class StablePairWrapper implements Source {\n\n    // the tokenAmounts are the reference Balances that we keep track of in the stablePool\n    // whenever we make changes to these, we need to update the stablePool reference Balance to calculate the correct \n    public tokenAmounts: TokenAmount[]\n    public readonly stableIndexes: number[]\n\n    // the tokenAmount for calculating the price\n    // these cannot be derived from the tokenAmounts since\n    // they follow the stableSwap logic for pricing\n    public pricingBasesIn: TokenAmount[]\n    public pricingBasesOut: TokenAmount[]\n    public readonly type: string\n    public readonly referenceMidPrices: Price[]\n    public readonly liquidityToken: Token\n    public status: string\n    // public executionPrice: Price\n    // public readonly inputReserve: TokenAmount\n    // public readonly outputReserve: TokenAmount\n\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, indexA: number, indexB: number) {\n\n        invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_IDS')\n\n        this.liquidityToken = new Token(\n            tokenAmountA.token.chainId,\n            STABLE_POOL_LP_ADDRESS[tokenAmountA.token.chainId] ?? '0x0000000000000000000000000000000000000001',\n            18,\n            'RequiemStable-LP',\n            'Requiem StableSwap LPs'\n        )\n\n        this.tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.stableIndexes = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [indexA, indexB] : [indexB, indexA]\n\n        this.pricingBasesIn = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.pricingBasesOut = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        // this.executionPrice = new Price(tokenAmountA.token, tokenAmountB.token, tokenAmountA.raw, tokenAmountB.raw)\n        this.referenceMidPrices = []\n        this.type = 'StablePairWrapper'\n        this.status = 'NOT PRICED'\n    }\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    // reserves cannot be this.tokenAmounts because\n    // these are directly used for prices\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    // this gets the reserve of the respectve (stable) token\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n\n    public priceOf(token: Token, stablePool: StablePool, volume: BigNumber) {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price(stablePool, volume) : this.token1Price(stablePool, volume)\n    }\n\n    /**\n * Returns the current price at given volume of the pair in terms of token0, i.e. the ratio calculated by the stableSwap\n */\n    public token0Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken1 = stablePool.calculateSwap(this.stableIndexes[0], this.stableIndexes[1], volume)\n        return new Price(this.token0, this.token1, outToken1.toBigInt(), volume.toBigInt())\n    }\n\n    /**\n * Returns the current mid price of the pair in terms of token1, i.e. the ratio calculated by the stableSwap\n */\n    public token1Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken0 = stablePool.calculateSwap(this.stableIndexes[1], this.stableIndexes[0], volume)\n        return new Price(this.token1, this.token0, outToken0.toBigInt(), volume.toBigInt())\n    }\n\n    public priceFromReserve(outToken: Token) {\n        const outIndex = outToken.equals(this.token0) ? 0 : 1\n        const inIndex = outToken.equals(this.token1) ? 0 : 1\n        return new Price(\n            this.pricingBasesIn[inIndex].token,\n            this.pricingBasesOut[outIndex].token,\n            this.pricingBasesIn[inIndex].raw,\n            this.pricingBasesOut[outIndex].raw\n        )\n    }\n\n    /**\n     * function that wraps the output calculation based on a stablePool\n     * @param inputAmount input amount that is used for calculating the output amount\n     * @param stablePool input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the output amount as TokenAmount and the StableWrappedPair with the adjusted balances\n     */\n    public getOutputAmount(inputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const output = stablePool.getOutputAmount(\n            inputAmount,\n            this.token0.equals(inputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(inputAmount)\n        stablePool.subtractBalanceValue(output)\n\n        // here we save the pricing results if it is called\n        const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n        const outIndex = output.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = inputAmount\n        this.pricingBasesOut[outIndex] = output\n        this.status = 'PRICED'\n        // console.log(\"get \" + output.raw.toString() + output.token.symbol + \" for \" + inputAmount.raw.toString() + inputAmount.token.symbol)\n        // this.executionPrice = new Price(inputAmount.token, output.token, inputAmount.raw, output.raw)\n        return [\n            output,\n            new StablePairWrapper(\n                inputAmount,\n                output, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))\n        ]\n    }\n\n    /**\n     * function that wraps the input calculation based on a stablePool\n     * @param outputAmount output amount to calculate the input with\n     * @param stablePool  input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the input TokenAmount required to obtain the target output\n     */\n    public getInputAmount(outputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        const input = stablePool.getInputAmount(\n            outputAmount,\n            this.token0.equals(outputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // here we save the pricing results if it is called\n        const inIndex = input.token.equals(this.token0) ? 0 : 1\n        const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = input\n        this.pricingBasesOut[outIndex] = outputAmount\n        this.status = 'PRICED'\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(input)\n        stablePool.subtractBalanceValue(outputAmount)\n\n        // console.log(\"get \" + outputAmount.raw.toString() + outputAmount.token.symbol + \" for \" + input.raw.toString() + input.token.symbol)\n\n        return [input,\n            new StablePairWrapper(\n                input,\n                outputAmount, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))]\n    }\n\n    // generates the n^2-n combinations for wrappedStablePairs\n    public static wrapPairsFromPool(stablePool: StablePool): StablePairWrapper[] {\n\n        let wrapperList = []\n\n        for (let i = 0; i < stablePool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                wrapperList.push(new StablePairWrapper(\n                    new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n                    new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n                    i,\n                    j\n                ))\n            }\n        }\n        return wrapperList\n    }\n\n    public static wrapSinglePairFromPool(stablePool: StablePool, i: number, j: number) {\n        invariant(i !== j, 'SAME INDEX')\n        invariant(i < stablePool.tokenBalances.length || j < stablePool.tokenBalances.length, 'INDEX OUT OF RANGE')\n        return new StablePairWrapper(\n            new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n            new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n            i,\n            j\n        )\n    }\n}","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\nimport { StablePairWrapper } from './stablePairWrapper'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly sources: (Pair | StablePairWrapper)[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n  public readonly pathMatrix: Token[][]\n  public readonly routerIds: number[]\n\n  public constructor(sources: (Pair | StablePairWrapper)[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(sources.length > 0, 'SOURCES')\n    invariant(\n      sources.every(source => source.chainId === sources[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && sources[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[sources[0].chainId] && sources[0].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && sources[sources.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[sources[0].chainId] && sources[sources.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[sources[0].chainId]]\n    for (const [i, source] of sources.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.sources = sources\n    this.path = path\n    this.midPrice = Price.fromRouteV3(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n\n    // generate new inputs for aggregator \n\n    const pathMatrix: Token[][] = []\n    const routerIds: number[] = []\n    let currentInput = this.path[0]\n    let currentRouterId: number = -1\n    let lastRouterId: number = -1\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      currentRouterId = sources[i] instanceof StablePairWrapper ? 0 : 1\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n\n      if (i === 0) {\n        pathMatrix.push([currentInput, output])\n        routerIds.push(source instanceof StablePairWrapper ? 0 : 1)\n      }\n      else {\n        if (source instanceof StablePairWrapper) { // current item is stablePool\n          pathMatrix.push([currentInput, output])\n          routerIds.push(0)\n        }\n        else { // current item is a pair\n          if (lastRouterId === 0) {\n            pathMatrix.push([currentInput, output])\n            routerIds.push(1)\n          } else {\n            pathMatrix[pathMatrix.length - 1].push(output)\n          }\n        }\n      }\n      currentInput = output\n      lastRouterId = currentRouterId\n    }\n\n    this.pathMatrix = pathMatrix\n    this.routerIds = routerIds\n  }\n\n  public get chainId(): ChainId {\n    return this.sources[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextSources: (Pair | StablePairWrapper)[] = new Array(route.sources.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const source = route.sources[i]\n        const [outputAmount, nextSource] = source instanceof Pair ?\n          source.getOutputAmount(amounts[i]) :\n          source.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextSources[i] = nextSource\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const source = route.sources[i - 1]\n        const [inputAmount, nextSource] = source instanceof Pair ?\n          source.getInputAmount(amounts[i]) :\n          source.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextSources[i - 1] = nextSource\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV3(new RouteV3(nextSources, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      source.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      let source = sources[i]\n\n\n      if (!source.token0.equals(amountIn.token) && !source.token1.equals(amountIn.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = source instanceof Pair ? source.getOutputAmount(amountIn) : source.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentSources, source], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentSources, source],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param sources the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentSources used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check ifit can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      source.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      // source irrelevant\n      if (!source.token0.equals(amountOut.token) && !source.token1.equals(amountOut.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = source instanceof Pair ? source.getInputAmount(amountOut) : source.getInputAmount(amountOut, stablePool)\n      } catch (error) {\n        // not enough liquidity in this source\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([source, ...currentSources], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [source, ...currentSources],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","WEIGHTED_FACTORY_ADDRESS","INIT_CODE_HASH","INIT_CODE_HASH_WEIGHTED","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","NETWORK_CCY","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fromRouteV3","sources","source","type","pricingBasesIn","pricingBasesOut","fromRouteV4","pools","pool","price","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","TENK","_256","_128","FIXED_1","FIXED_2","MAX_NUM","LN2_NUMERATOR","LN2_DENOMINATOR","OPT_LOG_MAX_VAL","OPT_EXP_MAX_VAL","maxExpArray","leftShift","num","shift","mul","pow","signedRightShift","power","_baseN","_baseD","_expN","_expD","gt","lt","w","res","base","baseLogTimesExp","gte","sub","count","_n","s","or","floorLog2","generalLog","optimalExp","_x","findPositionInMaxExpArray","generalExp","mod","and","isZero","_precision","xi","WeightedPair","weightA","fee","weights","weightOf","weight0","weight1","inputWeight","outputWeight","reserveIn","reserveOut","tokenWeightIn","tokenWeightOut","swapFee","amountInWithFee","eq","result","temp1","temp2","getAmountOut","baseD","baseReserveIn","getAmountIn","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","balances","A_PRECISION","FEE_DENOMINATOR","_xp","rates","_getAPrecise","blockTimestamp","swapStorage","futureATime","futureA","initialA","initialATime","_distance","_getD","xp","amp","nCoins","sum","_sumOf","Dprev","D","Ann","D_P","j","lte","_getYD","A","index","c","SwapStorage","tokenMultipliers","adminFee","lpAddress","mock","dummy","StablePool","tokenBalances","_A","lpTotalSupply","currentWithdrawFee","values","ethers","constants","AddressZero","getRouterAddress","getLpAddress","keys","tokenFromIndex","indexFromToken","getBalances","_","calculateSwapViaPing","inIndex","outIndex","inAmount","utils","Interface","StableSwap","calculateSwap","normalizedBalances","outBalance","inBalance","_getY","outAmount","_fee","swap","toBigInt","calculateRemoveLiquidity","amountLp","feeAdjustedAmount","_calculateRemoveLiquidity","calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","_feePerToken","expectedDx","dy","_calculateRemoveLiquidityOneToken","getLiquidityAmount","deposit","newBalances","_calculateTokenAmount","userBalances","setSwapStorage","setTokenBalances","setBlockTimestamp","setLpTotalSupply","setBalanceValueByIndex","newBalance","setBalanceValue","addBalanceValue","subtractBalanceValue","clone","toNumber","feeToSet","StablesFetcher","fetchStablePoolData","console","log","getTokens","tokenAddresses","indexes","RouterV3","multiSwap","routerIds","pathMatrix","routerId","id","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","StablePairWrapper","indexA","indexB","stableIndexes","referenceMidPrices","status","stablePool","volume","outToken1","outToken0","priceFromReserve","outToken","wrapPairsFromPool","wrapperList","wrapSinglePairFromPool","RouteV3","currentRouterId","lastRouterId","inputOutputComparatorV3","tradeComparatorV3","TradeV3","nextSources","nextSource","bestTradeExactInIteration","originalStablePool","currentSources","includes","sourcesExcludingThisSource","bestTradeExactOutIteration"],"mappings":"gJAIYA,EAWAC,EAKAC,qeAhBAF,EAAAA,kBAAAA,qDAEVA,kCACAA,uCACAA,uCACAA,+CACAA,gEACAA,uCACAA,0CAGUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,+BAyDUC,EAtDCC,EAAiD,IACxD,gDACA,mDACG,mDACA,8CAGIC,EAA0D,IACjE,gDACA,mDACG,mDACA,8CAMIC,EAAgD,IACvD,wEACA,2EACG,2EACA,sEAGIC,EAAyD,IAChE,wEACA,2EACG,2EACA,sEAIIC,EAAqD,OACzD,8CAGIC,EAAwD,OAC5D,8CAGIC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAElBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAiBT,EAAKC,OAAO,MAC7BS,EAAmBV,EAAKC,OAAO,MAE5C,SAAYT,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMmB,UACVnB,EAAaoB,OAAQZ,EAAKC,OAAO,UACjCT,EAAaqB,SAAUb,EAAKC,OAAO,uoFCtFtC,MAAMa,EAAoB,mBAAoBC,OAMjCC,2FACyC,IAI7CC,KAAOC,EAAKC,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANnBC,QAclCC,8FAC4C,IAIhDN,KAAOO,EAAKL,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANhBC,iBCdlCG,EAA6BC,EAAaC,GAC9C3B,EAAK4B,mBAAmBF,EAAOxB,IAAzC2B,MACU7B,EAAK8B,gBAAgBJ,EAAOf,EAAqBgB,KAA3DE,eAIcE,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,GAAeC,UACtBA,aAAqBpC,EACxBoC,EAEApC,EAAKC,OADgB,iBAAdmC,EACKA,EAAUC,WACVD,YAIFE,GAAKC,GACnBd,EAA6Bc,EAAG/C,EAAaqB,aAEzC2B,EADAC,EAAUvC,KAEVF,EAAK0C,YAAYH,EAAGlC,OACtBoC,EAAIF,EACJC,EAAIxC,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGnC,GAAMD,GAC3BH,EAAK6C,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIxC,EAAK4C,OAAO5C,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGC,GAAIA,GAAIpC,QAEzCJ,EAAK8C,SAASP,EAAGrC,KAC1BuC,EAAItC,UAECsC,EAKT,SAAgBM,GAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApBpB,MAEUmB,EAAMG,QAAUF,GAA1BpB,MAGqB,IAAjBmB,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,SCpEtBC,GA0BX,SAAsBC,EAAkBC,EAAiB5C,GACvDQ,EAA6BzB,EAAKC,OAAO2D,GAAWpE,EAAaoB,YAE5DgD,SAAWA,OACXC,OAASA,OACT5C,KAAOA,GAvBS0C,SAAkB,IAAIA,GAAS,GAAI,MAAO,iBA2B7DG,GAzBmBH,uBACpBtE,gBAAQ0E,aAAc,IAAIJ,GAAS,GAAI,MAAO,SAC9CtE,gBAAQ2E,aAAc,IAAIL,GAAS,GAAI,MAAO,SAC9CtE,gBAAQ4E,kBAAmB,IAAIN,GAAS,GAAI,MAAO,SACnDtE,gBAAQ6E,0BAA2B,IAAIP,GAAS,GAAI,MAAO,SAC3DtE,gBAAQ8E,cAAe,IAAIR,GAAS,GAAI,OAAQ,UAChDtE,gBAAQ+E,cAAe,IAAIT,GAAS,GAAI,OAAQ,UAChDtE,gBAAQgF,eAAgB,IAAIV,GAAS,GAAI,QAAS,WAClDtE,gBAAQiF,eAAgB,IAAIX,GAAS,GAAI,QAAS,YAkBjDY,GAAQZ,GAASY,MCvCVC,0BAMTC,EACAzC,EACA4B,EACAC,EACA5C,EACAyD,8BAEMd,EAAUC,EAAQ5C,UACnBwD,QAAUA,IACVzC,QAAUD,EAAwBC,KAClC0C,YAAcA,sCAOdC,OAAA,SAAOC,UAERC,OAASD,GAGNC,KAAKJ,UAAYG,EAAMH,SAAWI,KAAK7C,UAAY4C,EAAM5C,WAS3D8C,YAAA,SAAYF,UACPC,KAAKJ,UAAYG,EAAMH,SAAjC5C,MACUgD,KAAK7C,UAAY4C,EAAM5C,SAAjCH,MACOgD,KAAK7C,QAAQ+C,cAAgBH,EAAM5C,QAAQ+C,kBAxC3BpB,aA+CXqB,GAAeC,EAAqBC,UAC9CD,aAAqBT,IAASU,aAAqBV,GAC9CS,EAAUN,OAAOO,KACfD,aAAqBT,IAErBU,aAAqBV,IAGvBS,IAAcC,GAIzB,UAAaC,YACV9F,gBAAQ0E,aAAc,IAAIS,GACzBnF,gBAAQ0E,YACR,6CACA,GACA,OACA,cACA,8BAED1E,gBAAQ2E,aAAc,IAAIQ,GACzBnF,gBAAQ2E,YACR,6CACA,GACA,OACA,cACA,8BAED3E,gBAAQ4E,kBAAmB,IAAIO,GAC9BnF,gBAAQ4E,iBACR,6CACA,GACA,OACA,cACA,8BAED5E,gBAAQ6E,0BAA2B,IAAIM,GACtCnF,gBAAQ6E,yBACR,6CACA,GACA,OACA,cACA,8BAED7E,gBAAQ8E,cAAe,IAAIK,GAC1BnF,gBAAQ8E,aACR,6CACA,GACA,QACA,eACA,8BAED9E,gBAAQ+E,cAAe,IAAII,GAC1BnF,gBAAQ+E,aACR,6CACA,GACA,QACA,eACA,8BAED/E,gBAAQgF,eAAgB,IAAIG,GAC3BnF,gBAAQgF,cACR,6CACA,GACA,SACA,gBACA,8BAEDhF,gBAAQiF,eAAgB,IAAIE,GAC3BnF,gBAAQiF,cACR,6CACA,GACA,SACA,gBACA,+BAOSc,YACV/F,gBAAQ0E,aAAc,IAAIS,GACzBnF,gBAAQ0E,YACR,6CACA,GACA,OACA,cACA,8BAED1E,gBAAQ2E,aAAc,IAAIQ,GACzBnF,gBAAQ2E,YACR,6CACA,GACA,OACA,cACA,8BAED3E,gBAAQ4E,kBAAmB,IAAIO,GAC9BnF,gBAAQ4E,iBACR,6CACA,GACA,OACA,cACA,8BAED5E,gBAAQ6E,0BAA2B,IAAIM,GACtCnF,gBAAQ6E,yBACR,6CACA,GACA,OACA,cACA,8BAED7E,gBAAQ8E,cAAe,IAAIK,GAC1BnF,gBAAQ8E,aACR,6CACA,GACA,QACA,eACA,8BAED9E,gBAAQ+E,cAAe,IAAII,GAC1BnF,gBAAQ+E,aACR,6CACA,GACA,QACA,eACA,8BAED/E,gBAAQgF,eAAgB,IAAIG,GAC3BnF,gBAAQgF,cACR,6CACA,GACA,SACA,gBACA,8BAEDhF,gBAAQiF,eAAgB,IAAIE,GAC3BnF,gBAAQiF,cACR,6CACA,GACA,SACA,gBACA,+BC9LEe,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,YACHnG,iBAASoG,YAAaN,GAAQM,cAC9BpG,iBAASqG,eAAgBP,GAAQO,iBACjCrG,iBAASsG,UAAWR,GAAQQ,aAGzBC,YACHvG,iBAASoG,iBACTpG,iBAASqG,oBACTrG,iBAASsG,gBAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyB9F,QAC3D6F,UAAY7D,GAAe6D,QAC3BC,YAAc9D,GAAe8D,8BAa7BC,OAAA,kBACE,IAAIH,EAASlB,KAAKoB,YAAapB,KAAKmB,cAGtCrD,IAAA,SAAIiC,OACHuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAChF5E,EAAKoG,MAAMvB,KAAKoB,YAAaE,EAAYF,aACpC,IAAIF,EAAS/F,EAAK2C,IAAIkC,KAAKmB,UAAWG,EAAYH,WAAYnB,KAAKoB,aAErE,IAAIF,EACT/F,EAAK2C,IACH3C,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASF,EAAYH,UAAWnB,KAAKoB,cAE5CjG,EAAKqG,SAASxB,KAAKoB,YAAaE,EAAYF,iBAIzCK,SAAA,SAAS1B,OACRuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAChF5E,EAAKoG,MAAMvB,KAAKoB,YAAaE,EAAYF,aACpC,IAAIF,EAAS/F,EAAKsG,SAASzB,KAAKmB,UAAWG,EAAYH,WAAYnB,KAAKoB,aAE1E,IAAIF,EACT/F,EAAKsG,SACHtG,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASF,EAAYH,UAAWnB,KAAKoB,cAE5CjG,EAAKqG,SAASxB,KAAKoB,YAAaE,EAAYF,iBAIzCpD,SAAA,SAAS+B,OACRuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAC7E5E,EAAK6C,SACV7C,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASF,EAAYH,UAAWnB,KAAKoB,iBAIvCM,QAAA,SAAQ3B,OACPuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAC7E5E,EAAKoG,MACVpG,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASF,EAAYH,UAAWnB,KAAKoB,iBAIvCvD,YAAA,SAAYkC,OACXuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAC7E5E,EAAK0C,YACV1C,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASF,EAAYH,UAAWnB,KAAKoB,iBAIvCI,SAAA,SAASzB,OACRuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAC7E,IAAImB,EACT/F,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYH,WAC1ChG,EAAKqG,SAASxB,KAAKoB,YAAaE,EAAYF,iBAIzCrD,OAAA,SAAOgC,OACNuB,EAAcvB,aAAiBmB,EAAWnB,EAAQ,IAAImB,EAAS5D,GAAeyC,WAC7E,IAAImB,EACT/F,EAAKqG,SAASxB,KAAKmB,UAAWG,EAAYF,aAC1CjG,EAAKqG,SAASxB,KAAKoB,YAAaE,EAAYH,eAIzCQ,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBpH,iBAASqG,eAEpBiB,OAAOC,UAAUL,IAA3B5E,MACU4E,EAAoB,GAA9B5E,MAEAwD,GAAQ0B,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUjB,GAAsBiB,SAC1EM,EAAW,IAAI5B,GAAQR,KAAKmB,UAAU3D,YACzC6E,IAAIrC,KAAKoB,YAAY5D,YACrB8E,oBAAoBV,UAChBQ,EAAS3B,SAAS2B,EAASG,gBAAiBV,MAG9CW,QAAA,SACLD,EACAV,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBpH,iBAASqG,eAEpBiB,OAAOC,UAAUM,IAA3BvF,MACUuF,GAAiB,GAA3BvF,MAEA2D,GAAI8B,GAAKF,EACT5B,GAAI+B,GAAKzB,GAAgBa,GAClB,IAAInB,GAAIX,KAAKmB,UAAU3D,YAAY6E,IAAIrC,KAAKoB,YAAY5D,YAAYiD,SAAS8B,EAAeV,6BA1GrG,kBACS1G,EAAK4C,OAAOiC,KAAKmB,UAAWnB,KAAKoB,oCAI1C,kBACS,IAAIF,EAAS/F,EAAKwH,UAAU3C,KAAKmB,UAAWnB,KAAKoB,aAAcpB,KAAKoB,sBC9BzET,GAAMF,EAASG,GAERgC,0BAqBWC,EAAoBC,SAClCC,EAAezF,GAAewF,UACpClG,EAA6BmG,EAAcpI,EAAaqB,wBAElD+G,EAAc5H,EAAK6H,aAAatH,EAAKP,EAAKC,OAAOyH,EAAS9D,mBAC3D8D,SAAWA,aAnBJI,MAAP,SAAaH,UACX,IAAIF,EAAelD,GAAOoD,MAQrBI,iBAAP,SAAwBtD,EAAkBkD,UACxC,IAAIF,EAAe3D,GAAYW,GAAUkD,+BAgB3ChF,IAAA,SAAIiC,UACCI,GAAeH,KAAK6C,SAAU9C,EAAM8C,WAA9C7F,MACO,IAAI4F,EAAe5C,KAAK6C,SAAU1H,EAAK2C,IAAIkC,KAAKmD,IAAKpD,EAAMoD,SAG7D1B,SAAA,SAAS1B,UACJI,GAAeH,KAAK6C,SAAU9C,EAAM8C,WAA9C7F,MACO,IAAI4F,EAAe5C,KAAK6C,SAAU1H,EAAKsG,SAASzB,KAAKmD,IAAKpD,EAAMoD,SAGlExB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBpH,iBAASoG,wBAEjBa,wBAAcC,EAAmBC,EAAQC,MAGjDU,QAAA,SACLD,EACAV,EACAC,mBAFAS,IAAAA,EAAwBvC,KAAK6C,SAAS9D,mBAEtC+C,IAAAA,EAAqBpH,iBAASoG,YAEpByB,GAAiBvC,KAAK6C,SAAS9D,UAAzC/B,kBACawF,kBAAQD,EAAeV,EAAQC,MAGvCsB,QAAA,SAAQvB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDpB,GAAI8B,GAAKzC,KAAK6C,SAAS9D,SAChB,IAAI4B,GAAIX,KAAKmB,UAAU3D,YAAY6E,IAAIrC,KAAKoB,YAAY5D,YAAYiD,SAASoB,MAG/EwB,YAAA,kBAAkCC,YAAUC,KAAKvD,KAAKmB,UAAU3D,iCApCvE,kBACSwC,KAAKmB,iBA9BoBD,ICCvBsC,0BAIQC,EAAcX,8BACzBW,EAAOX,UACRW,MAAQA,sCAGR3F,IAAA,SAAIiC,UACCC,KAAKyD,MAAM3D,OAAOC,EAAM0D,QAAlCzG,MACO,IAAIwG,EAAYxD,KAAKyD,MAAOtI,EAAK2C,IAAIkC,KAAKmD,IAAKpD,EAAMoD,SAGvD1B,SAAA,SAAS1B,UACJC,KAAKyD,MAAM3D,OAAOC,EAAM0D,QAAlCzG,MACO,IAAIwG,EAAYxD,KAAKyD,MAAOtI,EAAKsG,SAASzB,KAAKmD,IAAKpD,EAAMoD,UAhBpCP,ICEpBc,0BA6FQC,EAAwBC,EAAyBxC,EAAwBD,8BACpFA,EAAWC,UAEZuC,aAAeA,IACfC,cAAgBA,IAChBC,OAAS,IAAI3C,GAChB/F,EAAK6H,aAAatH,EAAKP,EAAKC,OAAOuI,EAAa5E,WAChD5D,EAAK6H,aAAatH,EAAKP,EAAKC,OAAOwI,EAAc7E,uBA/FvC+E,UAAP,SAAiBC,aAChBC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAOzF,KACLwF,EAAMK,WAAQtE,OAAOqE,EAAKE,QACtB,IAAIX,EAAMS,EAAKG,SAASzB,SAAUsB,EAAKI,SAAS1B,SAAUsB,EAAKG,SAASnB,IAAKgB,EAAKI,SAASpB,KAC3F,IAAIO,EAAMS,EAAKI,SAAS1B,SAAUsB,EAAKG,SAASzB,SAAUsB,EAAKI,SAASpB,IAAKgB,EAAKG,SAASnB,aAG5Fa,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,OAI5FY,YAAP,SAAmBb,aAClBC,EAAkB,OACED,EAAMc,QAAQX,0BAAW,eAApCY,OAKbd,EAAOzF,KACLwF,EAAMK,WAAQtE,OAAOgF,EAAOT,QACP,SAAhBS,EAAOC,KACN,IAAIrB,EAAMoB,EAAOR,SAASzB,SAAUiC,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASnB,IAAK2B,EAAOP,SAASpB,KAEnG,IAAIO,EAAMoB,EAAOR,SAASzB,SAAUiC,EAAOP,SAAS1B,SACnDiC,EAA6BE,eAAe,GAAG7B,IAC/C2B,EAA6BG,gBAAgB,GAAG9B,KAClC,SAAhB2B,EAAOC,KACR,IAAIrB,EAAMoB,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASzB,SAAUiC,EAAOP,SAASpB,IAAK2B,EAAOR,SAASnB,KAEjG,IAAIO,EAAMoB,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASzB,SACnDiC,EAA6BE,eAAe,GAAG7B,IAC/C2B,EAA6BG,gBAAgB,GAAG9B,aAGpDa,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,OAI5FkB,YAAP,SAAmBnB,aAClBC,EAAkB,OACAD,EAAMoB,MAAMjB,0BAAW,eAAhCkB,OACTC,YACAtB,EAAMK,WAAQtE,OAAOsF,EAAKf,eACpBe,EAAKL,UACN,OACHM,EAAQ,IAAI3B,EAAM0B,EAAKd,SAASzB,SAAUuC,EAAKb,SAAS1B,SAAUuC,EAAKd,SAASnB,IAAKiC,EAAKb,SAASpB,eAIhG,oBACHkC,EAAQ,IAAI3B,EAAM0B,EAAKd,SAASzB,SAAUuC,EAAKb,SAAS1B,SACrDuC,EAA2BJ,eAAe,GAAG7B,IAC7CiC,EAA2BH,gBAAgB,GAAG9B,eAG9C,eACHkC,EAAQ,IAAI3B,EAAM0B,EAAKd,SAASzB,SAAUuC,EAAKb,SAAS1B,SAAUuC,EAAKd,SAASnB,IAAKiC,EAAKb,SAASpB,iBAM/FiC,EAAKL,UACN,WAIA,eACHM,EAAQ,IAAI3B,EAAM0B,EAAKb,SAAS1B,SAAUuC,EAAKd,SAASzB,SAAUuC,EAAKb,SAASpB,IAAKiC,EAAKd,SAASnB,eAIhG,oBACHkC,EAAQ,IAAI3B,EAAM0B,EAAKb,SAAS1B,SAAUuC,EAAKd,SAASzB,SACrDuC,EAA2BJ,eAAe,GAAG7B,IAC7CiC,EAA2BH,gBAAgB,GAAG9B,KAKvDa,EAAOzF,KAAK8G,UAEPrB,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,gCAuBnG3C,OAAA,kBACE,IAAIqC,EAAM1D,KAAK4D,cAAe5D,KAAK2D,aAAc3D,KAAKmB,UAAWnB,KAAKoB,gBAGxEI,SAAA,SAASzB,GACJI,GAAeH,KAAK4D,cAAe7D,EAAM4D,eAAnD3G,UACMsI,cAAiB9D,mBAASzB,UACzB,IAAI2D,EAAM1D,KAAK2D,aAAc5D,EAAM6D,cAAe0B,EAASlE,YAAakE,EAASnE,cAInFoE,MAAA,SAAMC,UACDrF,GAAeqF,EAAe3C,SAAU7C,KAAK2D,eAAvD3G,MACIgD,KAAK4D,yBAAyBjE,GACzB,IAAI6D,GAAYxD,KAAK4D,cAAe6B,YAAMjE,mBAASgE,EAAerC,KAAKf,UAEzEQ,GAAeK,MAAMwC,YAAMjE,mBAASgE,EAAerC,KAAKf,aAG1DT,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC5B,KAAK0F,SAAS/D,cAAcC,EAAmBC,EAAQC,MAGzDU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BvC,KAAK0F,SAASlD,QAAQD,EAAeV,EAAQC,wBAhCtD,kBACS,IAAIZ,GAASlB,KAAKmB,UAAWnB,KAAKoB,mCAG3C,8BACeI,mBAASxB,KAAK6D,eA7GJ3C,ICQvByE,GAAuF,GAE9EC,yBA2BQC,EAA2BC,OACtCC,EAAeF,EAAapC,MAAMxD,YAAY6F,EAAarC,OAC7D,CAACoC,EAAcC,GACf,CAACA,EAAcD,QACdG,eAAiB,IAAIrG,GACxBoG,EAAa,GAAGtC,MAAM7D,QACtBgG,EAAKxI,WAAW2I,EAAa,GAAGtC,MAAOsC,EAAa,GAAGtC,OACvD,GACA,aACA,oBAEGsB,KAAO,YACPgB,aAAeA,IAlCR3I,WAAP,SAAkB6I,EAAeC,WAC5BD,EAAOrG,UAAYsG,EAAOtG,SAApC5C,gBACM4C,EAAUqG,EAAOrG,QACjBuG,EAASF,EAAOhG,YAAYiG,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,eAEHG,eAAjET,6BAAqBQ,EAAO,GAAGhJ,+BAAWgJ,EAAO,GAAGhJ,YACtDwI,QACKA,WACFQ,EAAO,GAAGhJ,wBACNwI,uBAAAU,EAAqBF,EAAO,GAAGhJ,iBACjCgJ,EAAO,GAAGhJ,SAAUmJ,oBACnB1L,EAAgBgF,GAChB2G,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACL,EAAO,GAAGhJ,QAASgJ,EAAO,GAAGhJ,YACjFrC,EAAe8E,aAMhB+F,GAAmBQ,EAAO,GAAGhJ,SAASgJ,EAAO,GAAGhJ,qCAsBlDsJ,cAAA,SAAchD,UACZA,EAAM3D,OAAOE,KAAKqE,SAAWZ,EAAM3D,OAAOE,KAAK0G,WAqBjDC,QAAA,SAAQlD,UACHzD,KAAKyG,cAAchD,IAA7BzG,MACOyG,EAAM3D,OAAOE,KAAKqE,QAAUrE,KAAK4G,YAAc5G,KAAK6G,eA0BtDC,UAAA,SAAUrD,UACLzD,KAAKyG,cAAchD,IAA7BzG,MACOyG,EAAM3D,OAAOE,KAAKqE,QAAUrE,KAAKsE,SAAWtE,KAAKuE,YAGnDwC,gBAAA,SAAgBC,MACXhH,KAAKyG,cAAcO,EAAYvD,QAAzCzG,MACI7B,EAAKoG,MAAMvB,KAAKsE,SAASnB,IAAK9H,IAASF,EAAKoG,MAAMvB,KAAKuE,SAASpB,IAAK9H,SACjE,IAAIc,MAEN8K,EAAejH,KAAK8G,UAAUE,EAAYvD,OAC1CyD,EAAgBlH,KAAK8G,UAAUE,EAAYvD,MAAM3D,OAAOE,KAAKqE,QAAUrE,KAAK0G,OAAS1G,KAAKqE,QAC1F8C,EAAqBhM,EAAKqG,SAASwF,EAAY7D,IAAKvH,GACpDuF,EAAYhG,EAAKqG,SAAS2F,EAAoBD,EAAc/D,KAC5D/B,EAAcjG,EAAK2C,IAAI3C,EAAKqG,SAASyF,EAAa9D,IAAKtH,GAAmBsL,GAC1EC,EAAe,IAAI5D,GACvBwD,EAAYvD,MAAM3D,OAAOE,KAAKqE,QAAUrE,KAAK0G,OAAS1G,KAAKqE,OAC3DlJ,EAAK4C,OAAOoD,EAAWC,OAErBjG,EAAKoG,MAAM6F,EAAajE,IAAK9H,SACzB,IAAIqB,QAEL,CAAC0K,EAAc,IAAIxB,EAAKqB,EAAanJ,IAAIkJ,GAAcE,EAAczF,SAAS2F,QAGhFC,eAAA,SAAeD,MACVpH,KAAKyG,cAAcW,EAAa3D,QAA1CzG,MAEE7B,EAAKoG,MAAMvB,KAAKsE,SAASnB,IAAK9H,IAC9BF,EAAKoG,MAAMvB,KAAKuE,SAASpB,IAAK9H,IAC9BF,EAAK4B,mBAAmBqK,EAAajE,IAAKnD,KAAK8G,UAAUM,EAAa3D,OAAON,WAEvE,IAAIhH,MAGN+K,EAAgBlH,KAAK8G,UAAUM,EAAa3D,OAC5CwD,EAAejH,KAAK8G,UAAUM,EAAa3D,MAAM3D,OAAOE,KAAKqE,QAAUrE,KAAK0G,OAAS1G,KAAKqE,QAC1FlD,EAAYhG,EAAKqG,SAASrG,EAAKqG,SAASyF,EAAa9D,IAAKiE,EAAajE,KAAMtH,GAC7EuF,EAAcjG,EAAKqG,SAASrG,EAAKsG,SAASyF,EAAc/D,IAAKiE,EAAajE,KAAMvH,GAChFoL,EAAc,IAAIxD,GACtB4D,EAAa3D,MAAM3D,OAAOE,KAAKqE,QAAUrE,KAAK0G,OAAS1G,KAAKqE,OAC5DlJ,EAAK2C,IAAI3C,EAAK4C,OAAOoD,EAAWC,GAAc9F,UAEzC,CAAC0L,EAAa,IAAIpB,EAAKqB,EAAanJ,IAAIkJ,GAAcE,EAAczF,SAAS2F,QAG/EE,mBAAA,SACLC,EACA1B,EACAC,GAEUyB,EAAY9D,MAAM3D,OAAOE,KAAKgG,iBAAxChJ,UAMIwK,EALEzB,EAAeF,EAAapC,MAAMxD,YAAY6F,EAAarC,OAC7D,CAACoC,EAAcC,GACf,CAACA,EAAcD,MACTE,EAAa,GAAGtC,MAAM3D,OAAOE,KAAKqE,SAAW0B,EAAa,GAAGtC,MAAM3D,OAAOE,KAAK0G,SAAzF1J,MAGI7B,EAAKoG,MAAMgG,EAAYpE,IAAK9H,GAC9BmM,EAAYrM,EAAKsG,SAAShE,GAAKtC,EAAKqG,SAASuE,EAAa,GAAG5C,IAAK4C,EAAa,GAAG5C,MAAOjI,OACpF,KACCuM,EAAUtM,EAAK4C,OAAO5C,EAAKqG,SAASuE,EAAa,GAAG5C,IAAKoE,EAAYpE,KAAMnD,KAAKsE,SAASnB,KACzFuE,EAAUvM,EAAK4C,OAAO5C,EAAKqG,SAASuE,EAAa,GAAG5C,IAAKoE,EAAYpE,KAAMnD,KAAKuE,SAASpB,KAC/FqE,EAAYrM,EAAK8B,gBAAgBwK,EAASC,GAAWD,EAAUC,MAE5DvM,EAAK0C,YAAY2J,EAAWnM,SACzB,IAAIqB,SAEL,IAAI8G,GAAYxD,KAAKgG,eAAgBwB,MAGvCG,kBAAA,SACLlE,EACA8D,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGP5H,KAAKyG,cAAchD,IAA7BzG,MACUuK,EAAY9D,MAAM3D,OAAOE,KAAKgG,iBAAxChJ,MACUwK,EAAU/D,MAAM3D,OAAOE,KAAKgG,iBAAtChJ,MACU7B,EAAK8B,gBAAgBuK,EAAUrE,IAAKoE,EAAYpE,MAA1DnG,MAGK4K,EAEE,CACOC,GAAZ7K,UACM+K,EAAczK,GAAeuK,MAC9B1M,EAAKoG,MAAMwG,EAAa1M,GAY3ByM,EAAsBP,MAZY,KAC5BS,EAAQvK,GAAKtC,EAAKqG,SAASxB,KAAKsE,SAASnB,IAAKnD,KAAKuE,SAASpB,MAC5D8E,EAAYxK,GAAKsK,MACnB5M,EAAK0C,YAAYmK,EAAOC,GAAY,KAChC9G,EAAYhG,EAAKqG,SAAS+F,EAAYpE,IAAKhI,EAAKsG,SAASuG,EAAOC,IAChE7G,EAAcjG,EAAK2C,IAAI3C,EAAKqG,SAASwG,EAAOvM,GAAOwM,GACnDC,EAAe/M,EAAK4C,OAAOoD,EAAWC,GAC5C0G,EAAsBP,EAAYzJ,IAAI,IAAI0F,GAAYxD,KAAKgG,eAAgBkC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAI/D,GACTC,EACAtI,EAAK4C,OAAO5C,EAAKqG,SAASgG,EAAUrE,IAAKnD,KAAK8G,UAAUrD,GAAON,KAAM2E,EAAoB3E,mCAtJ7F,kBACS,IAAIO,GAAM1D,KAAKqE,OAAQrE,KAAK0G,OAAQ1G,KAAK+F,aAAa,GAAG5C,IAAKnD,KAAK+F,aAAa,GAAG5C,8BAM5F,kBACS,IAAIO,GAAM1D,KAAK0G,OAAQ1G,KAAKqE,OAAQrE,KAAK+F,aAAa,GAAG5C,IAAKnD,KAAK+F,aAAa,GAAG5C,0BAe5F,kBACSnD,KAAKqE,OAAOzE,4BAGrB,kBACSI,KAAK+F,aAAa,GAAGtC,0BAG9B,kBACSzD,KAAK+F,aAAa,GAAGtC,4BAG9B,kBACSzD,KAAK+F,aAAa,yBAG3B,kBACS/F,KAAK+F,aAAa,YC/GhBoC,yBAOQlE,EAAemE,EAAiBC,GACvCpE,EAAM3F,OAAS,GAAzBtB,MAEEiH,EAAMqE,OAAM,SAAAnE,UAAQA,EAAKvE,UAAYqE,EAAM,GAAGrE,YADhD5C,MAKGoL,aAAiBzI,IAASsE,EAAM,GAAGwC,cAAc2B,IACjDA,IAAUnJ,GAAYgF,EAAM,GAAGrE,UAAYqE,EAAM,GAAGwC,cAAclG,GAAuB0D,EAAM,GAAGrE,WAFrG5C,WAMoB,IAAXqL,GACNA,aAAkB1I,IAASsE,EAAMA,EAAM3F,OAAS,GAAGmI,cAAc4B,IACjEA,IAAWpJ,GAAYgF,EAAM,GAAGrE,UAAYqE,EAAMA,EAAM3F,OAAS,GAAGmI,cAAclG,GAAuB0D,EAAM,GAAGrE,WAHrH5C,gBAOMoH,EAAgB,CAACgE,aAAiBzI,GAAQyI,EAAQ7H,GAAuB0D,EAAM,GAAGrE,cAChEqE,EAAMC,0BAAW,eAA1BC,OACPoE,EAAenE,QACXmE,EAAazI,OAAOqE,EAAKE,SAAWkE,EAAazI,OAAOqE,EAAKuC,SAAvE1J,UACMqL,EAASE,EAAazI,OAAOqE,EAAKE,QAAUF,EAAKuC,OAASvC,EAAKE,OACrED,EAAK7F,KAAK8J,QAGPpE,MAAQA,OACRG,KAAOA,OACPoE,SAAW9E,GAAMI,UAAU9D,WAC3BoI,MAAQA,OACRC,OAASA,MAAAA,EAAAA,EAAUjE,EAAKA,EAAK9F,OAAS,kCAG7C,kBACS0B,KAAKiE,MAAM,GAAGrE,iBC9CnB6I,GAAe,IAAIvH,GAASvF,GAErB+M,mGACJ/G,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC5B,KAAKwB,SAASiH,IAAc9G,cAAcC,EAAmBC,EAAQC,MAGvEU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BvC,KAAKwB,SAASiH,IAAcjG,QAAQD,EAAeV,EAAQC,OANzCZ,aCwBbyH,GAAsBC,EAAgBC,UAE1C1I,GAAeyI,EAAE5B,YAAYnE,SAAUgG,EAAE7B,YAAYnE,WAA/D7F,MACUmD,GAAeyI,EAAExB,aAAavE,SAAUgG,EAAEzB,aAAavE,WAAjE7F,MACI4L,EAAExB,aAAa1F,QAAQmH,EAAEzB,cACvBwB,EAAE5B,YAAYtF,QAAQmH,EAAE7B,aACnB,EAGL4B,EAAE5B,YAAYhJ,SAAS6K,EAAE7B,cACnB,EAED,EAIL4B,EAAExB,aAAapJ,SAAS6K,EAAEzB,cACrB,GAEC,WAME0B,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,YAAYhL,SAAS6K,EAAEG,cACnB,EACCJ,EAAEI,YAAYnL,YAAYgL,EAAEG,aAC9B,EAIFJ,EAAE7E,MAAMK,KAAK9F,OAASuK,EAAE9E,MAAMK,KAAK9F,OAe5C,SAAS2K,GAAczD,EAAgC5F,UACjD4F,aAA0BhC,GAAoBgC,EAC9CA,EAAe3C,WAAa5D,GAAYW,GAAiB,IAAI4D,GAAYjD,GAAuBX,GAAU4F,EAAerC,UAC7HnG,MAGF,SAASkM,GAAgBrG,EAAoBjD,UACvCiD,aAAoBlD,GAAckD,EAClCA,IAAa5D,GAAYW,GAAiBW,GAAuBX,QACrE5C,MAOF,IAAamM,yBAgDQpF,EAAcjB,EAAwBsG,OA/HehC,EAClEiC,EAEAC,EA6HEC,EAAyB,IAAIC,MAAMzF,EAAMK,KAAK9F,QAC9CmL,EAAoB,IAAID,MAAMzF,EAAME,MAAM3F,WAC5C8K,IAAc3O,kBAAUiP,YAAa,CAC7BvJ,GAAe2C,EAAOD,SAAUkB,EAAMqE,QAAhDpL,MACAuM,EAAQ,GAAKN,GAAcnG,EAAQiB,EAAMnE,aACpC,IAAI+J,EAAI,EAAGA,EAAI5F,EAAMK,KAAK9F,OAAS,EAAGqL,IAAK,OACjC5F,EAAME,MAAM0F,GACa5C,gBAAgBwC,EAAQI,IAAzCC,OACrBL,EAAQI,EAAI,QACZF,EAAUE,GAAKC,OAEZ,CACKzJ,GAAe2C,EAAOD,SAAUkB,EAAMsE,SAAhDrL,MACAuM,EAAQA,EAAQjL,OAAS,GAAK2K,GAAcnG,EAAQiB,EAAMnE,aACrD,IAAI+J,EAAI5F,EAAMK,KAAK9F,OAAS,EAAGqL,EAAI,EAAGA,IAAK,OACjC5F,EAAME,MAAM0F,EAAI,GACQtC,eAAekC,EAAQI,IAAxCC,OACpBL,EAAQI,EAAI,QACZF,EAAUE,EAAI,GAAKC,QAIlB7F,MAAQA,OACRqF,UAAYA,OACZpC,YACHoC,IAAc3O,kBAAUiP,YACpB5G,EACAiB,EAAMqE,QAAUnJ,GAAY8E,EAAMnE,SAChCgD,GAAeM,iBAAiBa,EAAMnE,QAAQ2J,EAAQ,GAAGpG,KACzDoG,EAAQ,QACXnC,aACHgC,IAAc3O,kBAAUoP,aACpB/G,EACAiB,EAAMsE,SAAWpJ,GAAY8E,EAAMnE,SACjCgD,GAAeM,iBAAiBa,EAAMnE,QAAQ2J,EAAQA,EAAQjL,OAAS,GAAG6E,KAC1EoG,EAAQA,EAAQjL,OAAS,QAC5BwL,eAAiB,IAAIpG,GACxB1D,KAAKgH,YAAYnE,SACjB7C,KAAKoH,aAAavE,SAClB7C,KAAKgH,YAAY7D,IACjBnD,KAAKoH,aAAajE,UAEf4G,aAAerG,GAAMI,UAAU,IAAIqE,GAAMsB,EAAW1F,EAAMqE,aAC1DY,aA3KiE5B,EA2KEpH,KAAKoH,aAxKzEkC,GAFAD,EA0KkCtF,EAAMyE,SA1KlBrF,IAAI3B,SA0KwBxB,KAAKgH,YA1KR7D,MAEzB1B,SAAS2F,EAAajE,KAAKpF,OAAOsL,GACvD,IAAIX,GAAQY,EAASnI,UAAWmI,EAASlI,gBA8GlC4I,QAAP,SAAejG,EAAckG,UAC3B,IAAId,EAAMpF,EAAOkG,EAAUxP,kBAAUiP,gBAQhCQ,SAAP,SAAgBnG,EAAcoG,UAC5B,IAAIhB,EAAMpF,EAAOoG,EAAW1P,kBAAUoP,0CAsDxCO,iBAAA,SAAiBC,MACXA,EAAkBrM,SAAS3C,IAAtC2B,MACIgD,KAAKoJ,YAAc3O,kBAAUoP,oBACxB7J,KAAKoH,iBAENkD,EAA4B,IAAIpJ,GAAS5F,GAC5CwC,IAAIuM,GACJhJ,SACAG,SAASxB,KAAKoH,aAAajE,KAAKf,gBAC5BpC,KAAKoH,wBAAwB5D,GAChC,IAAIA,GAAYxD,KAAKoH,aAAa3D,MAAO6G,GACzC1H,GAAeM,iBAAiBlD,KAAK+D,MAAMnE,QAAS0K,MAQrDC,gBAAA,SAAgBF,MACVA,EAAkBrM,SAAS3C,IAAtC2B,MACIgD,KAAKoJ,YAAc3O,kBAAUiP,mBACxB1J,KAAKgH,gBAENwD,EAA2B,IAAItJ,GAAS5F,GAAKwC,IAAIuM,GAAmB7I,SAASxB,KAAKgH,YAAY7D,KAAKf,gBAClGpC,KAAKgH,uBAAuBxD,GAC/B,IAAIA,GAAYxD,KAAKgH,YAAYvD,MAAO+G,GACxC5H,GAAeM,iBAAiBlD,KAAK+D,MAAMnE,QAAQ4K,MAkB7CC,iBAAP,SACLxG,EACAyG,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCH,YACnCI,IAAAA,EAAsB,IAEZ7G,EAAM3F,OAAS,GAAzBtB,MACUgO,EAAU,GAApBhO,MACU6N,IAAqBH,GAAoBE,EAAatM,OAAS,GAAzEtB,UACM4C,EACJ8K,aAA4BlH,GACxBkH,EAAiBjH,MAAM7D,QACvB+K,aAAuBhL,GACrBgL,EAAY/K,aACZwG,OACcA,IAAZxG,GAAV5C,cAEMiN,EAAWhB,GAAcyB,EAAkB9K,GAC3CqL,EAAW/B,GAAgByB,EAAa/K,GACrC+J,EAAI,EAAGA,EAAI1F,EAAM3F,OAAQqL,IAAK,KAC/BxF,EAAOF,EAAM0F,OAEdxF,EAAKE,OAAOvE,OAAOmK,EAASxG,QAAWU,EAAKuC,OAAO5G,OAAOmK,EAASxG,UACpEU,EAAKG,SAAS5C,QAAQrG,KAAS8I,EAAKI,SAAS7C,QAAQrG,QAErD8O,aAEAA,EAAahG,EAAK4C,gBAAgBkD,MACpC,MAAO5M,MAEFA,EAAc6N,8CAGb7N,KAGJ8M,EAAU1G,MAAM3D,OAAOmL,GACzB/M,GACE4M,EACA,IAAI3B,EACF,IAAIhB,aAAUyC,GAAczG,IAAO0G,EAAiBhI,SAAU8H,GAC9DE,EACApQ,kBAAUiP,aAEZqB,EACAjC,SAEG,GAAIkC,EAAU,GAAK/G,EAAM3F,OAAS,EAAG,KACpC6M,EAAyBlH,EAAMO,MAAM,EAAGmF,GAAGyB,OAAOnH,EAAMO,MAAMmF,EAAI,EAAG1F,EAAM3F,SAGjF6K,EAAMsB,iBACJU,EACAhB,EACAQ,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAczG,IAClB0G,EACAC,YAKCA,KAkBKO,kBAAP,SACLpH,EACAqH,EACAC,IAGAX,EACAY,EACAV,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBY,IAAAA,EAAoCD,YACpCT,IAAAA,EAAsB,IAEZ7G,EAAM3F,OAAS,GAAzBtB,MACUgO,EAAU,GAApBhO,MACUwO,IAAsBD,GAAqBX,EAAatM,OAAS,GAA3EtB,UACM4C,EACJ2L,aAA6B/H,GACzB+H,EAAkB9H,MAAM7D,QACxB0L,aAAsB3L,GACpB2L,EAAW1L,aACXwG,OACcA,IAAZxG,GAAV5C,cAEMmN,EAAYlB,GAAcsC,EAAmB3L,GAC7C6L,EAAUvC,GAAgBoC,EAAY1L,GACnC+J,EAAI,EAAGA,EAAI1F,EAAM3F,OAAQqL,IAAK,KAC/BxF,EAAOF,EAAM0F,OAEdxF,EAAKE,OAAOvE,OAAOqK,EAAU1G,QAAWU,EAAKuC,OAAO5G,OAAOqK,EAAU1G,UACtEU,EAAKG,SAAS5C,QAAQrG,KAAS8I,EAAKI,SAAS7C,QAAQrG,QAErD4O,aAEAA,EAAY9F,EAAKkD,eAAe8C,MAClC,MAAO9M,MAEFA,EAAcqO,2CAGbrO,KAGJ4M,EAASxG,MAAM3D,OAAO2L,GACxBvN,GACE4M,EACA,IAAI3B,EACF,IAAIhB,IAAOhE,UAASyG,GAAeU,EAAYE,EAAkB3I,UACjE2I,EACA/Q,kBAAUoP,cAEZkB,EACAjC,SAEG,GAAIkC,EAAU,GAAK/G,EAAM3F,OAAS,EAAG,KACpC6M,EAAyBlH,EAAMO,MAAM,EAAGmF,GAAGyB,OAAOnH,EAAMO,MAAMmF,EAAI,EAAG1F,EAAM3F,SAGjF6K,EAAMkC,kBACJF,EACAG,EACArB,EACA,CACEc,cAAAA,EACAC,QAASA,EAAU,IAEpB7G,UAASyG,GACVY,EACAV,YAKCA,QC9YLzP,GAAOiI,YAAUC,KAAK,GACtBjI,GAAMgI,YAAUC,KAAK,GACrBhI,GAAM+H,YAAUC,KAAK,GACrBoI,GAAOrI,YAAUC,KAAK,KACtBqI,GAAOtI,YAAUC,KAAK,OACtBsI,GAAOvI,YAAUC,KAAK,OAItBuI,GAAUxI,YAAUC,KAAK,uCACzBwI,GAAUzI,YAAUC,KAAK,uCACzByI,GAAU1I,YAAUC,KAAK,uCAEzB0I,GAAgB3I,YAAUC,KAAK,qCAC/B2I,GAAkB5I,YAAUC,KAAK,qCAEjC4I,GAAkB7I,YAAUC,KAAK,uCACjC6I,GAAkB9I,YAAUC,KAAK,uCASjC8I,GAAc,IAAI7C,MAAiB,KAkGzC,SAAS8C,GAAUC,EAAgBC,UACxBD,EAAIE,IAAIlR,GAAImR,IAAIF,IAG3B,SAASG,GAAiBJ,EAAgBC,UAC/BD,EAAIlK,IAAI9G,GAAImR,IAAIF,IAqB3B,SAAgBI,GACZC,EACAC,EACAC,EACAC,GAEUH,EAAOI,GAAGH,IAApB9P,MACU6P,EAAOK,GAAGlB,KAApBhP,UAoFuBW,EAGnBD,EACAE,EACAuP,EAJAC,EAlFAC,EAAQR,EAAOJ,IAAIX,IAAUzJ,IAAIyK,GAOjCQ,GANAD,EAAKH,GAAGf,KAgFWxO,EA/EE0P,EAgFrBD,EAAM/R,GAMNsC,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAGxC5F,EAAE4P,IAAI,wCACNH,EAAMA,EAAItP,IAAIwF,YAAUC,KAAK,uCAC7B5F,EAAKA,EAAE8O,IAAIX,IAAUzJ,IAAIiB,YAAUC,KAAK,wCAI5C3F,EAAIF,EAAIC,EAAE6P,IAAI1B,IACdqB,EAAKzP,EAAE+O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,yCACrG3F,EAAKA,EAAE6O,IAAIU,GAAI9K,IAAIyJ,IAEbsB,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,uCAAuCiK,IAAI9P,IAAI2E,IAAIiB,YAAUC,KAAK,mDA5G9E5F,OACnByP,EAAM/R,MAENsC,EAAE4P,IAAIxB,IAAU,KACV0B,EA7Bd,SAAmBC,OACXN,EAAM/R,MACNqS,EAAGR,GAAGtB,SAEC8B,EAAGT,GAAG3R,KACToS,EAAKf,GAAiBe,EAAIpS,IAC1B8R,EAAMA,EAAItP,IAAIxC,aAIb,IAAIqS,EAAI9B,GAAM8B,EAAEV,GAAG5R,IAAOsS,EAAIhB,GAAiBgB,EAAGrS,IAC/CoS,EAAGT,GAAGX,GAAUhR,GAAKqS,MACrBD,EAAKf,GAAiBe,EAAIC,GAC1BP,EAAMA,EAAIQ,GAAGD,WAKlBP,EAWWS,CAAUlQ,EAAE0E,IAAIyJ,KAC9BnO,EAAIgP,GAAiBhP,EAAG8P,GAExBL,EAAMK,EAAMhB,IAAIX,OAIhBnO,EAAEsP,GAAGnB,QACA,IAAInC,EAjNK,IAiNcA,EAAI,IAAKA,GACjChM,EAAKA,EAAE8O,IAAI9O,GAAI0E,IAAIyJ,KAEbyB,IAAIxB,MACNpO,EAAIgP,GAAiBhP,EAAGrC,IAExB8R,EAAMA,EAAItP,IAAIwO,GAAUhR,GAAKgI,YAAUC,KAAKoG,EAAI,aAKpDyD,EAAIX,IAAIR,IAAgB5J,IAAI6J,IA/DtB4B,CAAWT,IAGMZ,IAAIM,GAAQ1K,IAAI2K,MAC3CM,EAAgBJ,GAAGd,UACZ,CAAC2B,GAAWT,GAlKL,SAoKVnL,WA+V8B6L,WAClCvP,EArgBc,GAsgBdC,EArgBc,IAugBXD,EAAK,EAAIC,GAAI,KACZC,GAAOF,EAAKC,GAAM,EAClB2N,GAAY1N,GAAK4O,IAAIS,GAAKvP,EAAKE,EAC9BD,EAAKC,SAGV0N,GAAY3N,GAAI6O,IAAIS,GAAYtP,EAChC2N,GAAY5N,GAAI8O,IAAIS,GAAYvP,OAEpCzB,MA5WoBiR,CAA0BX,SACnC,CAACY,GAAWvB,GAAiBW,EAAiBhK,YAAUC,KArKjD,IAqKsEpB,IAAamB,YAAUC,KAAKpB,IAAaA,YAkJrH4L,GAAWpQ,OAGnBD,EACAE,EAHAwP,EAAM/R,UAOVuC,GAFAA,EAAIF,EAAIC,EAAEwQ,IAAI7K,YAAUC,KAAK,wCAEtBkJ,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IACnBsB,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,wBAEnC3F,EAAKA,EAAE6O,IAAI/O,GAAI2E,IAAIyJ,IAGnBsB,GAFAA,EAAMA,EAAItP,IAAIF,EAAE6O,IAAInJ,YAAUC,KAAK,yBAEzBlB,IAAIiB,YAAUC,KAAK,uBAAuBzF,IAAIJ,GAAGI,IAAIgO,IAGzDnO,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK5F,EAAEyQ,IAAI9K,YAAUC,KAAK,wCAAwC8K,WAAWjB,EAAOA,EAAIX,IAAInJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAGjK6J,WAUKc,GAAWF,EAAeM,OAClCC,EAAKP,EACLZ,EAAM/R,UAEVkT,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,GAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,sCAErB8B,EAAK5B,GAAiB4B,EAAG9B,IAAIuB,GAAKM,IAClClB,EAAMA,EAAItP,IAAIyQ,EAAG9B,IAAI,uCAITpK,IAAIiB,YAAUC,KAAK,sCAAuCzF,IAAIkQ,GAAIlQ,IAAIwO,GAAUhR,GAAKgT,IAterGjC,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,IAAM/I,YAAUC,KAAK,wCACjC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,YAAUC,KAAK,wCAClC8I,GAAY,KAAO/I,Y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"}