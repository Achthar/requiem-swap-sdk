{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/pool.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/weightedPairCalc.ts","../src/entities/weightedPair.ts","../src/entities/stables.ts","../src/entities/stablePairWrapper.ts","../src/entities/stableCalc.ts","../src/entities/swapStorage.ts","../src/entities/stablePool.ts","../src/entities/routeV3.ts","../src/entities/tradeV3.ts","../src/entities/routeV4.ts","../src/entities/tradeV4.ts","../src/entities/bonding.ts","../src/router.ts","../src/fetcher.ts","../src/stablesFetcher.ts","../src/routerV3.ts","../src/routerV4.ts"],"sourcesContent":["import JSBI from 'jsbi'\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  BSC_MAINNET = 56,\n  BSC_TESTNET = 97,\n  AVAX_MAINNET = 43114,\n  AVAX_TESTNET = 43113,\n  ARBITRUM_MAINNET = 42161,\n  ARBITRUM_TETSNET_RINKEBY = 421611,\n  MATIC_MAINNET = 137,\n  MATIC_TESTNET = 80001,\n  OASIS_TESTNET = 42261,\n  OASIS_MAINNET = 42262\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS: { [chainId: number]: string } = {\n  56: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  97: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n  80001: '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4',\n  43113: '0xC07098cdCf93b2dc5c20E749cDd1ba69cB9AcEBe',\n}\n\nexport const WEIGHTED_FACTORY_ADDRESS: { [chainId: number]: string } = {\n  43113: '0xacd3602152763C3AAFA705D8a90C36661ecD7d46',\n  42261: '0x274B1F7F8e66B044B2DC773E017750957f70490c'\n}\n\n// export const INIT_CODE_HASH = '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5'\n\n\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\n  56: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  97: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n  80001: '0xc2b3644608b464a0df0eb711ce9c6ce7535d1bd4d0154b8389738a3e7fbb1a61',\n  43113: '0x197a29e2e90d809812f533e62529432f8e2741455e49d25365a66b4be2a453dd',\n}\n\nexport const INIT_CODE_HASH_WEIGHTED: { [chainId: number]: string } = {\n  43113: '0xbeec252b6527ff023d9f20fa336f9f131a002be662ce64ef7f9ed17b5ea8b591',\n  42261: '0x6a869d7b57f2343c50f107424e084e4fd94b6a55e3cb98b6a396730db3ab5363'\n}\n\nexport const STABLE_POOL_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x0Be60C571BdA7841D8F6eE68afDBa648EC710fD7',\n  42261: '0x2a90276992ddC21C3585FE50f5B43D0Cf62aDe03'\n}\n\nexport const STABLE_POOL_LP_ADDRESS: { [chainId: number]: string } = {\n  43113: '0x3372de341a07418765ae12f77aee9029eaa4442a',\n  42261: '0x9364E91ca784ca51f88dE2a76a35Ba2665bdad04'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const TENK = JSBI.BigInt(10000)\nexport const _100 = JSBI.BigInt(100)\nexport const FEES_NUMERATOR = JSBI.BigInt(9975)\nexport const FEES_DENOMINATOR = JSBI.BigInt(10000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '..'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'BNB', 'BNB')\n\n  public static readonly NETWORK_CCY: {[chainId in ChainId]:Currency} ={\n    [ChainId.BSC_MAINNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.BSC_TESTNET]: new Currency(18, 'BNB', 'BNB'),\n    [ChainId.ARBITRUM_MAINNET]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Currency(18, 'ETH', 'ETH'),\n    [ChainId.AVAX_MAINNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.AVAX_TESTNET]: new Currency(18, 'AVAX', 'AVAX'),\n    [ChainId.MATIC_MAINNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.MATIC_TESTNET]: new Currency(18, 'MATIC', 'MATIC'),\n    [ChainId.OASIS_MAINNET]: new Currency(10, 'ROSE', 'ROSE'),\n    [ChainId.OASIS_TESTNET]: new Currency(10, 'ROSE', 'ROSE')\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst NETWORK_CCY = Currency.NETWORK_CCY\nconst ETHER = Currency.ETHER\nexport { ETHER, NETWORK_CCY }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly projectLink?: string\n\n  public constructor(\n    chainId: ChainId,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string,\n    projectLink?: string\n  ) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.projectLink = projectLink\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n\n}\n// this has not to be mixed up with the ERC20 token WETH on BSC or MATIC\n// these are the respective wrapped network tokens, e.g. WBNB for Binance\n// or WMATIC for Polygon\nexport const WRAPPED_NETWORK_TOKENS = {\n  [ChainId.BSC_MAINNET]: new Token(\n    ChainId.BSC_MAINNET,\n    '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_MAINNET]: new Token(\n    ChainId.ARBITRUM_MAINNET,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped ETH',\n    'https://www.binance.org'\n  ),\n  [ChainId.ARBITRUM_TETSNET_RINKEBY]: new Token(\n    ChainId.ARBITRUM_TETSNET_RINKEBY,\n    '0xaE8E19eFB41e7b96815649A6a60785e1fbA84C1e',\n    18,\n    'WBNB',\n    'Wrapped BNB',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_MAINNET]: new Token(\n    ChainId.AVAX_MAINNET,\n    '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.AVAX_TESTNET]: new Token(\n    ChainId.AVAX_TESTNET,\n    '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\n    18,\n    'WAVAX',\n    'Wrapped AVAX',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_MAINNET]: new Token(\n    ChainId.MATIC_MAINNET,\n    '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    18,\n    'WMATIC',\n    'Wrapped MATIC',\n    'https://www.binance.org'\n  ),\n  [ChainId.OASIS_TESTNET]:\n  new Token( ChainId.OASIS_TESTNET,\n    '0xfb40cd35C0cF322fA3cfB8D67b533Bd9ad7df056',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n  [ChainId.OASIS_MAINNET]:\n  new Token( ChainId.OASIS_MAINNET,\n    '0xfb40cd35C0cF322fA3cfB8D67b533Bd9ad7df056',\n    18,\n    'wROSE',\n    'Wrapped ROSE',\n    'https://docs.oasis.dev/'\n  ),\n\n}\n","import { Pair } from \"./pair\"\nimport { StablePairWrapper } from \"./stablePairWrapper\"\nimport { WeightedPair } from \"./weightedPair\"\n\nexport type Pool = Pair | StablePairWrapper | WeightedPair\n\nexport enum PoolType {\n    Pair = 'Pair',\n    StablePairWrapper = 'StablePairWrapper',\n    WeightedPair = 'WeightedPair',\n}","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER, NETWORK_CCY } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BigintIsh, Rounding, TEN, SolidityType, ChainId } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Helper that calls the constructor with the more flexible network currency\n   * dependent on the selected chainId\n   * @param amount ether amount in wei\n   */\n  public static networkCCYAmount(chainId: ChainId, amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(NETWORK_CCY[chainId], amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n\n  public toBigNumber(): BigNumber { return BigNumber.from(this.numerator.toString()) }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\n\n// minimal interface so the input output comparator may be shared across types\nexport interface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { RouteV3 } from 'entities/routeV3'\nimport { RouteV4 } from 'entities/routeV4'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n// import { Pair } from 'entities'\nimport { StablePairWrapper } from 'entities/stablePairWrapper'\nimport { WeightedPair } from 'entities'\nimport { PoolType } from '../pool'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  public static fromRouteV3(route: RouteV3): Price {\n    const prices: Price[] = []\n    for (const [i, source] of route.sources.entries()) {\n      // if (source.type !== 'Pair') {\n      //   console.log(\"invariant\", (source as StablePairWrapper).status)\n      //   invariant((source as StablePairWrapper).status === 'PRICED', 'NOT PRICED')\n      // }\n      prices.push(\n        route.path[i].equals(source.token0)\n          ? (source.type === PoolType.Pair\n            ? new Price(source.reserve0.currency, source.reserve1.currency, source.reserve0.raw, source.reserve1.raw)\n            // here we need the recorded prcing bases\n            : new Price(source.reserve0.currency, source.reserve1.currency,\n              (source as StablePairWrapper).pricingBasesIn[0].raw,\n              (source as StablePairWrapper).pricingBasesOut[1].raw))\n          : (source.type === PoolType.Pair ?\n            new Price(source.reserve1.currency, source.reserve0.currency, source.reserve1.raw, source.reserve0.raw)\n            // pricing base for stablePriceWrapper\n            : new Price(source.reserve1.currency, source.reserve0.currency,\n              (source as StablePairWrapper).pricingBasesIn[1].raw,\n              (source as StablePairWrapper).pricingBasesOut[0].raw))\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // upgraded version to include StablePairWrappers in a Route\n  // as well as weighted pairs\n  public static fromRouteV4(route: RouteV4): Price {\n    const prices: Price[] = []\n    for (const [i, pool] of route.pools.entries()) {\n      let price: any\n      if (route.path[i].equals(pool.token0)) {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency, pool.reserve0.raw, pool.reserve1.raw)\n            break;\n          }\n          // here we need the recorded prcing bases\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as StablePairWrapper).pricingBasesIn[0].raw,\n              (pool as StablePairWrapper).pricingBasesOut[1].raw)\n            break;\n          }\n          // prcing for weighted pairs - not directly derivable from token amounts\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve0.currency, pool.reserve1.currency,\n              (pool as WeightedPair).pricingBasesIn[0].raw,\n              (pool as WeightedPair).pricingBasesOut[1].raw)\n            break;\n          }\n        }\n      }\n      else {\n        switch (pool.type) {\n          // regular UniswapV2 type pairs can be priced using just amounts\n          case PoolType.Pair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency, pool.reserve1.raw, pool.reserve0.raw)\n            break;\n          }\n          // pricing base for stablePriceWrapper\n          case PoolType.StablePairWrapper: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as StablePairWrapper).pricingBasesIn[1].raw,\n              (pool as StablePairWrapper).pricingBasesOut[0].raw)\n            break;\n          }\n          // pricing base for weighted pairs\n          case PoolType.WeightedPair: {\n            price = new Price(pool.reserve1.currency, pool.reserve0.currency,\n              (pool as WeightedPair).pricingBasesIn[1].raw,\n              (pool as WeightedPair).pricingBasesOut[0].raw)\n            break;\n          }\n        }\n      }\n      prices.push(price)\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  FEES_NUMERATOR,\n  FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { Source } from './source'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair implements Source {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const chainId = tokenA.chainId\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS[chainId],\n            keccak256(\n              ['bytes'],\n              [pack(\n                ['address', 'address'],\n                [tokens[0].address, tokens[1].address]\n              )]\n            ),\n            INIT_CODE_HASH[chainId]\n          ),\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.Pair\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, FEES_NUMERATOR)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, FEES_DENOMINATOR), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), FEES_DENOMINATOR)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), FEES_NUMERATOR)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pairs[0].chainId] && pairs[0].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pairs[0].chainId] && pairs[pairs.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId,amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId,slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nconst ZERO = BigNumber.from(0)\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\nconst TENK = BigNumber.from(10000)\nconst _256 = BigNumber.from('256')\nconst _128 = BigNumber.from('128')\nconst MIN_PRECISION = 32;\nconst MAX_PRECISION = 127;\n\nconst FIXED_1 = BigNumber.from('0x080000000000000000000000000000000')\nconst FIXED_2 = BigNumber.from('0x100000000000000000000000000000000')\nconst MAX_NUM = BigNumber.from('0x200000000000000000000000000000000')\n\nconst LN2_NUMERATOR = BigNumber.from('0x3f80fe03f80fe03f80fe03f80fe03f8')\nconst LN2_DENOMINATOR = BigNumber.from('0x5b9de1d10bf4103d647b0955897ba80')\n\nconst OPT_LOG_MAX_VAL = BigNumber.from('0x15bf0a8b1457695355fb8ac404e7a79e3')\nconst OPT_EXP_MAX_VAL = BigNumber.from('0x800000000000000000000000000000000')\n\n// const LAMBERT_CONV_RADIUS = BigNumber.from('0x002f16ac6c59de6f8d5d6f63c1482a7c86')\n// const LAMBERT_POS2_SAMPLE = BigNumber.from('0x0003060c183060c183060c183060c18306')\n// const LAMBERT_POS2_MAXVAL = BigNumber.from('0x01af16ac6c59de6f8d5d6f63c1482a7c80')\n// const LAMBERT_POS3_MAXVAL = BigNumber.from('0x6b22d43e72c326539cceeef8bb48f255ff')\n\n// const MAX_UNF_WEIGHT = BigNumber.from('0x10c6f7a0b5ed8d36b4c7f34938583621fafc8b0079a2834d26fa3fcc9ea9')\n\nconst maxExpArray = new Array<BigNumber>(128)\nmaxExpArray[32] = BigNumber.from('0x1c35fedd14ffffffffffffffffffffffff')\nmaxExpArray[33] = BigNumber.from('0x1b0ce43b323fffffffffffffffffffffff')\nmaxExpArray[34] = BigNumber.from('0x19f0028ec1ffffffffffffffffffffffff')\nmaxExpArray[35] = BigNumber.from('0x18ded91f0e7fffffffffffffffffffffff')\nmaxExpArray[36] = BigNumber.from('0x17d8ec7f0417ffffffffffffffffffffff')\nmaxExpArray[37] = BigNumber.from('0x16ddc6556cdbffffffffffffffffffffff')\nmaxExpArray[38] = BigNumber.from('0x15ecf52776a1ffffffffffffffffffffff')\nmaxExpArray[39] = BigNumber.from('0x15060c256cb2ffffffffffffffffffffff')\nmaxExpArray[40] = BigNumber.from('0x1428a2f98d72ffffffffffffffffffffff')\nmaxExpArray[41] = BigNumber.from('0x13545598e5c23fffffffffffffffffffff')\nmaxExpArray[42] = BigNumber.from('0x1288c4161ce1dfffffffffffffffffffff')\nmaxExpArray[43] = BigNumber.from('0x11c592761c666fffffffffffffffffffff')\nmaxExpArray[44] = BigNumber.from('0x110a688680a757ffffffffffffffffffff')\nmaxExpArray[45] = BigNumber.from('0x1056f1b5bedf77ffffffffffffffffffff')\nmaxExpArray[46] = BigNumber.from('0x0faadceceeff8bffffffffffffffffffff')\nmaxExpArray[47] = BigNumber.from('0x0f05dc6b27edadffffffffffffffffffff')\nmaxExpArray[48] = BigNumber.from('0x0e67a5a25da4107fffffffffffffffffff')\nmaxExpArray[49] = BigNumber.from('0x0dcff115b14eedffffffffffffffffffff')\nmaxExpArray[50] = BigNumber.from('0x0d3e7a392431239fffffffffffffffffff')\nmaxExpArray[51] = BigNumber.from('0x0cb2ff529eb71e4fffffffffffffffffff')\nmaxExpArray[52] = BigNumber.from('0x0c2d415c3db974afffffffffffffffffff')\nmaxExpArray[53] = BigNumber.from('0x0bad03e7d883f69bffffffffffffffffff')\nmaxExpArray[54] = BigNumber.from('0x0b320d03b2c343d5ffffffffffffffffff')\nmaxExpArray[55] = BigNumber.from('0x0abc25204e02828dffffffffffffffffff')\nmaxExpArray[56] = BigNumber.from('0x0a4b16f74ee4bb207fffffffffffffffff')\nmaxExpArray[57] = BigNumber.from('0x09deaf736ac1f569ffffffffffffffffff')\nmaxExpArray[58] = BigNumber.from('0x0976bd9952c7aa957fffffffffffffffff')\nmaxExpArray[59] = BigNumber.from('0x09131271922eaa606fffffffffffffffff')\nmaxExpArray[60] = BigNumber.from('0x08b380f3558668c46fffffffffffffffff')\nmaxExpArray[61] = BigNumber.from('0x0857ddf0117efa215bffffffffffffffff')\nmaxExpArray[62] = BigNumber.from('0x07ffffffffffffffffffffffffffffffff')\nmaxExpArray[63] = BigNumber.from('0x07abbf6f6abb9d087fffffffffffffffff')\nmaxExpArray[64] = BigNumber.from('0x075af62cbac95f7dfa7fffffffffffffff')\nmaxExpArray[65] = BigNumber.from('0x070d7fb7452e187ac13fffffffffffffff')\nmaxExpArray[66] = BigNumber.from('0x06c3390ecc8af379295fffffffffffffff')\nmaxExpArray[67] = BigNumber.from('0x067c00a3b07ffc01fd6fffffffffffffff')\nmaxExpArray[68] = BigNumber.from('0x0637b647c39cbb9d3d27ffffffffffffff')\nmaxExpArray[69] = BigNumber.from('0x05f63b1fc104dbd39587ffffffffffffff')\nmaxExpArray[70] = BigNumber.from('0x05b771955b36e12f7235ffffffffffffff')\nmaxExpArray[71] = BigNumber.from('0x057b3d49dda84556d6f6ffffffffffffff')\nmaxExpArray[72] = BigNumber.from('0x054183095b2c8ececf30ffffffffffffff')\nmaxExpArray[73] = BigNumber.from('0x050a28be635ca2b888f77fffffffffffff')\nmaxExpArray[74] = BigNumber.from('0x04d5156639708c9db33c3fffffffffffff')\nmaxExpArray[75] = BigNumber.from('0x04a23105873875bd52dfdfffffffffffff')\nmaxExpArray[76] = BigNumber.from('0x0471649d87199aa990756fffffffffffff')\nmaxExpArray[77] = BigNumber.from('0x04429a21a029d4c1457cfbffffffffffff')\nmaxExpArray[78] = BigNumber.from('0x0415bc6d6fb7dd71af2cb3ffffffffffff')\nmaxExpArray[79] = BigNumber.from('0x03eab73b3bbfe282243ce1ffffffffffff')\nmaxExpArray[80] = BigNumber.from('0x03c1771ac9fb6b4c18e229ffffffffffff')\nmaxExpArray[81] = BigNumber.from('0x0399e96897690418f785257fffffffffff')\nmaxExpArray[82] = BigNumber.from('0x0373fc456c53bb779bf0ea9fffffffffff')\nmaxExpArray[83] = BigNumber.from('0x034f9e8e490c48e67e6ab8bfffffffffff')\nmaxExpArray[84] = BigNumber.from('0x032cbfd4a7adc790560b3337ffffffffff')\nmaxExpArray[85] = BigNumber.from('0x030b50570f6e5d2acca94613ffffffffff')\nmaxExpArray[86] = BigNumber.from('0x02eb40f9f620fda6b56c2861ffffffffff')\nmaxExpArray[87] = BigNumber.from('0x02cc8340ecb0d0f520a6af58ffffffffff')\nmaxExpArray[88] = BigNumber.from('0x02af09481380a0a35cf1ba02ffffffffff')\nmaxExpArray[89] = BigNumber.from('0x0292c5bdd3b92ec810287b1b3fffffffff')\nmaxExpArray[90] = BigNumber.from('0x0277abdcdab07d5a77ac6d6b9fffffffff')\nmaxExpArray[91] = BigNumber.from('0x025daf6654b1eaa55fd64df5efffffffff')\nmaxExpArray[92] = BigNumber.from('0x0244c49c648baa98192dce88b7ffffffff')\nmaxExpArray[93] = BigNumber.from('0x022ce03cd5619a311b2471268bffffffff')\nmaxExpArray[94] = BigNumber.from('0x0215f77c045fbe885654a44a0fffffffff')\nmaxExpArray[95] = BigNumber.from('0x01ffffffffffffffffffffffffffffffff')\nmaxExpArray[96] = BigNumber.from('0x01eaefdbdaaee7421fc4d3ede5ffffffff')\nmaxExpArray[97] = BigNumber.from('0x01d6bd8b2eb257df7e8ca57b09bfffffff')\nmaxExpArray[98] = BigNumber.from('0x01c35fedd14b861eb0443f7f133fffffff')\nmaxExpArray[99] = BigNumber.from('0x01b0ce43b322bcde4a56e8ada5afffffff')\nmaxExpArray[100] = BigNumber.from('0x019f0028ec1fff007f5a195a39dfffffff')\nmaxExpArray[101] = BigNumber.from('0x018ded91f0e72ee74f49b15ba527ffffff')\nmaxExpArray[102] = BigNumber.from('0x017d8ec7f04136f4e5615fd41a63ffffff')\nmaxExpArray[103] = BigNumber.from('0x016ddc6556cdb84bdc8d12d22e6fffffff')\nmaxExpArray[104] = BigNumber.from('0x015ecf52776a1155b5bd8395814f7fffff')\nmaxExpArray[105] = BigNumber.from('0x015060c256cb23b3b3cc3754cf40ffffff')\nmaxExpArray[106] = BigNumber.from('0x01428a2f98d728ae223ddab715be3fffff')\nmaxExpArray[107] = BigNumber.from('0x013545598e5c23276ccf0ede68034fffff')\nmaxExpArray[108] = BigNumber.from('0x01288c4161ce1d6f54b7f61081194fffff')\nmaxExpArray[109] = BigNumber.from('0x011c592761c666aa641d5a01a40f17ffff')\nmaxExpArray[110] = BigNumber.from('0x0110a688680a7530515f3e6e6cfdcdffff')\nmaxExpArray[111] = BigNumber.from('0x01056f1b5bedf75c6bcb2ce8aed428ffff')\nmaxExpArray[112] = BigNumber.from('0x00faadceceeff8a0890f3875f008277fff')\nmaxExpArray[113] = BigNumber.from('0x00f05dc6b27edad306388a600f6ba0bfff')\nmaxExpArray[114] = BigNumber.from('0x00e67a5a25da41063de1495d5b18cdbfff')\nmaxExpArray[115] = BigNumber.from('0x00dcff115b14eedde6fc3aa5353f2e4fff')\nmaxExpArray[116] = BigNumber.from('0x00d3e7a3924312399f9aae2e0f868f8fff')\nmaxExpArray[117] = BigNumber.from('0x00cb2ff529eb71e41582cccd5a1ee26fff')\nmaxExpArray[118] = BigNumber.from('0x00c2d415c3db974ab32a51840c0b67edff')\nmaxExpArray[119] = BigNumber.from('0x00bad03e7d883f69ad5b0a186184e06bff')\nmaxExpArray[120] = BigNumber.from('0x00b320d03b2c343d4829abd6075f0cc5ff')\nmaxExpArray[121] = BigNumber.from('0x00abc25204e02828d73c6e80bcdb1a95bf')\nmaxExpArray[122] = BigNumber.from('0x00a4b16f74ee4bb2040a1ec6c15fbbf2df')\nmaxExpArray[123] = BigNumber.from('0x009deaf736ac1f569deb1b5ae3f36c130f')\nmaxExpArray[124] = BigNumber.from('0x00976bd9952c7aa957f5937d790ef65037')\nmaxExpArray[125] = BigNumber.from('0x009131271922eaa6064b73a22d0bd4f2bf')\nmaxExpArray[126] = BigNumber.from('0x008b380f3558668c46c91c49a2f8e967b9')\nmaxExpArray[127] = BigNumber.from('0x00857ddf0117efa215952912839f6473e6')\n\nfunction leftShift(num: BigNumber, shift: BigNumber) {\n    return num.mul(TWO.pow(shift))\n}\n\nfunction signedRightShift(num: BigNumber, shift: BigNumber) {\n    return num.div(TWO.pow(shift))\n}\n\n/**\n     * @dev General Description:\n     *     Determine a value of precision.\n     *     Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n     *     Return the result along with the precision used.\n     *\n     * Detailed Description:\n     *     Instead of calculating \"base ^ exp\", we calculate \"e ^ (log(base) * exp)\".\n     *     The value of \"log(base)\" is represented with an integer slightly smaller than \"log(base) * 2 ^ precision\".\n     *     The larger \"precision\" is, the more accurately this value represents the real value.\n     *     However, the larger \"precision\" is, the more bits are required in order to store this value.\n     *     And the exponentiation function, which takes \"x\" and calculates \"e ^ x\", is limited to a maximum exponent (maximum value of \"x\").\n     *     This maximum exponent depends on the \"precision\" used, and it is given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n     *     Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n     *     This allows us to compute \"base ^ exp\" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n     *     This functions assumes that \"_expN < 2 ^ 256 / log(MAX_NUM - 1)\", otherwise the multiplication should be replaced with a \"safeMul\".\n     *     Since we rely on unsigned-integer arithmetic and \"base < 1\" ==> \"log(base) < 0\", this function does not support \"_baseN < _baseD\".\n     */\nexport function power(\n    _baseN: BigNumber,\n    _baseD: BigNumber,\n    _expN: BigNumber,\n    _expD: BigNumber\n): [BigNumber, number] {\n    invariant(_baseN.gt(_baseD), \"not support _baseN < _baseD\");\n    invariant(_baseN.lt(MAX_NUM))\n\n    let baseLog;\n    let base = (_baseN.mul(FIXED_1)).div(_baseD);\n    if (base.lt(OPT_LOG_MAX_VAL)) {\n        baseLog = optimalLog(base);\n    } else {\n        baseLog = generalLog(base);\n    }\n\n    let baseLogTimesExp = (baseLog.mul(_expN)).div(_expD);\n    if (baseLogTimesExp.lt(OPT_EXP_MAX_VAL)) {\n        return [optimalExp(baseLogTimesExp), MAX_PRECISION]\n    } else {\n        let precision = findPositionInMaxExpArray(baseLogTimesExp);\n        return [generalExp(signedRightShift(baseLogTimesExp, BigNumber.from(MAX_PRECISION - precision)), BigNumber.from(precision)), precision]\n    }\n}\n\n/**\n * @dev computes the largest integer smaller than or equal to the binary logarithm of the input.\n */\nfunction floorLog2(_n: BigNumber): BigNumber {\n    let res = ZERO;\n    if (_n.lt(_256)) {\n        // At most 8 iterations\n        while (_n.gt(ONE)) {\n            _n = signedRightShift(_n, ONE);\n            res = res.add(ONE);\n        }\n    } else {\n        // Exactly 8 iterations\n        for (let s = _128; s.gt(ZERO); s = signedRightShift(s, ONE)) {\n            if (_n.gt(leftShift(ONE, s))) {\n                _n = signedRightShift(_n, s)\n                res = res.or(s);\n            }\n        }\n    }\n\n    return res;\n}\n\n/**\n * @dev computes log(x / FIXED_1) * FIXED_1.\n * This functions assumes that \"x >= FIXED_1\", because the output would be negative otherwise.\n */\nexport function generalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n    // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n    if (x.gte(FIXED_2)) {\n        const count = floorLog2(x.div(FIXED_1));\n        x = signedRightShift(x, count);\n        // now x < 2\n        res = count.mul(FIXED_1);\n    }\n\n    // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n    if (x.gt(FIXED_1)) {\n        for (let i = MAX_PRECISION; i > 0; --i) {\n            x = (x.mul(x)).div(FIXED_1);\n            // now 1 < x < 4\n            if (x.gte(FIXED_2)) {\n                x = signedRightShift(x, ONE);\n                // now 1 < x < 2\n                res = res.add(leftShift(ONE, BigNumber.from(i - 1)));\n            }\n        }\n    }\n\n    return (res.mul(LN2_NUMERATOR)).div(LN2_DENOMINATOR)\n}\n\n/**\n    * @dev computes log(x / FIXED_1) * FIXED_1\n    * Input range: FIXED_1 <= x <= OPT_LOG_MAX_VAL - 1\n    * Auto-generated via \"PrintFunctionOptimalLog.py\"\n    * Detailed description:\n    * - Rewrite the input as a product of natural exponents and a single residual r, such that 1 < r < 2\n    * - The natural logarithm of each (pre-calculated) exponent is the degree of the exponent\n    * - The natural logarithm of r is calculated via Taylor series for log(1 + x), where x = r - 1\n    * - The natural logarithm of the input is calculated by summing up the intermediate results above\n    * - For example: log(250) = log(e^4 * e^1 * e^0.5 * 1.021692859) = 4 + 1 + 0.5 + log(1 + 0.021692859)\n    */\nexport function optimalLog(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n    let w;\n\n    if (x.gte('0xd3094c70f034de4b96ff7d5b6f99fcd8')) {\n        res = res.add(BigNumber.from('0x40000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xd3094c70f034de4b96ff7d5b6f99fcd8'));\n    }\n    // add 1 / 2^1\n    if (x.gte('0xa45af1e1f40c333b3de1db4dd55f29a7')) {\n        res = res.add(BigNumber.from('0x20000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0xa45af1e1f40c333b3de1db4dd55f29a7'));\n    }\n    // add 1 / 2^2\n    if (x.gte('0x910b022db7ae67ce76b441c27035c6a1')) {\n        res = res.add(BigNumber.from('0x10000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x910b022db7ae67ce76b441c27035c6a1'));\n    }\n    // add 1 / 2^3\n    if (x.gte('0x88415abbe9a76bead8d00cf112e4d4a8')) {\n        res = res.add(BigNumber.from('0x08000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x88415abbe9a76bead8d00cf112e4d4a8'));\n    }\n    // add 1 / 2^4\n    if (x.gte('0x84102b00893f64c705e841d5d4064bd3')) {\n        res = res.add(BigNumber.from('0x04000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x84102b00893f64c705e841d5d4064bd3'));\n    }\n    // add 1 / 2^5\n    if (x.gte('0x8204055aaef1c8bd5c3259f4822735a2')) {\n        res = res.add(BigNumber.from('0x02000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x8204055aaef1c8bd5c3259f4822735a2'));\n    }\n    // add 1 / 2^6\n    if (x.gte('0x810100ab00222d861931c15e39b44e99')) {\n        res = res.add(BigNumber.from('0x01000000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x810100ab00222d861931c15e39b44e99'));\n    }\n    // add 1 / 2^7\n    if (x.gte('0x808040155aabbbe9451521693554f733')) {\n        res = res.add(BigNumber.from('0x00800000000000000000000000000000'));\n        x = (x.mul(FIXED_1)).div(BigNumber.from('0x808040155aabbbe9451521693554f733'));\n    }\n    // add 1 / 2^8\n\n    z = y = x.sub(FIXED_1);\n    w = (y.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x100000000000000000000000000000000').sub(y)).div(BigNumber.from('0x100000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^01 / 01 - y^02 / 02\n    res = res.add(z.mul(BigNumber.from('0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa').sub(y)).div(BigNumber.from('0x200000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^03 / 03 - y^04 / 04\n    res = res.add(z.mul(BigNumber.from('0x099999999999999999999999999999999').sub(y)).div(BigNumber.from('0x300000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^05 / 05 - y^06 / 06\n    res = res.add(z.mul(BigNumber.from('0x092492492492492492492492492492492').sub(y)).div(BigNumber.from('0x400000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^07 / 07 - y^08 / 08\n    res = res.add(z.mul(BigNumber.from('0x08e38e38e38e38e38e38e38e38e38e38e').sub(y)).div(BigNumber.from('0x500000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^09 / 09 - y^10 / 10\n    res = res.add(z.mul(BigNumber.from('0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b').sub(y)).div(BigNumber.from('0x600000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^11 / 11 - y^12 / 12\n    res = res.add(z.mul(BigNumber.from('0x089d89d89d89d89d89d89d89d89d89d89').sub(y)).div(BigNumber.from('0x700000000000000000000000000000000')));\n    z = (z.mul(w)).div(FIXED_1);\n    // add y^13 / 13 - y^14 / 14\n    res = res.add(z.mul(BigNumber.from('0x088888888888888888888888888888888').sub(y)).div(BigNumber.from('0x800000000000000000000000000000000')));\n    // add y^15 / 15 - y^16 / 16\n\n    return res;\n}\n\nexport function optimalExp(x: BigNumber): BigNumber {\n    let res = ZERO;\n\n    let y;\n    let z;\n\n    z = y = x.mod(BigNumber.from('0x10000000000000000000000000000000'));\n    // get the input modulo 2^(-3)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x10e1b3be415a0000')));\n    // add y^02 * (20! / 02!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x05a0913f6b1e0000')));\n    // add y^03 * (20! / 03!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0168244fdac78000')));\n    // add y^04 * (20! / 04!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x004807432bc18000')));\n    // add y^05 * (20! / 05!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000c0135dca04000')));\n    // add y^06 * (20! / 06!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0001b707b1cdc000')));\n    // add y^07 * (20! / 07!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000036e0f639b800')));\n    // add y^08 * (20! / 08!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000618fee9f800')));\n    // add y^09 * (20! / 09!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000009c197dcc00')));\n    // add y^10 * (20! / 10!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000e30dce400')));\n    // add y^11 * (20! / 11!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000012ebd1300')));\n    // add y^12 * (20! / 12!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000017499f00')));\n    // add y^13 * (20! / 13!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000001a9d480')));\n    // add y^14 * (20! / 14!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x00000000001c6380')));\n    // add y^15 * (20! / 15!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000001c638')));\n    // add y^16 * (20! / 16!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000001ab8')));\n    // add y^17 * (20! / 17!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x000000000000017c')));\n    // add y^18 * (20! / 18!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000014')));\n    // add y^19 * (20! / 19!)\n    z = (z.mul(y)).div(FIXED_1);\n    res = res.add(z.mul(BigNumber.from('0x0000000000000001')));\n    // add y^20 * (20! / 20!)\n    res = res.div(BigNumber.from('0x21c3677c82b40000')).add(y).add(FIXED_1);\n    // divide by 20! and then add y^1 / 1! + y^0 / 0!\n\n    if (!(x.and(BigNumber.from('0x010000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1c3d6a24ed82218787d624d3e5eba95f9'))).div(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e776'));\n    // multiply by e^2^(-3)\n    if (!(x.and(BigNumber.from('0x020000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x18ebef9eac820ae8682b9793ac6d1e778'))).div(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed4'));\n    // multiply by e^2^(-2)\n    if (!(x.and(BigNumber.from('0x040000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x1368b2fc6f9609fe7aceb46aa619baed5'))).div(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21f'));\n    // multiply by e^2^(-1)\n    if (!(x.and(BigNumber.from('0x080000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0bc5ab1b16779be3575bd8f0520a9f21e'))).div(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c9'));\n    // multiply by e^2^(+0)\n    if (!(x.and(BigNumber.from('0x100000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0454aaa8efe072e7f6ddbab84b40a55c5'))).div(BigNumber.from('0x00960aadc109e7a3bf4578099615711ea'));\n    // multiply by e^2^(+1)\n    if (!(x.and(BigNumber.from('0x200000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x00960aadc109e7a3bf4578099615711d7'))).div(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdce3d'));\n    // multiply by e^2^(+2)\n    if (!(x.and(BigNumber.from('0x400000000000000000000000000000000')).isZero())) res = (res.mul(BigNumber.from('0x0002bf84208204f5977f9a8cf01fdc307'))).div(BigNumber.from('0x0000003c6ab775dd0b95b4cbee7e65d11'));\n    // multiply by e^2^(+3)\n\n    return res;\n}\n\n/**\n   * @dev this function can be auto-generated by the script \"PrintFunctionGeneralExp.py\".\n   * it approximates \"e ^ x\" via maclaurin summation: \"(x^0)/0! + (x^1)/1! + ... + (x^n)/n!\".\n   * it returns \"e ^ (x / 2 ^ precision) * 2 ^ precision\", that is, the result is upshifted for accuracy.\n   * the global \"maxExpArray\" maps each \"precision\" to \"((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1\".\n   * the maximum permitted value for \"x\" is therefore given by \"maxExpArray[precision] >> (MAX_PRECISION - precision)\".\n   */\nexport function generalExp(_x: BigNumber, _precision: BigNumber) {\n    let xi = _x;\n    let res = ZERO;\n\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x3442c4e6074a82f1797f72ac0000000'));\n    // add x^02 * (33! / 02!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x116b96f757c380fb287fd0e40000000'));\n    // add x^03 * (33! / 03!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x045ae5bdd5f0e03eca1ff4390000000'));\n    // add x^04 * (33! / 04!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00defabf91302cd95b9ffda50000000'));\n    // add x^05 * (33! / 05!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x002529ca9832b22439efff9b8000000'));\n    // add x^06 * (33! / 06!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00054f1cf12bd04e516b6da88000000'));\n    // add x^07 * (33! / 07!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000a9e39e257a09ca2d6db51000000'));\n    // add x^08 * (33! / 08!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000012e066e7b839fa050c309000000'));\n    // add x^09 * (33! / 09!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000001e33d7d926c329a1ad1a800000'));\n    // add x^10 * (33! / 10!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000002bee513bdb4a6b19b5f800000'));\n    // add x^11 * (33! / 11!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000003a9316fa79b88eccf2a00000'));\n    // add x^12 * (33! / 12!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000048177ebe1fa812375200000'));\n    // add x^13 * (33! / 13!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000005263fe90242dcbacf00000'));\n    // add x^14 * (33! / 14!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000057e22099c030d94100000'));\n    // add x^15 * (33! / 15!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000057e22099c030d9410000'));\n    // add x^16 * (33! / 16!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000052b6b54569976310000'));\n    // add x^17 * (33! / 17!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000004985f67696bf748000'));\n    // add x^18 * (33! / 18!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000003dea12ea99e498000'));\n    // add x^19 * (33! / 19!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000031880f2214b6e000'));\n    // add x^20 * (33! / 20!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000025bcff56eb36000'));\n    // add x^21 * (33! / 21!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000001b722e10ab1000'));\n    // add x^22 * (33! / 22!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000001317c70077000'));\n    // add x^23 * (33! / 23!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000cba84aafa00'));\n    // add x^24 * (33! / 24!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000082573a0a00'));\n    // add x^25 * (33! / 25!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000005035ad900'));\n    // add x^26 * (33! / 26!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x000000000000000000000002f881b00'));\n    // add x^27 * (33! / 27!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000001b29340'));\n    // add x^28 * (33! / 28!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x00000000000000000000000000efc40'));\n    // add x^29 * (33! / 29!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000007fe0'));\n    // add x^30 * (33! / 30!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000420'));\n    // add x^31 * (33! / 31!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000021'));\n    // add x^32 * (33! / 32!)\n    xi = signedRightShift(xi.mul(_x), _precision);\n    res = res.add(xi.mul('0x0000000000000000000000000000001'));\n    // add x^33 * (33! / 33!)\n\n\n    return (res.div(BigNumber.from('0x688589cc0e9505e2f2fee5580000000'))).add(_x).add(leftShift(ONE, _precision));\n    // divide by 33! and then add x^1 / 1! + x^0 / 0!\n}\n\n/**\n    * @dev the global \"maxExpArray\" is sorted in descending order, and therefore the following statements are equivalent:\n    * - This function finds the position of [the smallest value in \"maxExpArray\" larger than or equal to \"x\"]\n    * - This function finds the highest position of [a value in \"maxExpArray\" larger than or equal to \"x\"]\n    */\nexport function findPositionInMaxExpArray(_x: BigNumber): number {\n    let lo = MIN_PRECISION;\n    let hi = MAX_PRECISION;\n\n    while (lo + 1 < hi) {\n        let mid = (lo + hi) / 2;\n        if (maxExpArray[mid].gte(_x)) lo = mid;\n        else hi = mid;\n    }\n\n    if (maxExpArray[hi].gte(_x)) return hi;\n    if (maxExpArray[lo].gte(_x)) return lo;\n\n    invariant(false);\n}\n\n/**\n * @dev given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset,\n *\n * Formula:\n * return = reserveOut * (1 - (reserveIn * 10000 / (reserveIn * 10000 + amountIn * (10000 - swapFee))) ^ (tokenWeightIn / tokenWeightOut))\n *\n * @param amountIn                  source reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountOut\n */\nexport function getAmountOut(\n    amountIn: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n): BigNumber {\n    // validate input\n    invariant(amountIn.gt(ZERO), \"RequiemFormula: INSUFFICIENT_INPUT_AMOUNT\");\n    // if (amountIn.lte(ZERO) || amountIn.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    const amountInWithFee = amountIn.mul(TENK.sub(swapFee))\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        return (reserveOut.mul(amountInWithFee)).div(reserveIn.mul(TENK).add(amountInWithFee));\n    }\n\n    // let result;\n    // let precision: number;\n    const baseN = (reserveIn.mul(TENK)).add(amountInWithFee)\n    const [result, precision] = power(baseN, reserveIn.mul(TENK), tokenWeightIn, tokenWeightOut);\n\n    const temp1 = reserveOut.mul(result);\n    const temp2 = leftShift(reserveOut, BigNumber.from(precision));\n\n    return (temp1.sub(temp2)).div(result)\n}\n\n/**\n * @dev given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n *\n * Formula:\n * return = reserveIn * ( (reserveOut / (reserveOut - amountOut)) ^ (tokenWeightOut / tokenWeightIn) - 1) * (10000/ (10000 - swapFee)\n *\n * @param amountOut     target reserve amount\n * @param reserveIn    source reserve balance\n * @param reserveOut    target reserve balance\n * @param tokenWeightIn     source reserve weight, represented in ppm (2-98)\n * @param tokenWeightOut     target reserve weight, represented in ppm (2-98)\n * @param swapFee                  swap fee of the conversion\n *\n * @return amountIn\n */\nexport function getAmountIn(\n    amountOut: BigNumber,\n    reserveIn: BigNumber,\n    reserveOut: BigNumber,\n    tokenWeightIn: BigNumber,\n    tokenWeightOut: BigNumber,\n    swapFee: BigNumber\n) {\n    // validate input\n    invariant(amountOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n    // if (amountOut.gte(ZERO) || amountOut.eq(ZERO))\n    //     return ZERO\n\n    invariant(reserveIn.gt(ZERO) && reserveOut.gt(ZERO), \"RequiemFormula: INSUFFICIENT_LIQUIDITY\");\n    // special case for equal weights\n    if (tokenWeightIn.eq(tokenWeightOut)) {\n        const numerator = reserveIn.mul(amountOut).mul(TENK);\n        const denominator = reserveOut.sub(amountOut).mul(TENK.sub(swapFee));\n        return (numerator.div(denominator)).add(1);\n    }\n\n    const baseD = reserveOut.sub(amountOut);\n    const [result, precision] = power(reserveOut, baseD, tokenWeightOut, tokenWeightIn);\n    const baseReserveIn = reserveIn.mul(TENK);\n    const temp1 = baseReserveIn.mul(result);\n    const temp2 = leftShift(baseReserveIn, BigNumber.from(precision));\n    return (signedRightShift(temp1.sub(temp2), BigNumber.from(precision)).div(TENK.sub(swapFee))).add(1);\n}\n\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport {\n  BigintIsh,\n  WEIGHTED_FACTORY_ADDRESS,\n  INIT_CODE_HASH_WEIGHTED,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  // ONE,\n  FIVE,\n  _100,\n  // FEES_NUMERATOR,\n  // FEES_DENOMINATOR,\n  ChainId,\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { getAmountOut, getAmountIn } from './weightedPairCalc'\nimport { PoolType } from './pool'\n\nlet PAIR_ADDRESS_CACHE: {\n  [token0Address: string]: {\n    [token1Address: string]: {\n      [weight0_fee: string]: string\n    }\n  }\n} = {}\n\nexport class WeightedPair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  // the tokenAmount for calculating the price\n  // these cannot be derived from the tokenAmounts since\n  // they follow the stableSwap logic for pricing\n  public pricingBasesIn: TokenAmount[]\n  public pricingBasesOut: TokenAmount[]\n  private readonly weights: [JSBI, JSBI]\n  private readonly fee: JSBI\n  public readonly type: PoolType\n\n  public static getAddress(tokenA: Token, tokenB: Token, weightA: JSBI, fee: JSBI): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const weights = tokenA.sortsBefore(tokenB) ? [weightA.toString(), JSBI.subtract(_100, weightA).toString()] : [JSBI.subtract(_100, weightA).toString(), weightA.toString()] // does safety checks\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address]?.[`${weights[0]}-${fee.toString()}`] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: {\n            ...PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address],\n            [`${weights[0]}-${fee.toString()}`]: getCreate2Address(\n              WEIGHTED_FACTORY_ADDRESS[tokens[0].chainId],\n              keccak256(\n                ['bytes'],\n                [pack(\n                  ['address', 'address', 'uint32', 'uint32'],\n                  [tokens[0].address, tokens[1].address, weights[0], fee.toString()]\n                )]\n              ),\n              INIT_CODE_HASH_WEIGHTED[tokens[0].chainId]\n            )\n          },\n        },\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address][`${weights[0]}-${fee.toString()}`]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, weightA: JSBI, fee: JSBI) {\n\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.weights = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [weightA, JSBI.subtract(_100, weightA)]\n      : [JSBI.subtract(_100, weightA), weightA]\n    this.fee = fee\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      WeightedPair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, weightA, fee),\n      18,\n      'Requiem-LP',\n      'Requiem LPs'\n    )\n    this.type = PoolType.WeightedPair\n\n    // assign pricing bases\n    this.pricingBasesIn = tokenAmounts\n    this.pricingBasesOut = tokenAmounts\n\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  public getAddressForRouter(): string {\n    return this.liquidityToken.address\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(\n      this.token0,\n      this.token1,\n      JSBI.multiply(this.tokenAmounts[0].raw, this.weight1),\n      JSBI.multiply(this.tokenAmounts[1].raw, this.weight0)\n    )\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(\n      this.token1,\n      this.token0,\n      JSBI.multiply(this.tokenAmounts[1].raw, this.weight0),\n      JSBI.multiply(this.tokenAmounts[0].raw, this.weight1)\n    )\n  }\n\n  public get fee0(): JSBI {\n    return this.fee\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get weight0(): JSBI {\n    return this.weights[0]\n  }\n\n  public get weight1(): JSBI {\n    return this.weights[1]\n  }\n\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n  public weightOf(token: Token): JSBI {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.weight0 : this.weight1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputWeight = this.weightOf(inputAmount.token)\n    const outputWeight = this.weightOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountOut(inputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountOut(\n          inputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // console.log(\"OA\", outputAmount.raw.toString())\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [outputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, WeightedPair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    console.log(\"-- this 0\", this.reserve0.raw, \"1\", this.reserve1.raw, \"out\", outputAmount.raw)\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const outputWeight = this.weightOf(outputAmount.token)\n    const inputWeight = this.weightOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      // getAmountIn(outputAmount.raw, inputReserve.raw, outputReserve.raw, inputWeight, outputWeight, this.fee)\n      JSBI.BigInt(\n        getAmountIn(\n          outputAmount.toBigNumber(),\n          inputReserve.toBigNumber(),\n          outputReserve.toBigNumber(),\n          BigNumber.from(inputWeight.toString()),\n          BigNumber.from(outputWeight.toString()),\n          BigNumber.from(this.fee.toString())\n        ).toString()\n      )\n    )\n    // here we save the pricing results if it is called\n    const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n    const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n    this.pricingBasesIn[inIndex] = inputAmount\n    this.pricingBasesOut[outIndex] = outputAmount\n\n    return [inputAmount, new WeightedPair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), inputWeight, this.fee)]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n\n  public clone(): WeightedPair {\n    return new WeightedPair(this.tokenAmounts[0], this.tokenAmounts[1], this.weight0, this.fee)\n  }\n\n  // these are only supposed to be used for liquidity calculations\n  /**\n * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n */\n  public get token0PriceRaw(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1PriceRaw(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceRatioOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0PriceRaw : this.token1PriceRaw\n  }\n}\n\n\n","import { Token } from './token'\nimport { ChainId } from '../constants'\n\nexport const STABLECOINS: { [chainId: number]: Token[] } = {\n  43113: [\n    new Token(ChainId.AVAX_TESTNET, '0xca9ec7085ed564154a9233e1e7d8fef460438eea', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.AVAX_TESTNET, '0xffb3ed4960cac85372e6838fbc9ce47bcf2d073e', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.AVAX_TESTNET, '0xaea51e4fee50a980928b4353e852797b54deacd8', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.AVAX_TESTNET, '0xccf7ed44c5a0f3cb5c9a9b9f765f8d836fb93ba1', 18, 'TUSD', 'True USD'),\n  ],\n  42261 :[\n    new Token(ChainId.OASIS_TESTNET, '0x9aEeeD65aE87e3b28793aefAeED59c3f10ef956b', 6, 'USDC', 'USD Coin'),\n    new Token(ChainId.OASIS_TESTNET, '0xfA0D8065755Fb3b6520149e86Ac5A3Dc3ee5Dc92', 6, 'USDT', 'Tether USD'),\n    new Token(ChainId.OASIS_TESTNET, '0xf10Bd0dA1f0e69c3334D7F8116C9082746EBC1B4', 18, 'DAI', 'Dai Stablecoin'),\n    new Token(ChainId.OASIS_TESTNET, '0x4e8848da06E40E866b82f6b52417494936c9509b', 18, 'TUSD', 'True USD'),\n  ],\n  0: [// dummy value\n    new Token(-1, '0xCa9eC7085Ed564154a9233e1e7D8fEF460438EEA', 6, 'USDC', 'USD Coin')]\n}\n\n\nexport const STABLES_INDEX_MAP: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  },\n  42261: {\n    0: STABLECOINS[42261][0],\n    1: STABLECOINS[42261][1],\n    2: STABLECOINS[42261][2],\n    3: STABLECOINS[42261][3]\n  }\n}\n\nexport const STABLES_LP_TOKEN: { [chainId: number]: { [index: number]: Token } } = {\n  43113: {\n    0: STABLECOINS[43113][0],\n    1: STABLECOINS[43113][1],\n    2: STABLECOINS[43113][2],\n    3: STABLECOINS[43113][3]\n  }\n}","import { StablePool } from \"./stablePool\";\nimport { Token, } from \"./token\";\nimport { Price } from \"./fractions/price\";\nimport { TokenAmount } from \"./fractions/tokenAmount\";\nimport invariant from \"tiny-invariant\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Source } from './source';\nimport { ChainId, STABLE_POOL_LP_ADDRESS, STABLE_POOL_ADDRESS } from \"./../constants\";\nimport { PoolType } from \"./pool\";\n\n// A class that wraps a stablePool to a pair-like structure\nexport class StablePairWrapper implements Source {\n\n    // the tokenAmounts are the reference Balances that we keep track of in the stablePool\n    // whenever we make changes to these, we need to update the stablePool reference Balance to calculate the correct \n    public tokenAmounts: TokenAmount[]\n    public readonly stableIndexes: number[]\n\n    // the tokenAmount for calculating the price\n    // these cannot be derived from the tokenAmounts since\n    // they follow the stableSwap logic for pricing\n    public pricingBasesIn: TokenAmount[]\n    public pricingBasesOut: TokenAmount[]\n    public readonly type: PoolType\n    public readonly referenceMidPrices: Price[]\n    public readonly liquidityToken: Token\n    public status: string\n    // public executionPrice: Price\n    // public readonly inputReserve: TokenAmount\n    // public readonly outputReserve: TokenAmount\n\n    constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, indexA: number, indexB: number) {\n\n        invariant(tokenAmountA.token.chainId === tokenAmountB.token.chainId, 'CHAIN_IDS')\n\n        this.liquidityToken = new Token(\n            tokenAmountA.token.chainId,\n            STABLE_POOL_LP_ADDRESS[tokenAmountA.token.chainId] ?? '0x0000000000000000000000000000000000000001',\n            18,\n            'RequiemStable-LP',\n            'Requiem StableSwap LPs'\n        )\n\n        this.tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA]\n        this.stableIndexes = tokenAmountA.token.sortsBefore(tokenAmountB.token) ? [indexA, indexB] : [indexB, indexA]\n\n        this.pricingBasesIn = this.tokenAmounts\n        this.pricingBasesOut = this.tokenAmounts\n        // this.executionPrice = new Price(tokenAmountA.token, tokenAmountB.token, tokenAmountA.raw, tokenAmountB.raw)\n        this.referenceMidPrices = []\n        this.type = PoolType.StablePairWrapper\n        this.status = 'NOT PRICED'\n    }\n\n\n    public getAddressForRouter(): string {\n        return STABLE_POOL_ADDRESS[this.tokenAmounts[0].token.chainId]\n    }\n\n\n    /**\n     * Returns the chain ID of the tokens in the pair.\n     */\n    public get chainId(): ChainId {\n        return this.token0.chainId\n    }\n\n    public get token0(): Token {\n        return this.tokenAmounts[0].token\n    }\n\n    public get token1(): Token {\n        return this.tokenAmounts[1].token\n    }\n\n    // reserves cannot be this.tokenAmounts because\n    // these are directly used for prices\n    public get reserve0(): TokenAmount {\n        return this.tokenAmounts[0]\n    }\n\n    public get reserve1(): TokenAmount {\n        return this.tokenAmounts[1]\n    }\n\n    // this gets the reserve of the respectve (stable) token\n    public reserveOf(token: Token): TokenAmount {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.reserve0 : this.reserve1\n    }\n\n    public involvesToken(token: Token): boolean {\n        return token.equals(this.token0) || token.equals(this.token1)\n    }\n\n\n    public priceOf(token: Token, stablePool: StablePool, volume: BigNumber) {\n        invariant(this.involvesToken(token), 'TOKEN')\n        return token.equals(this.token0) ? this.token0Price(stablePool, volume) : this.token1Price(stablePool, volume)\n    }\n\n    /**\n * Returns the current price at given volume of the pair in terms of token0, i.e. the ratio calculated by the stableSwap\n */\n    public token0Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken1 = stablePool.calculateSwap(this.stableIndexes[0], this.stableIndexes[1], volume)\n        return new Price(this.token0, this.token1, outToken1.toBigInt(), volume.toBigInt())\n    }\n\n    /**\n * Returns the current mid price of the pair in terms of token1, i.e. the ratio calculated by the stableSwap\n */\n    public token1Price(stablePool: StablePool, volume: BigNumber): Price {\n        const outToken0 = stablePool.calculateSwap(this.stableIndexes[1], this.stableIndexes[0], volume)\n        return new Price(this.token1, this.token0, outToken0.toBigInt(), volume.toBigInt())\n    }\n\n    public priceFromReserve(outToken: Token) {\n        const outIndex = outToken.equals(this.token0) ? 0 : 1\n        const inIndex = outToken.equals(this.token1) ? 0 : 1\n        return new Price(\n            this.pricingBasesIn[inIndex].token,\n            this.pricingBasesOut[outIndex].token,\n            this.pricingBasesIn[inIndex].raw,\n            this.pricingBasesOut[outIndex].raw\n        )\n    }\n\n    /**\n     * function that wraps the output calculation based on a stablePool\n     * @param inputAmount input amount that is used for calculating the output amount\n     * @param stablePool input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the output amount as TokenAmount and the StableWrappedPair with the adjusted balances\n     */\n    public getOutputAmount(inputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n        const inputReserve = this.reserveOf(inputAmount.token)\n        const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n        const output = stablePool.getOutputAmount(\n            inputAmount,\n            this.token0.equals(inputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(inputAmount)\n        stablePool.subtractBalanceValue(output)\n\n        // here we save the pricing results if it is called\n        const inIndex = inputAmount.token.equals(this.token0) ? 0 : 1\n        const outIndex = output.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = inputAmount\n        this.pricingBasesOut[outIndex] = output\n        this.status = 'PRICED'\n        // console.log(\"get \" + output.raw.toString() + output.token.symbol + \" for \" + inputAmount.raw.toString() + inputAmount.token.symbol)\n        // this.executionPrice = new Price(inputAmount.token, output.token, inputAmount.raw, output.raw)\n        return [\n            output,\n            new StablePairWrapper(\n                inputAmount,\n                output, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))\n        ]\n    }\n\n    /**\n     * function that wraps the input calculation based on a stablePool\n     * @param outputAmount output amount to calculate the input with\n     * @param stablePool  input stablePool: IMPORTANT NOTE: the balances of that object change according to the trade logic\n     * this is required as multiple trades will lead to adjusted balances in case it is routed twice or more through the pool\n     * @returns the input TokenAmount required to obtain the target output\n     */\n    public getInputAmount(outputAmount: TokenAmount, stablePool: StablePool): [TokenAmount, StablePairWrapper] {\n        invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n\n        const outputReserve = this.reserveOf(outputAmount.token)\n        const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n\n\n        const input = stablePool.getInputAmount(\n            outputAmount,\n            this.token0.equals(outputAmount.token) ? this.stableIndexes[1] : this.stableIndexes[0])\n\n        // here we save the pricing results if it is called\n        const inIndex = input.token.equals(this.token0) ? 0 : 1\n        const outIndex = outputAmount.token.equals(this.token0) ? 0 : 1\n        this.pricingBasesIn[inIndex] = input\n        this.pricingBasesOut[outIndex] = outputAmount\n        this.status = 'PRICED'\n        // adjust the values based on the supposdly executed trade\n        stablePool.addBalanceValue(input)\n        stablePool.subtractBalanceValue(outputAmount)\n\n        // console.log(\"get \" + outputAmount.raw.toString() + outputAmount.token.symbol + \" for \" + input.raw.toString() + input.token.symbol)\n\n        return [input,\n            new StablePairWrapper(\n                input,\n                outputAmount, stablePool.indexFromToken(inputReserve.token), stablePool.indexFromToken(outputReserve.token))]\n    }\n\n    // generates the n^2-n combinations for wrappedStablePairs\n    public static wrapPairsFromPool(stablePool: StablePool): StablePairWrapper[] {\n\n        let wrapperList = []\n\n        for (let i = 0; i < stablePool.tokenBalances.length; i++) {\n            for (let j = 0; j < i; j++) {\n                wrapperList.push(new StablePairWrapper(\n                    new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n                    new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n                    i,\n                    j\n                ))\n            }\n        }\n        return wrapperList\n    }\n\n    public static wrapSinglePairFromPool(stablePool: StablePool, i: number, j: number) {\n        invariant(i !== j, 'SAME INDEX')\n        invariant(i < stablePool.tokenBalances.length || j < stablePool.tokenBalances.length, 'INDEX OUT OF RANGE')\n        return new StablePairWrapper(\n            new TokenAmount(stablePool.tokens[i], stablePool.tokenBalances[i].toBigInt()),\n            new TokenAmount(stablePool.tokens[j], stablePool.tokenBalances[j].toBigInt()),\n            i,\n            j\n        )\n    }\n}","import { BigNumber } from 'ethers'\nimport invariant from 'tiny-invariant'\nimport { SwapStorage } from './swapStorage'\n\nconst MAX_ITERATION = 256\nexport const A_PRECISION = BigNumber.from(100)\nconst FEE_DENOMINATOR = BigNumber.from(1e10)\nconst ONE = BigNumber.from(1)\n\nexport function _xp(balances: BigNumber[], rates: BigNumber[]): BigNumber[] {\n    let result = []\n    for (let i = 0; i < balances.length; i++) {\n        result.push(rates[i].mul(balances[i]))\n    }\n    return result\n}\n\n\nexport function _getAPrecise(blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    if (blockTimestamp.gte(swapStorage.futureATime)) {\n        return swapStorage.futureA;\n    }\n\n    if (swapStorage.futureA.gt(swapStorage.initialA)) {\n        return swapStorage.initialA.add(\n            swapStorage.futureA.sub(swapStorage.initialA).mul(blockTimestamp.sub(swapStorage.initialATime)).div(\n                swapStorage.futureATime.sub(swapStorage.initialATime)))\n    }\n\n    return swapStorage.initialA.sub(swapStorage.initialA.sub(swapStorage.futureA).mul(blockTimestamp.sub(swapStorage.initialATime))).div(\n        swapStorage.futureATime.sub(swapStorage.initialATime))\n}\n\nexport function _sumOf(x: BigNumber[]): BigNumber {\n    let sum = BigNumber.from(0);\n    for (let i = 0; i < x.length; i++) {\n        sum = sum.add(x[i])\n    }\n    return sum\n}\n\n\nexport function _distance(x: BigNumber, y: BigNumber): BigNumber {\n    return x.gt(y) ? x.sub(y) : y.sub(x)\n}\n\n/**\n * Calculate D for *NORMALIZED* balances of each tokens\n * @param xp normalized balances of token\n */\nexport function _getD(xp: BigNumber[], amp: BigNumber): BigNumber {\n    const nCoins = xp.length;\n    let sum = _sumOf(xp)\n    if (sum.eq(0)) {\n        return BigNumber.from(0)\n    }\n\n    let Dprev = BigNumber.from(0)\n    let D = sum;\n    let Ann = amp.mul(nCoins)\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        let D_P = D;\n        for (let j = 0; j < xp.length; j++) {\n            D_P = D_P.mul(D).div(xp[j].mul(nCoins))\n        }\n\n        Dprev = D;\n        D = ((Ann.mul(sum)).div(A_PRECISION).add(D_P.mul(nCoins)).mul(D)).div(\n            ((Ann.sub(A_PRECISION)).mul(D).div(A_PRECISION)).add(D_P.mul(nCoins + 1)))\n\n        if (_distance(D, Dprev).lte(1)) {\n            return D;\n        }\n    }\n\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\n    // function which does not rely on D.\n    invariant(\"invariantCalculationFailed\");\n    return D\n}\n\nexport function _getY(\n    inIndex: number,\n    outIndex: number,\n    inBalance: BigNumber,\n    // self, shoudl be replaced with swapStorage object\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage,\n    normalizedBalances: BigNumber[]\n\n): BigNumber {\n    invariant(inIndex != outIndex, \"sameToken\");\n    const nCoins = normalizedBalances.length;\n    invariant(inIndex < nCoins && outIndex < nCoins, \"indexOutOfRange\");\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let Ann = amp.mul(nCoins)\n    let D = _getD(normalizedBalances, amp);\n    let sum = BigNumber.from(0) // sum of new balances except output token\n    let c = D;\n    for (let i = 0; i < nCoins; i++) {\n        if (i == outIndex) {\n            continue;\n        }\n\n        let x = i == inIndex ? inBalance : normalizedBalances[i];\n        sum = sum.add(x)\n        c = (c.mul(D)).div(x.mul(nCoins))\n    }\n\n    c = c.mul(D.mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = sum.add(D.mul(A_PRECISION).div(Ann))\n\n    let lastY = BigNumber.from(0)\n    let y = D;\n    for (let index = 0; index < MAX_ITERATION; index++) {\n        lastY = y;\n        y = ((y.mul(y)).add(c)).div(y.mul(2).add(b).sub(D))\n        if (_distance(lastY, y).lte(1)) {\n            return y;\n        }\n    }\n\n    invariant(\"yCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nexport function calculateSwap(inIndex: number, outIndex: number, inAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n    let newInBalance = normalizedBalances[inIndex].add(inAmount.mul(swapStorage.tokenMultipliers[inIndex]))\n    let outBalance = _getY(\n        inIndex,\n        outIndex,\n        newInBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    let outAmount = ((normalizedBalances[outIndex].sub(outBalance)).sub(ONE)).div(swapStorage.tokenMultipliers[outIndex])\n    let _fee = swapStorage.fee.mul(outAmount).div(FEE_DENOMINATOR)\n    return outAmount.sub(_fee)\n}\n\nexport function calculateSwapGivenOut(inIndex: number, outIndex: number, outAmount: BigNumber, // standard fields\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    swapStorage: SwapStorage\n): BigNumber {\n\n    let normalizedBalances = _xp(balances, swapStorage.tokenMultipliers)\n\n    let _amountOutInclFee = outAmount.mul(FEE_DENOMINATOR).div(FEE_DENOMINATOR.sub(swapStorage.fee));\n    let newOutBalance = normalizedBalances[outIndex].sub(_amountOutInclFee.mul(swapStorage.tokenMultipliers[outIndex]));\n\n    let inBalance = _getY(\n        outIndex,\n        inIndex,\n        newOutBalance,\n        blockTimestamp,\n        swapStorage,\n        normalizedBalances\n    )\n\n    const inAmount = ((inBalance.sub(normalizedBalances[inIndex]).sub(ONE)).div(swapStorage.tokenMultipliers[inIndex])).add(ONE)\n    return inAmount;\n}\n\n// function to calculate the amounts of stables from the amounts of LP\nexport function _calculateRemoveLiquidity(\n    amount: BigNumber,\n    swapStorage: SwapStorage,\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber,\n    balances: BigNumber[]\n): BigNumber[] {\n\n    invariant(amount.lte(totalSupply), \"Cannot exceed total supply\");\n\n    let feeAdjustedAmount = amount.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(\n        FEE_DENOMINATOR)\n\n    let amounts = []\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        amounts.push((balances[i].mul(feeAdjustedAmount)).div(totalSupply))\n    }\n    return amounts;\n}\n\n\nfunction _getYD(\n    A: BigNumber,\n    index: number,\n    xp: BigNumber[],\n    D: BigNumber\n): BigNumber {\n    let nCoins = xp.length;\n    invariant(index < nCoins, \"INDEX\");\n    let Ann = A.mul(nCoins)\n    let c = D;\n    let s = BigNumber.from(0)\n    let _x = BigNumber.from(0)\n    let yPrev = BigNumber.from(0)\n\n    for (let i = 0; i < nCoins; i++) {\n        if (i == index) {\n            continue;\n        }\n        _x = xp[i];\n        s = s.add(_x)\n        c = (c.mul(D)).div(_x.mul(nCoins))\n    }\n\n    c = (c.mul(D).mul(A_PRECISION)).div(Ann.mul(nCoins))\n    let b = s.add(D.mul(A_PRECISION).div(Ann))\n    let y = D;\n\n    for (let i = 0; i < MAX_ITERATION; i++) {\n        yPrev = y;\n        y = ((y.mul(y)).add(c)).div(((y.mul(2)).add(b)).sub(D))\n        if (_distance(yPrev, y).lt(1)) {\n            return y;\n        }\n    }\n    invariant(\"invariantCalculationFailed\")\n    return BigNumber.from(0)\n}\n\nfunction _feePerToken(swapStorage: SwapStorage): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    return (swapStorage.fee.mul(nCoins)).div(4 * (nCoins - 1));\n}\n\n\nexport function _calculateRemoveLiquidityOneToken(\n    swapStorage: SwapStorage,\n    tokenAmount: BigNumber,\n    index: number,\n    blockTimestamp: BigNumber,\n    balances: BigNumber[],\n    totalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n): { [returnVal: string]: BigNumber }// {dy:BigNumber, fee:BigNumber} \n{\n    invariant(index < swapStorage.tokenMultipliers.length, \"indexOutOfRange\")\n\n    let amp = _getAPrecise(blockTimestamp, swapStorage)\n    let xp = _xp(balances, swapStorage.tokenMultipliers)\n    let D0 = _getD(xp, amp);\n    let D1 = D0.sub((tokenAmount.mul(D0)).div(totalSupply))\n    let newY = _getYD(amp, index, xp, D1);\n    let reducedXP = xp;\n    let _fee = _feePerToken(swapStorage);\n\n    for (let i = 0; i < swapStorage.tokenMultipliers.length; i++) {\n        let expectedDx = BigNumber.from(0)\n        if (i == index) {\n            expectedDx = ((xp[i].mul(D1)).div(D0)).sub(newY)\n        } else {\n            expectedDx = xp[i].sub(xp[i].mul(D1).div(D0))\n        }\n        reducedXP[i] = reducedXP[i].sub(_fee.mul(expectedDx).div(FEE_DENOMINATOR))\n    }\n\n    let dy = reducedXP[index].sub(_getYD(amp, index, reducedXP, D1))\n    dy = (dy.sub(1)).div(swapStorage.tokenMultipliers[index])\n    let fee = ((xp[index].sub(newY)).div(swapStorage.tokenMultipliers[index])).sub(dy)\n    dy = dy.mul(FEE_DENOMINATOR.sub(currentWithdrawFee)).div(FEE_DENOMINATOR)\n    return { \"dy\": dy, \"fee\": fee }\n}\n\n\n/**\n * Estimate amount of LP token minted or burned at deposit or withdrawal\n * without taking fees into account\n */\nexport function _calculateTokenAmount(\n    swapStorage: SwapStorage,\n    amounts: BigNumber[],\n    deposit: boolean,\n    balances: BigNumber[],\n    blockTimestamp: BigNumber,\n    totalSupply: BigNumber\n): BigNumber {\n    let nCoins = swapStorage.tokenMultipliers.length;\n    invariant(amounts.length == nCoins, \"invalidAmountsLength\");\n    let amp = _getAPrecise(blockTimestamp, swapStorage);\n    let D0 = _getD(_xp(balances, swapStorage.tokenMultipliers), amp);\n\n    let newBalances = balances;\n    for (let i = 0; i < nCoins; i++) {\n        if (deposit) {\n            newBalances[i] = newBalances[i].add(amounts[i])\n        } else {\n            newBalances[i] = newBalances[i].sub(amounts[i])\n        }\n    }\n\n    let D1 = _getD(_xp(newBalances, swapStorage.tokenMultipliers), amp);\n\n\n    if (totalSupply.eq(0)) {\n        return D1; // first depositor take it all\n    }\n\n    let diff = deposit ? D1.sub(D0) : D0.sub(D1)\n    return (diff.mul(totalSupply)).div(D0)\n}","import { BigNumber } from \"ethers\"\n\nexport class SwapStorage {\n    public readonly tokenMultipliers: BigNumber[]\n    public readonly fee: BigNumber\n    public readonly adminFee: BigNumber\n    public readonly initialA: BigNumber\n    public readonly futureA: BigNumber\n    public readonly initialATime: BigNumber\n    public readonly futureATime: BigNumber\n    public readonly lpAddress: string\n\n    constructor(tokenMultipliers: BigNumber[],\n        fee: BigNumber,\n        adminFee: BigNumber,\n        initialA: BigNumber,\n        futureA: BigNumber,\n        initialATime: BigNumber,\n        futureATime: BigNumber,\n        lpAddress: string) {\n        this.lpAddress = lpAddress\n        this.tokenMultipliers = tokenMultipliers\n        this.fee = fee\n        this.adminFee = adminFee\n        this.initialA = initialA\n        this.futureA = futureA\n        this.initialATime = initialATime\n        this.futureATime = futureATime\n    }\n\n    public static mock(): SwapStorage {\n        const dummy = BigNumber.from(0)\n        return new SwapStorage([dummy], dummy, dummy, dummy, dummy, dummy, dummy, '')\n    }\n\n}","import invariant from 'tiny-invariant'\nimport { BigNumber } from 'ethers'\nimport {\n  _getAPrecise,\n  calculateSwap,\n  _calculateRemoveLiquidity,\n  _calculateRemoveLiquidityOneToken,\n  _calculateTokenAmount,\n  calculateSwapGivenOut\n} from './stableCalc'\nimport { Contract } from '@ethersproject/contracts'\nimport { ethers } from 'ethers'\nimport { SwapStorage } from './swapStorage'\nimport {\n  BigintIsh,\n  ChainId,\n  STABLE_POOL_ADDRESS,\n  STABLE_POOL_LP_ADDRESS\n} from '../constants'\nimport StableSwap from '../abis/RequiemStableSwap.json'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\n// const ZERO = BigNumber.from(0)\n\n/**\n  * A class that contains relevant stablePool information\n  * It is mainly designed to save the map between the indices\n  * and actual tokens in the pool and access the swap with addresses\n  * instead of the index\n  */\nexport class StablePool {\n  // the only LP token\n  public readonly liquidityToken: Token\n  // the index-token map \n  public readonly tokens: { [index: number]: Token }\n  public tokenBalances: BigNumber[]\n  public _A: BigNumber\n  public swapStorage: SwapStorage\n  // public readonly rates: BigNumber[]\n  public blockTimestamp: BigNumber\n\n  public lpTotalSupply: BigNumber\n  public currentWithdrawFee: BigNumber\n\n  public static getRouterAddress(chainId: number): string {\n    return STABLE_POOL_ADDRESS[chainId]\n  }\n\n  public static getLpAddress(chainId: number): string {\n    return STABLE_POOL_LP_ADDRESS[chainId]\n  }\n\n  public constructor(\n    tokens: { [index: number]: Token },\n    tokenBalances: BigNumber[],\n    _A: BigNumber,\n    swapStorage: SwapStorage,\n    blockTimestamp: number,\n    lpTotalSupply: BigNumber,\n    currentWithdrawFee: BigNumber\n  ) {\n    this.currentWithdrawFee = currentWithdrawFee\n    this.lpTotalSupply = lpTotalSupply\n    this.swapStorage = swapStorage\n    this.blockTimestamp = BigNumber.from(blockTimestamp)\n    this.tokens = tokens\n    this.tokenBalances = tokenBalances\n    this._A = _A\n    this.liquidityToken = new Token(\n      tokens[0].chainId,\n      STABLE_POOL_LP_ADDRESS[tokens[0].chainId] ?? '0x0000000000000000000000000000000000000001',\n      18,\n      'RequiemStable-LP',\n      'Requiem StableSwap LPs'\n    )\n\n    for (let i = 0; i < Object.values(this.tokens).length; i++) {\n      invariant(tokens[i].address != ethers.constants.AddressZero, \"invalidTokenAddress\");\n      invariant(tokens[i].decimals <= 18, \"invalidDecimals\");\n      invariant(tokens[i].chainId === tokens[0].chainId, 'INVALID TOKENS')\n    }\n  }\n\n  public static mock() {\n    const dummy = BigNumber.from(0)\n    return new StablePool({ 0: new Token(1, '0x0000000000000000000000000000000000000001', 6, 'Mock USDC', 'MUSDC') }, [dummy], dummy, SwapStorage.mock(), 0, dummy, dummy)\n  }\n\n  public getAddressForRouter(): string {\n    return STABLE_POOL_ADDRESS[this.tokens[0].chainId]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    let res = false\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      res || token.equals(this.tokens[i])\n    }\n\n    return res\n  }\n\n  public set setCurrentWithdrawFee(feeToSet: BigNumber) {\n    this.currentWithdrawFee = feeToSet\n  }\n\n  // maps the index to the token in the stablePool\n  public tokenFromIndex(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public indexFromToken(token: Token): number {\n    for (let index = 0; index < Object.keys(this.tokens).length; index++) {\n      if (token.equals(this.tokens[index])) {\n        return index\n      }\n    }\n    throw new Error('token not in pool');\n  }\n\n  public getBalances(): BigNumber[] {\n    return Object.keys(this.tokens).map((_, index) => (this.tokenBalances[index]))\n  }\n\n  // calculates the output amount usingn the input for the swableSwap\n  // requires the view on a contract as manual calculation on the frontend would\n  // be inefficient\n  public async calculateSwapViaPing(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber | BigintIsh,\n    chainId: number,\n    provider: ethers.Signer | ethers.providers.Provider): Promise<BigintIsh> {\n\n    const outAmount: BigintIsh = await new Contract(StablePool.getRouterAddress(chainId), new ethers.utils.Interface(StableSwap), provider).calculateSwap(inIndex, outIndex, inAmount)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwap(\n    inIndex: number,\n    outIndex: number,\n    inAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[inIndex].lte(inAmount)) // || inAmount.eq(ZERO))\n    //   return ZERO\n\n    const outAmount: BigNumber = calculateSwap(\n      inIndex,\n      outIndex,\n      inAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return outAmount\n  }\n\n\n  // calculates the swap output amount without\n  // pinging the blockchain for data\n  public calculateSwapGivenOut(\n    inIndex: number,\n    outIndex: number,\n    outAmount: BigNumber): BigNumber {\n\n    // if (this.getBalances()[outIndex].lte(outAmount)) // || outAmount.eq(ZERO))\n    //   return ZERO\n\n    const inAmount: BigNumber = calculateSwapGivenOut(\n      inIndex,\n      outIndex,\n      outAmount,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.swapStorage)\n\n    return inAmount\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, outIndex: number): TokenAmount {\n    const swap = this.calculateSwap(this.indexFromToken(inputAmount.token), outIndex, inputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(outIndex), swap.toBigInt())\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, inIndex: number): TokenAmount {\n    const swap = this.calculateSwapGivenOut(inIndex, this.indexFromToken(outputAmount.token), outputAmount.toBigNumber())\n    return new TokenAmount(this.tokenFromIndex(inIndex), swap.toBigInt())\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.tokens[0].chainId\n  }\n\n  public token(index: number): Token {\n    return this.tokens[index]\n  }\n\n  public reserveOf(token: Token): BigNumber {\n    invariant(this.involvesToken(token), 'TOKEN')\n    for (let i = 0; i < Object.keys(this.tokens).length; i++) {\n      if (token.equals(this.tokens[i]))\n        return this.tokenBalances[i]\n    }\n    return BigNumber.from(0)\n  }\n\n  public calculateRemoveLiquidity(amountLp: BigNumber): BigNumber[] {\n    return _calculateRemoveLiquidity(\n      amountLp,\n      this.swapStorage,\n      this.lpTotalSupply,\n      this.currentWithdrawFee,\n      this.getBalances()\n    )\n  }\n\n  public calculateRemoveLiquidityOneToken(amount: BigNumber, index: number): { [returnVal: string]: BigNumber } {\n    return _calculateRemoveLiquidityOneToken(\n      this.swapStorage,\n      amount,\n      index,\n      this.blockTimestamp,\n      this.getBalances(),\n      this.lpTotalSupply,\n      this.currentWithdrawFee\n    )\n  }\n\n  public getLiquidityAmount(amounts: BigNumber[], deposit: boolean) {\n    return _calculateTokenAmount(\n      this.swapStorage,\n      amounts,\n      deposit,\n      this.getBalances(),\n      this.blockTimestamp,\n      this.lpTotalSupply\n    )\n  }\n\n  public getLiquidityValue(outIndex: number, userBalances: BigNumber[]): TokenAmount {\n    let amount = BigNumber.from(0)\n    for (let i = 0; i < userBalances.length; i++) {\n      if (i !== outIndex)\n        amount = amount.add(this.calculateSwap(i, outIndex, userBalances[i]))\n    }\n    amount = amount.add(userBalances[outIndex])\n    return new TokenAmount(this.tokens[outIndex], amount.toBigInt())\n  }\n\n  public setSwapStorage(swapStorage: SwapStorage) {\n    this.swapStorage = swapStorage\n  }\n\n  public setTokenBalances(tokenBalances: BigNumber[]) {\n    this.tokenBalances = tokenBalances\n  }\n\n  public setBlockTimestamp(blockTimestamp: BigNumber) {\n    this.blockTimestamp = blockTimestamp\n  }\n\n  public setLpTotalSupply(totalSupply: BigNumber) {\n    this.lpTotalSupply = totalSupply\n  }\n\n  public setBalanceValueByIndex(index: number, newBalance: BigNumber) {\n    this.tokenBalances[index] = newBalance\n  }\n\n  public setBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? tokenAmount.toBigNumber() : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public addBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].add(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public subtractBalanceValue(tokenAmount: TokenAmount) {\n    let newBalances = [] // safe way for replacement\n    for (let i = 0; i < this.tokenBalances.length; i++) {\n      newBalances.push(this.indexFromToken(tokenAmount.token) === i ? this.tokenBalances[i].sub(tokenAmount.toBigNumber()) : this.tokenBalances[i])\n    }\n    this.setTokenBalances(newBalances)\n  }\n\n  public clone(): StablePool {\n    return new StablePool(\n      this.tokens, this.tokenBalances, this._A, this.swapStorage, this.blockTimestamp.toNumber(), this.lpTotalSupply, this.currentWithdrawFee\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\nimport { StablePairWrapper } from './stablePairWrapper'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV3 {\n  public readonly stablePool: StablePool\n  public readonly sources: (Pair | StablePairWrapper)[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n  public readonly pathMatrix: Token[][]\n  public readonly routerIds: number[]\n\n  public constructor(sources: (Pair | StablePairWrapper)[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(sources.length > 0, 'SOURCES')\n    invariant(\n      sources.every(source => source.chainId === sources[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && sources[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[sources[0].chainId] && sources[0].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && sources[sources.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[sources[0].chainId] && sources[sources.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[sources[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[sources[0].chainId]]\n    for (const [i, source] of sources.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.sources = sources\n    this.path = path\n    this.midPrice = Price.fromRouteV3(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n\n    // generate new inputs for aggregator \n\n    const pathMatrix: Token[][] = []\n    const routerIds: number[] = []\n    let currentInput = this.path[0]\n    let currentRouterId: number = -1\n    let lastRouterId: number = -1\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      currentRouterId = sources[i] instanceof StablePairWrapper ? 0 : 1\n      invariant(currentInput.equals(source.token0) || currentInput.equals(source.token1), 'PATH')\n      const output = currentInput.equals(source.token0) ? source.token1 : source.token0\n\n      if (i === 0) {\n        pathMatrix.push([currentInput, output])\n        routerIds.push(source instanceof StablePairWrapper ? 0 : 1)\n      }\n      else {\n        if (source instanceof StablePairWrapper) { // current item is stablePool\n          pathMatrix.push([currentInput, output])\n          routerIds.push(0)\n        }\n        else { // current item is a pair\n          if (lastRouterId === 0) {\n            pathMatrix.push([currentInput, output])\n            routerIds.push(1)\n          } else {\n            pathMatrix[pathMatrix.length - 1].push(output)\n          }\n        }\n      }\n      currentInput = output\n      lastRouterId = currentRouterId\n    }\n\n    this.pathMatrix = pathMatrix\n    this.routerIds = routerIds\n  }\n\n  public get chainId(): ChainId {\n    return this.sources[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { RouteV3 } from './routeV3'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV3(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV3(a: TradeV3, b: TradeV3) {\n  const ioComp = inputOutputComparatorV3(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV3 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV3 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV3\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV3, amountIn: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV3, amountOut: CurrencyAmount): TradeV3 {\n    return new TradeV3(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV3, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextSources: (Pair | StablePairWrapper)[] = new Array(route.sources.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const source = route.sources[i]\n        const [outputAmount, nextSource] = source instanceof Pair ?\n          source.getOutputAmount(amounts[i]) :\n          source.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextSources[i] = nextSource\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const source = route.sources[i - 1]\n        const [inputAmount, nextSource] = source instanceof Pair ?\n          source.getInputAmount(amounts[i]) :\n          source.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextSources[i - 1] = nextSource\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV3(new RouteV3(nextSources, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      source.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      let source = sources[i]\n\n\n      if (!source.token0.equals(amountIn.token) && !source.token1.equals(amountIn.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = source instanceof Pair ? source.getOutputAmount(amountIn) : source.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([...currentSources, source], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentSources, source],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param sources the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentSources used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n    // used in recursion.\n    currentSources: (Pair | StablePairWrapper)[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV3[] = []\n  ): TradeV3[] {\n    invariant(sources.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentSources.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check ifit can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const source = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      source.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV3(\n        new RouteV3(\n          [source],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < sources.length; i++) {\n      const source = sources[i]\n      // source irrelevant\n      if (!source.token0.equals(amountOut.token) && !source.token1.equals(amountOut.token)) continue\n      if (source.reserve0.equalTo(ZERO) || source.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = source instanceof Pair ? source.getInputAmount(amountOut) : source.getInputAmount(amountOut, stablePool)\n      } catch (error) {\n        // not enough liquidity in this source\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV3(\n            new RouteV3([source, ...currentSources], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV3\n        )\n      } else if (maxHops > 1 && sources.length > 1) {\n        const sourcesExcludingThisSource = sources.slice(0, i).concat(sources.slice(i + 1, sources.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV3.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          sourcesExcludingThisSource,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [source, ...currentSources],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    sources: (Pair | StablePairWrapper)[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV3 = {},\n  ): TradeV3[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      sources,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\nimport { Pool } from './pool'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { Token, WRAPPED_NETWORK_TOKENS } from './token'\nimport { Price } from './fractions/price'\nimport { StablePool } from './stablePool'\n\n// new version of the route \n// the first verion to include the stable pool for less friction\nexport class RouteV4 {\n  public readonly stablePool: StablePool\n  public readonly pools: Pool[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pools: Pool[], stablePool: StablePool, input: Currency, output?: Currency) {\n    invariant(pools.length > 0, 'poolS')\n    invariant(\n      pools.every(pool => pool.chainId === pools[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pools[0].involvesToken(input)) ||\n      (input === NETWORK_CCY[pools[0].chainId] && pools[0].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n      (output instanceof Token && pools[pools.length - 1].involvesToken(output)) ||\n      (output === NETWORK_CCY[pools[0].chainId] && pools[pools.length - 1].involvesToken(WRAPPED_NETWORK_TOKENS[pools[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WRAPPED_NETWORK_TOKENS[pools[0].chainId]]\n    for (const [i, pool] of pools.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pool.token0) || currentInput.equals(pool.token1), 'PATH')\n      const output = currentInput.equals(pool.token0) ? pool.token1 : pool.token0\n      path.push(output)\n    }\n    this.stablePool = stablePool\n    this.pools = pools\n    this.path = path\n    this.midPrice = Price.fromRouteV4(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pools[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, NETWORK_CCY } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount, InputOutput } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { WeightedPair } from './weightedPair'\nimport { StablePairWrapper } from './stablePairWrapper'\nimport { Pool, PoolType } from './pool'\nimport { RouteV4 } from './routeV4'\nimport { StablePool } from './stablePool'\nimport { currencyEquals, Token, WRAPPED_NETWORK_TOKENS } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// function computePriceImpactWeightedPair(pair: WeightedPair, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n//   const artificialMidPrice = new Price(\n//     inputAmount.currency,\n//     outputAmount.currency,\n//     pair.reserveOf(wrappedCurrency(inputAmount.currency, pair.chainId)).raw,\n//     pair.reserveOf(wrappedCurrency(outputAmount.currency, pair.chainId)).raw)\n//   const exactQuote = artificialMidPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparatorV4(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparatorV4(a: TradeV4, b: TradeV4) {\n  const ioComp = inputOutputComparatorV4(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptionsV4 {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === NETWORK_CCY[chainId]) return new TokenAmount(WRAPPED_NETWORK_TOKENS[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === NETWORK_CCY[chainId]) return WRAPPED_NETWORK_TOKENS[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class TradeV4 {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: RouteV4\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: RouteV4, amountIn: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: RouteV4, amountOut: CurrencyAmount): TradeV4 {\n    return new TradeV4(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: RouteV4, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextpools: Pool[] = new Array(route.pools.length)\n    const stablePool = route.stablePool.clone()\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pool = route.pools[i]\n        let outputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [outputAmount, nextpool] = pool.clone().getOutputAmount(amounts[i])\n        } else {\n          [outputAmount, nextpool] = pool.getOutputAmount(amounts[i], stablePool)\n        }\n        // const [outputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getOutputAmount(amounts[i]) :\n        //   pool.getOutputAmount(amounts[i], stablePool)\n        amounts[i + 1] = outputAmount\n        nextpools[i] = nextpool\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pool = route.pools[i - 1]\n        let inputAmount: TokenAmount\n        let nextpool: Pool\n        if (pool instanceof Pair) {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i])\n        } else if (pool instanceof WeightedPair) {\n          [inputAmount, nextpool] = pool.clone().getInputAmount(amounts[i])\n        } else {\n          [inputAmount, nextpool] = pool.getInputAmount(amounts[i], stablePool)\n        }\n        // const [inputAmount, nextpool] = pool instanceof Pair || pool instanceof WeightedPair ?\n        //   pool.getInputAmount(amounts[i]) :\n        //   pool.getInputAmount(amounts[i], stablePool)\n        amounts[i - 1] = inputAmount\n        nextpools[i - 1] = nextpool\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[0].raw)\n          : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === NETWORK_CCY[route.chainId]\n          ? CurrencyAmount.networkCCYAmount(route.chainId, amounts[amounts.length - 1].raw)\n          : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRouteV4(new RouteV4(nextpools, stablePool.clone(), route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  //   this.route.pools[this.route.pools.length - 1] instanceof WeightedPair\n  //     ? computePriceImpactWeightedPair((this.route.pools[this.route.pools.length - 1] as WeightedPair).clone(), this.inputAmount, this.outputAmount)\n  //     : computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.networkCCYAmount(this.route.chainId, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactInIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n          ? currencyOut.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object no not change the original one\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountIn instanceof TokenAmount &&\n      currencyOut instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountIn.token) &&\n      Object.values(stablePool.tokens).includes(currencyOut)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountIn.token),\n        stablePool.indexFromToken(currencyOut)\n      )\n\n      // write pricings into the pool\n      pool.getOutputAmount(currencyAmountIn, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool,\n          currencyAmountIn.token,\n          currencyOut\n        ),\n        currencyAmountIn,\n        TradeType.EXACT_INPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      let pool = pools[i]\n\n      if (!pool.token0.equals(amountIn.token) && !pool.token1.equals(amountIn.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      // if( pool instanceof WeightedPair)  {console.log(\"out\": pool.getInputAmount(amountOut) }\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountOut] = (pool as Pair).getOutputAmount(amountIn)\n        } else if (pool.type === PoolType.WeightedPair) {\n          ;[amountOut] = (pool as WeightedPair).clone().getOutputAmount(amountIn)\n          // ;[amountOut] = (pool as WeightedPair).getOutputAmount(amountIn)\n          // console.log(\"out weighted\", amountOut.raw)\n          // const [amountOut1,] = ((pool).clone() as any as Pair).getOutputAmount(amountIn)\n          // console.log(\"out PAIR\", amountOut1.raw)\n        } else {\n          [amountOut] = (pool as StablePairWrapper).getOutputAmount(amountIn, stablePool)\n        }\n        // ;[amountOut] = pool instanceof Pair || pool instanceof WeightedPair ? pool.getOutputAmount(amountIn) : pool.getOutputAmount(amountIn, stablePool)\n      } catch (error) {\n        // input too low\n        if ((error as any).isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([...currentpools, pool], originalStablePool, originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactInIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentpools, pool],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n\n    }\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param stablePool the stalePool used for the iteration - it will undergo changes\n   * @param pools the pairs / wrapped pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentpools used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOutIteration(\n    originalStablePool: StablePool,\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n    // used in recursion.\n    currentpools: Pool[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: TradeV4[] = []\n  ): TradeV4[] {\n    invariant(pools.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentpools.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n          ? currencyIn.chainId\n          : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n    // create copy of stablePool object\n    // const stablePoolForIteration = stablePool.clone()\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n\n    if ( // check if it can be only a single stable swap trade\n      currencyAmountOut instanceof TokenAmount &&\n      currencyIn instanceof Token &&\n      Object.values(stablePool.tokens).includes(currencyAmountOut.token) &&\n      Object.values(stablePool.tokens).includes(currencyIn)\n    ) {\n      const pool = StablePairWrapper.wrapSinglePairFromPool(\n        stablePool,\n        stablePool.indexFromToken(currencyAmountOut.token),\n        stablePool.indexFromToken(currencyIn)\n      )\n\n      // return value does not matter, we just need the stablePool pricing to be stored in the pair\n      pool.getInputAmount(amountOut, stablePool)\n\n      const stableTrade = new TradeV4(\n        new RouteV4(\n          [pool],\n          originalStablePool, currencyIn, currencyAmountOut.token),\n        currencyAmountOut,\n        TradeType.EXACT_OUTPUT\n      )\n      return [stableTrade]\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      const pool = pools[i]\n      // pool irrelevant\n      if (!pool.token0.equals(amountOut.token) && !pool.token1.equals(amountOut.token)) continue\n      if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        if (pool.type === PoolType.Pair) {\n          ;[amountIn] = (pool as Pair).getInputAmount(amountOut)\n        }\n        else if (pool.type === PoolType.WeightedPair) {\n          ;[amountIn] = (pool as WeightedPair).clone().getInputAmount(amountOut)\n        } else {\n          ;[amountIn] = (pool as StablePairWrapper).getInputAmount(amountOut, stablePool)\n        }\n\n\n      } catch (error) {\n        // not enough liquidity in this pool\n        if ((error as any).isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new TradeV4(\n            new RouteV4([pool, ...currentpools], originalStablePool, currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparatorV4\n        )\n      } else if (maxHops > 1 && pools.length > 1) {\n        const poolsExcludingThispool = pools.slice(0, i).concat(pools.slice(i + 1, pools.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        TradeV4.bestTradeExactOutIteration(\n          originalStablePool,\n          stablePool,\n          poolsExcludingThispool,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pool, ...currentpools],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n\n  public static bestTradeExactOut(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n\n    return this.bestTradeExactOutIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyIn,\n      currencyAmountOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountOut,\n      [])\n\n  }\n\n  public static bestTradeExactIn(\n    stablePool: StablePool,\n    pools: Pool[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptionsV4 = {},\n  ): TradeV4[] {\n    return this.bestTradeExactInIteration(\n      stablePool,\n      stablePool.clone(),\n      pools,\n      currencyAmountIn,\n      currencyOut,\n      { maxNumResults, maxHops },\n      [],\n      currencyAmountIn,\n      [])\n  }\n}\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi';\nimport { Token, TokenAmount, WeightedPair } from '..';\n\nconst ONE = BigNumber.from(1)\nconst TWO = BigNumber.from(2)\n\nexport function sqrrt(a: BigNumber): BigNumber {\n    let c = ONE\n    if (a.gt(3)) {\n        c = a;\n        let b = a.div(TWO).add(ONE);\n        while (b < c) {\n            c = b;\n            b = (a.div(b).add(b)).div(TWO);\n        }\n    } else if (!a.eq(0)) {\n        c = ONE;\n    }\n    return c\n}\n\nexport function getTotalValue(pair: WeightedPair, reqt: Token): BigNumber {\n    const reserve0 = pair.reserve0\n    const reserve1 = pair.reserve1\n\n    const [otherToken, reservesOther] = reqt.equals(pair.token0)\n        ? [pair.token1, reserve1]\n        : [pair.token0, reserve0]\n\n    const decimals = otherToken.decimals +\n        reqt.decimals -\n        pair.liquidityToken.decimals -\n        4;\n\n    const [syntReserveREQT,] = pair.clone().getOutputAmount(\n        new TokenAmount(otherToken,\n            JSBI.divide(reservesOther.raw, JSBI.BigInt(10000)))\n    );\n\n    return sqrrt(syntReserveREQT.toBigNumber().mul(reservesOther.toBigNumber()).div(BigNumber.from(10 ** decimals))).mul(TWO)\n}\n\n/**\n* - calculates the value in reqt of the input LP amount provided\n* @param _pair general pair that has the RequiemSwap interface implemented\n* @param amount_ the amount of LP to price in REQT\n*  - is consistent with the uniswapV2-type case \n*/\nexport function valuation(pair: WeightedPair, totalSupply: BigNumber, amount: BigNumber, reqt: Token) {\n    const totalValue = getTotalValue(pair, reqt);\n\n    return totalValue.mul(amount).div(totalSupply);\n}","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.BSC_MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IPancakePair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n}\n","import { ethers } from 'ethers'\n// import { BigNumber } from 'ethers'\n// import { getNetwork } from '@ethersproject/networks'\n// import { getDefaultProvider } from '@ethersproject/providers'\n// import { TokenAmount } from './entities/fractions/tokenAmount'\n// import { Pair } from './entities/pair'\nimport { StablePool } from './entities/stablePool'\n// import IPancakePair from '@pancakeswap-libs/pancake-swap-core/build/IPancakePair.json'\n// import invariant from 'tiny-invariant'\n// import ERC20 from './abis/ERC20.json'\nimport StableSwap from './abis/RequiemStableSwap.json'\n// import { STABLES_INDEX_MAP } from './entities/stables'\n// import { Token } from './entities/token'\n\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class StablesFetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n  /**\n   * Fetches information about the stablePool and constructs a StablePool Object from the contract deployed.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchStablePoolData(\n    chainId: number,\n    provider: ethers.providers.Provider\n  ): Promise<StablePool> {\n    const address = StablePool.getRouterAddress(chainId)\n    console.log(\"address\", address)\n    const tokenAddresses = await new ethers.Contract(address, StableSwap, provider).getTokens()\n    console.log(\"TokenAddresses\", tokenAddresses)\n    // const tokenReserves = await new ethers.Contract(address, StableSwap, provider).getTokenBalances()\n    let indexes = []\n    for (let i = 0; i < tokenAddresses.length; i++) {\n      indexes.push(i)\n    }\n    // const tokenMap = Object.assign({},\n    //   ...(tokenAddresses as string[]).map((_, index) => ({\n    //     [index]: new TokenAmount(\n    //       STABLES_INDEX_MAP[chainId][index],\n    //       tokenReserves[index])\n    //   })))\n    return StablePool.mock()\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV3 } from './entities/tradeV3'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV3Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV3OptionsDeadline extends Omit<TradeV3Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV3Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV3 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV3, options: TradeV3Options | TradeV3OptionsDeadline): SwapV3Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap && (trade.route.routerIds.length === 1 && trade.route.routerIds[0] === 1)) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = []\n      for (let i = 0; i < trade.route.pathMatrix.length; i++)\n      path.push(trade.route.pathMatrix[i].map(token => token.address))\n      const routerId = trade.route.routerIds.map(id => id.toString())\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'multiSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory routerId, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapExactTokensForTokens'\n            // multiSwapExactTokensForTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountIn, uint256 amountOutMin, uint256 deadline )\n            args = [path, routerId, amountIn, amountOut, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'multiSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory routerId, uint256 amountOut, uint256 deadline )\n            args = [path, routerId, amountOut, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'multiSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'multiSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory routerId, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [path, routerId, amountOut, amountIn, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, NETWORK_CCY, Percent } from './entities'\nimport { TradeV4 } from './entities/tradeV4'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeV4Options {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n\n  /**\n   * Whether we swap through multiple routers / pair types\n   */\n  multiSwap?: boolean\n}\n\nexport interface TradeV4OptionsDeadline extends Omit<TradeV4Options, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Router to execute a trade.\n */\nexport interface SwapV4Parameters {\n  /**\n   * The method to call on the Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | string[][])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Router, and has static methods for helping execute trades.\n */\nexport abstract class RouterV4 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: TradeV4, options: TradeV4Options | TradeV4OptionsDeadline): SwapV4Parameters {\n    const etherIn = trade.inputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    const etherOut = trade.outputAmount.currency === NETWORK_CCY[trade.route.chainId]\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n\n\n    let methodName: string\n\n    let args: (string | string[] | string[][])[] = []\n    let value: string\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    if (!options.multiSwap) {\n      const path: string[] = trade.route.path.map((token) => token.address)\n      const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n            // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = useFeeOnTransfer\n              ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n              : 'swapExactTokensForTokens'\n            // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n            args = [amountIn, amountOut, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n          if (etherIn) {\n            methodName = 'swapETHForExactTokens'\n            // (uint amountOut, address[] calldata path, address to, uint deadline)\n            args = [amountOut, path, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'swapTokensForExactETH'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'swapTokensForExactTokens'\n            // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n            args = [amountOut, amountIn, path, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    } else {\n      const path = trade.route.path.map(token =>token.address)\n      const pools = trade.route.pools.map(pool=>pool.getAddressForRouter())\n      \n      switch (trade.tradeType) {\n        case TradeType.EXACT_INPUT:\n          if (etherIn) {\n            methodName = 'onSwapExactETHForTokens'\n            // function multiSwapExactETHForTokens( address[][] calldata path, uint256[] memory routerId,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapExactTokensForETH'\n            // multiSwapExactTokensForETH( address[][] calldata path, uint256[] memory pools, uint256 amountIn,\n            // uint256 amountOutMin, uint256 deadline )\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapExactTokensForTokens'\n            // function onSwapExactTokensForTokens(\n            //   address[] memory pools,\n            //   address[] memory tokens,\n            //   uint256 amountIn,\n            //   uint256 amountOutMin,\n            //   address to,\n            //   uint256 deadline\n            args = [pools, path, amountIn, amountOut, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n        case TradeType.EXACT_OUTPUT:\n          if (etherIn) {\n            methodName = 'onSwapETHForExactTokens'\n            // multiSwapETHForExactTokens( address[][] calldata path, uint256[] memory pools, uint256 amountOut, uint256 deadline )\n            args = [pools, path, amountOut, to, deadline]\n            value = amountIn\n          } else if (etherOut) {\n            methodName = 'onSwapTokensForExactETH'\n            // multiSwapTokensForExactETH( address[][] calldata path, uint256[] memory pools,\n            // uint256 amountOut, uint256 amountInMax, uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          } else {\n            methodName = 'onSwapTokensForExactTokens'\n            // multiSwapTokensForExactTokens( address[][] calldata path, uint256[] memory pools, \n            // uint256 amountOut, uint256 amountInMax,  uint256 deadline )\n            args = [pools, path, amountOut, amountIn, to, deadline]\n            value = ZERO_HEX\n          }\n          break\n      }\n    }\n    return {\n      methodName,\n      args,\n      value,\n    }\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","FACTORY_ADDRESS","WEIGHTED_FACTORY_ADDRESS","INIT_CODE_HASH","INIT_CODE_HASH_WEIGHTED","STABLE_POOL_ADDRESS","STABLE_POOL_LP_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","FEES_NUMERATOR","FEES_DENOMINATOR","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","NETWORK_CCY","BSC_MAINNET","BSC_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TETSNET_RINKEBY","AVAX_MAINNET","AVAX_TESTNET","MATIC_MAINNET","MATIC_TESTNET","OASIS_MAINNET","OASIS_TESTNET","ETHER","Token","chainId","projectLink","equals","other","this","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","PoolType","WETH","WRAPPED_NETWORK_TOKENS","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","networkCCYAmount","raw","toExact","toBigNumber","BigNumber","from","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fromRouteV3","sources","source","type","Pair","pricingBasesIn","pricingBasesOut","fromRouteV4","pools","pool","price","StablePairWrapper","WeightedPair","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","getAddressForRouter","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","TENK","_256","_128","FIXED_1","FIXED_2","MAX_NUM","LN2_NUMERATOR","LN2_DENOMINATOR","OPT_LOG_MAX_VAL","OPT_EXP_MAX_VAL","maxExpArray","leftShift","num","shift","mul","pow","signedRightShift","power","_baseN","_baseD","_expN","_expD","gt","lt","base","baseLogTimesExp","optimalLog","generalLog","optimalExp","findPositionInMaxExpArray","generalExp","res","gte","count","_n","s","or","floorLog2","w","sub","mod","and","isZero","_x","_precision","xi","getAmountOut","reserveIn","reserveOut","tokenWeightIn","tokenWeightOut","swapFee","amountInWithFee","eq","result","temp1","temp2","getAmountIn","baseD","baseReserveIn","weightA","fee","weights","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","weightOf","weight0","weight1","inputWeight","outputWeight","inIndex","outIndex","console","log","clone","priceRatioOf","token0PriceRaw","token1PriceRaw","STABLECOINS","STABLES_INDEX_MAP","STABLES_LP_TOKEN","indexA","indexB","stableIndexes","referenceMidPrices","status","stablePool","volume","outToken1","calculateSwap","toBigInt","outToken0","priceFromReserve","outToken","addBalanceValue","subtractBalanceValue","indexFromToken","wrapPairsFromPool","wrapperList","tokenBalances","j","wrapSinglePairFromPool","A_PRECISION","FEE_DENOMINATOR","_xp","balances","rates","_getAPrecise","blockTimestamp","swapStorage","futureATime","futureA","initialA","initialATime","_distance","_getD","xp","amp","nCoins","sum","_sumOf","Dprev","D","Ann","D_P","lte","_getY","inBalance","normalizedBalances","c","index","_getYD","A","SwapStorage","tokenMultipliers","adminFee","lpAddress","mock","dummy","StablePool","_A","lpTotalSupply","currentWithdrawFee","values","ethers","constants","AddressZero","getRouterAddress","getLpAddress","keys","tokenFromIndex","getBalances","map","_","calculateSwapViaPing","inAmount","provider","Contract","utils","Interface","StableSwap","outBalance","outAmount","_fee","calculateSwapGivenOut","_amountOutInclFee","swap","calculateRemoveLiquidity","amountLp","feeAdjustedAmount","_calculateRemoveLiquidity","calculateRemoveLiquidityOneToken","tokenAmount","D0","D1","newY","reducedXP","_feePerToken","expectedDx","dy","_calculateRemoveLiquidityOneToken","getLiquidityAmount","deposit","newBalances","_calculateTokenAmount","userBalances","setSwapStorage","setTokenBalances","setBlockTimestamp","setLpTotalSupply","setBalanceValueByIndex","newBalance","setBalanceValue","toNumber","feeToSet","RouteV3","pathMatrix","routerIds","currentRouterId","lastRouterId","inputOutputComparatorV3","tradeComparatorV3","TradeV3","nextSources","nextSource","bestTradeExactInIteration","originalStablePool","currentSources","includes","sourcesExcludingThisSource","bestTradeExactOutIteration","RouteV4","inputOutputComparatorV4","tradeComparatorV4","TradeV4","nextpools","nextpool","computePriceImpact","currentpools","poolsExcludingThispool","sqrrt","getTotalValue","reqt","otherToken","reservesOther","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IPancakePair","abi","getReserves","reserves0","reserves1","StablesFetcher","fetchStablePoolData","getTokens","tokenAddresses","indexes","RouterV3","multiSwap","routerId","id","RouterV4"],"mappings":"gJAIYA,EAaAC,EAKAC,qeAlBAF,EAAAA,kBAAAA,qDAEVA,kCACAA,uCACAA,uCACAA,+CACAA,gEACAA,uCACAA,yCACAA,yCACAA,0CAGUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,+BAsDUC,EAnDCC,EAAiD,IACxD,gDACA,mDACG,mDACA,8CAGIC,EAA0D,OAC9D,mDACA,8CAMIC,EAAgD,IACvD,wEACA,2EACG,2EACA,sEAGIC,EAAyD,OAC7D,2EACA,sEAGIC,EAAqD,OACzD,mDACA,8CAGIC,EAAwD,OAC5D,mDACA,8CAGIC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAElBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAiBT,EAAKC,OAAO,MAC7BS,EAAmBV,EAAKC,OAAO,MAE5C,SAAYT,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMmB,UACVnB,EAAaoB,OAAQZ,EAAKC,OAAO,UACjCT,EAAaqB,SAAUb,EAAKC,OAAO,uoFCrFtC,MAAMa,EAAoB,mBAAoBC,OAMjCC,2FACyC,IAI7CC,KAAOC,EAAKC,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANnBC,QAclCC,8FAC4C,IAIhDN,KAAOO,EAAKL,YAAYF,KACzBH,GAAmBC,OAAOK,gEAAgCC,gCANhBC,iBCdlCG,EAA6BC,EAAaC,GAC9C3B,EAAK4B,mBAAmBF,EAAOxB,IAAzC2B,MACU7B,EAAK8B,gBAAgBJ,EAAOf,EAAqBgB,KAA3DE,eAIcE,EAAwBC,cAETC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,GAAeC,UACtBA,aAAqBpC,EACxBoC,EAEApC,EAAKC,OADgB,iBAAdmC,EACKA,EAAUC,WACVD,YAIFE,GAAKC,GACnBd,EAA6Bc,EAAG/C,EAAaqB,aAEzC2B,EADAC,EAAUvC,KAEVF,EAAK0C,YAAYH,EAAGlC,OACtBoC,EAAIF,EACJC,EAAIxC,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGnC,GAAMD,GAC3BH,EAAK6C,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAIxC,EAAK4C,OAAO5C,EAAK2C,IAAI3C,EAAK4C,OAAOL,EAAGC,GAAIA,GAAIpC,QAEzCJ,EAAK8C,SAASP,EAAGrC,KAC1BuC,EAAItC,UAECsC,EAKT,SAAgBM,GAAgBC,EAAYL,EAAQM,EAAiBC,MACzDD,EAAU,GAApBpB,MAEUmB,EAAMG,QAAUF,GAA1BpB,MAGqB,IAAjBmB,EAAMG,cACRH,EAAMI,KAAKT,GACJ,SAEDU,EAASL,EAAMG,SAAWF,KAE5BI,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,SACjDA,UAGLW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,KACRC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,SAGTR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,SCpEtBC,GA4BX,SAAsBC,EAAkBC,EAAiB5C,GACvDQ,EAA6BzB,EAAKC,OAAO2D,GAAWpE,EAAaoB,YAE5DgD,SAAWA,OACXC,OAASA,OACT5C,KAAOA,GAzBS0C,SAAkB,IAAIA,GAAS,GAAI,MAAO,iBA6B7DG,GA3BmBH,uBACpBtE,gBAAQ0E,aAAc,IAAIJ,GAAS,GAAI,MAAO,SAC9CtE,gBAAQ2E,aAAc,IAAIL,GAAS,GAAI,MAAO,SAC9CtE,gBAAQ4E,kBAAmB,IAAIN,GAAS,GAAI,MAAO,SACnDtE,gBAAQ6E,0BAA2B,IAAIP,GAAS,GAAI,MAAO,SAC3DtE,gBAAQ8E,cAAe,IAAIR,GAAS,GAAI,OAAQ,UAChDtE,gBAAQ+E,cAAe,IAAIT,GAAS,GAAI,OAAQ,UAChDtE,gBAAQgF,eAAgB,IAAIV,GAAS,GAAI,QAAS,WAClDtE,gBAAQiF,eAAgB,IAAIX,GAAS,GAAI,QAAS,WAClDtE,gBAAQkF,eAAgB,IAAIZ,GAAS,GAAI,OAAQ,UACjDtE,gBAAQmF,eAAgB,IAAIb,GAAS,GAAI,OAAQ,WAkBhDc,GAAQd,GAASc,MCzCVC,0BAMTC,EACA3C,EACA4B,EACAC,EACA5C,EACA2D,8BAEMhB,EAAUC,EAAQ5C,UACnB0D,QAAUA,IACV3C,QAAUD,EAAwBC,KAClC4C,YAAcA,sCAOdC,OAAA,SAAOC,UAERC,OAASD,GAGNC,KAAKJ,UAAYG,EAAMH,SAAWI,KAAK/C,UAAY8C,EAAM9C,WAS3DgD,YAAA,SAAYF,UACPC,KAAKJ,UAAYG,EAAMH,SAAjC9C,MACUkD,KAAK/C,UAAY8C,EAAM9C,SAAjCH,MACOkD,KAAK/C,QAAQiD,cAAgBH,EAAM9C,QAAQiD,kBAxC3BtB,aA+CXuB,GAAeC,EAAqBC,UAC9CD,aAAqBT,IAASU,aAAqBV,GAC9CS,EAAUN,OAAOO,KACfD,aAAqBT,IAErBU,aAAqBV,IAGvBS,IAAcC,GAIzB,UC7DYC,GD6DCC,YACVjG,gBAAQ0E,aAAc,IAAIW,GACzBrF,gBAAQ0E,YACR,6CACA,GACA,OACA,cACA,8BAED1E,gBAAQ2E,aAAc,IAAIU,GACzBrF,gBAAQ2E,YACR,6CACA,GACA,OACA,cACA,8BAED3E,gBAAQ4E,kBAAmB,IAAIS,GAC9BrF,gBAAQ4E,iBACR,6CACA,GACA,OACA,cACA,8BAED5E,gBAAQ6E,0BAA2B,IAAIQ,GACtCrF,gBAAQ6E,yBACR,6CACA,GACA,OACA,cACA,8BAED7E,gBAAQ8E,cAAe,IAAIO,GAC1BrF,gBAAQ8E,aACR,6CACA,GACA,QACA,eACA,8BAED9E,gBAAQ+E,cAAe,IAAIM,GAC1BrF,gBAAQ+E,aACR,6CACA,GACA,QACA,eACA,8BAED/E,gBAAQgF,eAAgB,IAAIK,GAC3BrF,gBAAQgF,cACR,6CACA,GACA,SACA,gBACA,8BAEDhF,gBAAQiF,eAAgB,IAAII,GAC3BrF,gBAAQiF,cACR,6CACA,GACA,SACA,gBACA,+BAOSiB,YACVlG,gBAAQ0E,aAAc,IAAIW,GACzBrF,gBAAQ0E,YACR,6CACA,GACA,OACA,cACA,8BAED1E,gBAAQ2E,aAAc,IAAIU,GACzBrF,gBAAQ2E,YACR,6CACA,GACA,OACA,cACA,8BAED3E,gBAAQ4E,kBAAmB,IAAIS,GAC9BrF,gBAAQ4E,iBACR,6CACA,GACA,OACA,cACA,8BAED5E,gBAAQ6E,0BAA2B,IAAIQ,GACtCrF,gBAAQ6E,yBACR,6CACA,GACA,OACA,cACA,8BAED7E,gBAAQ8E,cAAe,IAAIO,GAC1BrF,gBAAQ8E,aACR,6CACA,GACA,QACA,eACA,8BAED9E,gBAAQ+E,cAAe,IAAIM,GAC1BrF,gBAAQ+E,aACR,6CACA,GACA,QACA,eACA,8BAED/E,gBAAQgF,eAAgB,IAAIK,GAC3BrF,gBAAQgF,cACR,6CACA,GACA,SACA,gBACA,8BAEDhF,gBAAQiF,eAAgB,IAAII,GAC3BrF,gBAAQiF,cACR,6CACA,GACA,SACA,gBACA,8BAEDjF,gBAAQmF,eACT,IAAIE,GAAOrF,gBAAQmF,cACjB,6CACA,GACA,QACA,eACA,8BAEDnF,gBAAQkF,eACT,IAAIG,GAAOrF,gBAAQkF,cACjB,6CACA,GACA,QACA,eACA,+BE9MEiB,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,YACHtG,iBAASuG,YAAaN,GAAQM,cAC9BvG,iBAASwG,eAAgBP,GAAQO,iBACjCxG,iBAASyG,UAAWR,GAAQQ,aAGzBC,YACH1G,iBAASuG,iBACTvG,iBAASwG,oBACTxG,iBAASyG,gBAGCE,yBAIQC,EAAsBC,YAAAA,IAAAA,EAAyBjG,QAC3DgG,UAAYhE,GAAegE,QAC3BC,YAAcjE,GAAeiE,8BAa7BC,OAAA,kBACE,IAAIH,EAASnB,KAAKqB,YAAarB,KAAKoB,cAGtCxD,IAAA,SAAImC,OACHwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAChF9E,EAAKuG,MAAMxB,KAAKqB,YAAaE,EAAYF,aACpC,IAAIF,EAASlG,EAAK2C,IAAIoC,KAAKoB,UAAWG,EAAYH,WAAYpB,KAAKqB,aAErE,IAAIF,EACTlG,EAAK2C,IACH3C,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASF,EAAYH,UAAWpB,KAAKqB,cAE5CpG,EAAKwG,SAASzB,KAAKqB,YAAaE,EAAYF,iBAIzCK,SAAA,SAAS3B,OACRwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAChF9E,EAAKuG,MAAMxB,KAAKqB,YAAaE,EAAYF,aACpC,IAAIF,EAASlG,EAAKyG,SAAS1B,KAAKoB,UAAWG,EAAYH,WAAYpB,KAAKqB,aAE1E,IAAIF,EACTlG,EAAKyG,SACHzG,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASF,EAAYH,UAAWpB,KAAKqB,cAE5CpG,EAAKwG,SAASzB,KAAKqB,YAAaE,EAAYF,iBAIzCvD,SAAA,SAASiC,OACRwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAC7E9E,EAAK6C,SACV7C,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASF,EAAYH,UAAWpB,KAAKqB,iBAIvCM,QAAA,SAAQ5B,OACPwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAC7E9E,EAAKuG,MACVvG,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASF,EAAYH,UAAWpB,KAAKqB,iBAIvC1D,YAAA,SAAYoC,OACXwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAC7E9E,EAAK0C,YACV1C,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASF,EAAYH,UAAWpB,KAAKqB,iBAIvCI,SAAA,SAAS1B,OACRwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAC7E,IAAIoB,EACTlG,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYH,WAC1CnG,EAAKwG,SAASzB,KAAKqB,YAAaE,EAAYF,iBAIzCxD,OAAA,SAAOkC,OACNwB,EAAcxB,aAAiBoB,EAAWpB,EAAQ,IAAIoB,EAAS/D,GAAe2C,WAC7E,IAAIoB,EACTlG,EAAKwG,SAASzB,KAAKoB,UAAWG,EAAYF,aAC1CpG,EAAKwG,SAASzB,KAAKqB,YAAaE,EAAYH,eAIzCQ,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBvH,iBAASwG,eAEpBiB,OAAOC,UAAUL,IAA3B/E,MACU+E,EAAoB,GAA9B/E,MAEA2D,GAAQ0B,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUjB,GAAsBiB,SAC1EM,EAAW,IAAI5B,GAAQT,KAAKoB,UAAU9D,YACzCgF,IAAItC,KAAKqB,YAAY/D,YACrBiF,oBAAoBV,UAChBQ,EAAS3B,SAAS2B,EAASG,gBAAiBV,MAG9CW,QAAA,SACLD,EACAV,EACAC,mBADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqBvH,iBAASwG,eAEpBiB,OAAOC,UAAUM,IAA3B1F,MACU0F,GAAiB,GAA3B1F,MAEA8D,GAAI8B,GAAKF,EACT5B,GAAI+B,GAAKzB,GAAgBa,GAClB,IAAInB,GAAIZ,KAAKoB,UAAU9D,YAAYgF,IAAItC,KAAKqB,YAAY/D,YAAYoD,SAAS8B,EAAeV,6BA1GrG,kBACS7G,EAAK4C,OAAOmC,KAAKoB,UAAWpB,KAAKqB,oCAI1C,kBACS,IAAIF,EAASlG,EAAK2H,UAAU5C,KAAKoB,UAAWpB,KAAKqB,aAAcrB,KAAKqB,sBC9BzET,GAAMF,EAASG,GAERgC,0BAqBWC,EAAoBC,SAClCC,EAAe5F,GAAe2F,UACpCrG,EAA6BsG,EAAcvI,EAAaqB,wBAElDkH,EAAc/H,EAAKgI,aAAazH,EAAKP,EAAKC,OAAO4H,EAASjE,mBAC3DiE,SAAWA,aAnBJI,MAAP,SAAaH,UACX,IAAIF,EAAenD,GAAOqD,MAQrBI,iBAAP,SAAwBvD,EAAkBmD,UACxC,IAAIF,EAAe9D,GAAYa,GAAUmD,+BAgB3CnF,IAAA,SAAImC,UACCI,GAAeH,KAAK8C,SAAU/C,EAAM+C,WAA9ChG,MACO,IAAI+F,EAAe7C,KAAK8C,SAAU7H,EAAK2C,IAAIoC,KAAKoD,IAAKrD,EAAMqD,SAG7D1B,SAAA,SAAS3B,UACJI,GAAeH,KAAK8C,SAAU/C,EAAM+C,WAA9ChG,MACO,IAAI+F,EAAe7C,KAAK8C,SAAU7H,EAAKyG,SAAS1B,KAAKoD,IAAKrD,EAAMqD,SAGlExB,cAAA,SACLC,EACAC,EACAC,mBAFAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqBvH,iBAASuG,wBAEjBa,wBAAcC,EAAmBC,EAAQC,MAGjDU,QAAA,SACLD,EACAV,EACAC,mBAFAS,IAAAA,EAAwBxC,KAAK8C,SAASjE,mBAEtCkD,IAAAA,EAAqBvH,iBAASuG,YAEpByB,GAAiBxC,KAAK8C,SAASjE,UAAzC/B,kBACa2F,kBAAQD,EAAeV,EAAQC,MAGvCsB,QAAA,SAAQvB,mBAAAA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDpB,GAAI8B,GAAK1C,KAAK8C,SAASjE,SAChB,IAAI+B,GAAIZ,KAAKoB,UAAU9D,YAAYgF,IAAItC,KAAKqB,YAAY/D,YAAYoD,SAASoB,MAG/EwB,YAAA,kBAAkCC,YAAUC,KAAKxD,KAAKoB,UAAU9D,iCApCvE,kBACS0C,KAAKoB,iBA9BoBD,ICCvBsC,0BAIQC,EAAcX,8BACzBW,EAAOX,UACRW,MAAQA,sCAGR9F,IAAA,SAAImC,UACCC,KAAK0D,MAAM5D,OAAOC,EAAM2D,QAAlC5G,MACO,IAAI2G,EAAYzD,KAAK0D,MAAOzI,EAAK2C,IAAIoC,KAAKoD,IAAKrD,EAAMqD,SAGvD1B,SAAA,SAAS3B,UACJC,KAAK0D,MAAM5D,OAAOC,EAAM2D,QAAlC5G,MACO,IAAI2G,EAAYzD,KAAK0D,MAAOzI,EAAKyG,SAAS1B,KAAKoD,IAAKrD,EAAMqD,UAhBpCP,KHRrBvC,GAAAA,mBAAAA,kCAERA,yCACAA,mCISSqD,0BAsGQC,EAAwBC,EAAyBxC,EAAwBD,8BACpFA,EAAWC,UAEZuC,aAAeA,IACfC,cAAgBA,IAChBC,OAAS,IAAI3C,GAChBlG,EAAKgI,aAAazH,EAAKP,EAAKC,OAAO0I,EAAa/E,WAChD5D,EAAKgI,aAAazH,EAAKP,EAAKC,OAAO2I,EAAchF,uBAxGvCkF,UAAP,SAAiBC,aAChBC,EAAkB,OACAD,EAAME,MAAMC,0BAAW,eAAhCC,OACbH,EAAO5F,KACL2F,EAAMK,WAAQvE,OAAOsE,EAAKE,QACtB,IAAIX,EAAMS,EAAKG,SAASzB,SAAUsB,EAAKI,SAAS1B,SAAUsB,EAAKG,SAASnB,IAAKgB,EAAKI,SAASpB,KAC3F,IAAIO,EAAMS,EAAKI,SAAS1B,SAAUsB,EAAKG,SAASzB,SAAUsB,EAAKI,SAASpB,IAAKgB,EAAKG,SAASnB,aAG5Fa,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,OAI5FY,YAAP,SAAmBb,aAClBC,EAAkB,OACED,EAAMc,QAAQX,0BAAW,eAApCY,OAKbd,EAAO5F,KACL2F,EAAMK,WAAQvE,OAAOiF,EAAOT,QACvBS,EAAOC,OAAS1E,iBAAS2E,KACxB,IAAItB,EAAMoB,EAAOR,SAASzB,SAAUiC,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASnB,IAAK2B,EAAOP,SAASpB,KAEnG,IAAIO,EAAMoB,EAAOR,SAASzB,SAAUiC,EAAOP,SAAS1B,SACnDiC,EAA6BG,eAAe,GAAG9B,IAC/C2B,EAA6BI,gBAAgB,GAAG/B,KAClD2B,EAAOC,OAAS1E,iBAAS2E,KAC1B,IAAItB,EAAMoB,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASzB,SAAUiC,EAAOP,SAASpB,IAAK2B,EAAOR,SAASnB,KAEjG,IAAIO,EAAMoB,EAAOP,SAAS1B,SAAUiC,EAAOR,SAASzB,SACnDiC,EAA6BG,eAAe,GAAG9B,IAC/C2B,EAA6BI,gBAAgB,GAAG/B,aAGpDa,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,OAK5FmB,YAAP,SAAmBpB,aAClBC,EAAkB,OACAD,EAAMqB,MAAMlB,0BAAW,eAAhCmB,OACTC,YACAvB,EAAMK,WAAQvE,OAAOwF,EAAKhB,eACpBgB,EAAKN,WAEN1E,iBAAS2E,KACZM,EAAQ,IAAI5B,EAAM2B,EAAKf,SAASzB,SAAUwC,EAAKd,SAAS1B,SAAUwC,EAAKf,SAASnB,IAAKkC,EAAKd,SAASpB,gBAIhG9C,iBAASkF,uBAOTlF,iBAASmF,aACZF,EAAQ,IAAI5B,EAAM2B,EAAKf,SAASzB,SAAUwC,EAAKd,SAAS1B,SACrDwC,EAAsBJ,eAAe,GAAG9B,IACxCkC,EAAsBH,gBAAgB,GAAG/B,iBAMxCkC,EAAKN,WAEN1E,iBAAS2E,KACZM,EAAQ,IAAI5B,EAAM2B,EAAKd,SAAS1B,SAAUwC,EAAKf,SAASzB,SAAUwC,EAAKd,SAASpB,IAAKkC,EAAKf,SAASnB,gBAIhG9C,iBAASkF,uBAOTlF,iBAASmF,aACZF,EAAQ,IAAI5B,EAAM2B,EAAKd,SAAS1B,SAAUwC,EAAKf,SAASzB,SACrDwC,EAAsBJ,eAAe,GAAG9B,IACxCkC,EAAsBH,gBAAgB,GAAG/B,KAKlDa,EAAO5F,KAAKkH,UAEPtB,EAAOQ,MAAM,GAAGC,QAAO,SAACC,EAAaC,UAAiBD,EAAYlD,SAASmD,KAAeX,EAAO,gCAuBnG3C,OAAA,kBACE,IAAIqC,EAAM3D,KAAK6D,cAAe7D,KAAK4D,aAAc5D,KAAKoB,UAAWpB,KAAKqB,gBAGxEI,SAAA,SAAS1B,GACJI,GAAeH,KAAK6D,cAAe9D,EAAM6D,eAAnD9G,UACM4I,cAAiBjE,mBAAS1B,UACzB,IAAI4D,EAAM3D,KAAK4D,aAAc7D,EAAM8D,cAAe6B,EAASrE,YAAaqE,EAAStE,cAInFuE,MAAA,SAAMC,UACDzF,GAAeyF,EAAe9C,SAAU9C,KAAK4D,eAAvD9G,MACIkD,KAAK6D,yBAAyBlE,GACzB,IAAI8D,GAAYzD,KAAK6D,cAAegC,YAAMpE,mBAASmE,EAAexC,KAAKf,UAEzEQ,GAAeK,MAAM2C,YAAMpE,mBAASmE,EAAexC,KAAKf,aAG1DT,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC7B,KAAK8F,SAASlE,cAAcC,EAAmBC,EAAQC,MAGzDU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BxC,KAAK8F,SAASrD,QAAQD,EAAeV,EAAQC,wBAhCtD,kBACS,IAAIZ,GAASnB,KAAKoB,UAAWpB,KAAKqB,mCAG3C,8BACeI,mBAASzB,KAAK8D,eAtHJ3C,ICOvB4E,GAAuF,GAE9Ed,yBAiCQe,EAA2BC,OACtCC,EAAeF,EAAatC,MAAMzD,YAAYgG,EAAavC,OAC7D,CAACsC,EAAcC,GACf,CAACA,EAAcD,QACdG,eAAiB,IAAIxG,GACxBuG,EAAa,GAAGxC,MAAM9D,QACtBqF,EAAK/H,WAAWgJ,EAAa,GAAGxC,MAAOwC,EAAa,GAAGxC,OACvD,GACA,aACA,oBAEGsB,KAAO1E,iBAAS2E,UAChBiB,aAAeA,IAxCRhJ,WAAP,SAAkBkJ,EAAeC,WAC5BD,EAAOxG,UAAYyG,EAAOzG,SAApC9C,gBACM8C,EAAUwG,EAAOxG,QACjB0G,EAASF,EAAOnG,YAAYoG,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,eAEHG,eAAjER,6BAAqBO,EAAO,GAAGrJ,+BAAWqJ,EAAO,GAAGrJ,YACtD8I,QACKA,WACFO,EAAO,GAAGrJ,wBACN8I,uBAAAS,EAAqBF,EAAO,GAAGrJ,iBACjCqJ,EAAO,GAAGrJ,SAAUwJ,oBACnB/L,EAAgBkF,GAChB8G,YACE,CAAC,SACD,CAACC,OACC,CAAC,UAAW,WACZ,CAACL,EAAO,GAAGrJ,QAASqJ,EAAO,GAAGrJ,YAGlCrC,EAAegF,aAMhBmG,GAAmBO,EAAO,GAAGrJ,SAASqJ,EAAO,GAAGrJ,qCAkBlD2J,oBAAA,kBACE5G,KAAKmG,eAAelJ,WAOtB4J,cAAA,SAAcnD,UACZA,EAAM5D,OAAOE,KAAKsE,SAAWZ,EAAM5D,OAAOE,KAAK8G,WAqBjDC,QAAA,SAAQrD,UACH1D,KAAK6G,cAAcnD,IAA7B5G,MACO4G,EAAM5D,OAAOE,KAAKsE,QAAUtE,KAAKgH,YAAchH,KAAKiH,eA0BtDC,UAAA,SAAUxD,UACL1D,KAAK6G,cAAcnD,IAA7B5G,MACO4G,EAAM5D,OAAOE,KAAKsE,QAAUtE,KAAKuE,SAAWvE,KAAKwE,YAGnD2C,gBAAA,SAAgBC,MACXpH,KAAK6G,cAAcO,EAAY1D,QAAzC5G,MACI7B,EAAKuG,MAAMxB,KAAKuE,SAASnB,IAAKjI,IAASF,EAAKuG,MAAMxB,KAAKwE,SAASpB,IAAKjI,SACjE,IAAIc,MAENoL,EAAerH,KAAKkH,UAAUE,EAAY1D,OAC1C4D,EAAgBtH,KAAKkH,UAAUE,EAAY1D,MAAM5D,OAAOE,KAAKsE,QAAUtE,KAAK8G,OAAS9G,KAAKsE,QAC1FiD,EAAqBtM,EAAKwG,SAAS2F,EAAYhE,IAAK1H,GACpD0F,EAAYnG,EAAKwG,SAAS8F,EAAoBD,EAAclE,KAC5D/B,EAAcpG,EAAK2C,IAAI3C,EAAKwG,SAAS4F,EAAajE,IAAKzH,GAAmB4L,GAC1EC,EAAe,IAAI/D,GACvB2D,EAAY1D,MAAM5D,OAAOE,KAAKsE,QAAUtE,KAAK8G,OAAS9G,KAAKsE,OAC3DrJ,EAAK4C,OAAOuD,EAAWC,OAErBpG,EAAKuG,MAAMgG,EAAapE,IAAKjI,SACzB,IAAIqB,QAEL,CAACgL,EAAc,IAAIvC,EAAKoC,EAAazJ,IAAIwJ,GAAcE,EAAc5F,SAAS8F,QAGhFC,eAAA,SAAeD,MACVxH,KAAK6G,cAAcW,EAAa9D,QAA1C5G,MAEE7B,EAAKuG,MAAMxB,KAAKuE,SAASnB,IAAKjI,IAC9BF,EAAKuG,MAAMxB,KAAKwE,SAASpB,IAAKjI,IAC9BF,EAAK4B,mBAAmB2K,EAAapE,IAAKpD,KAAKkH,UAAUM,EAAa9D,OAAON,WAEvE,IAAInH,MAGNqL,EAAgBtH,KAAKkH,UAAUM,EAAa9D,OAC5C2D,EAAerH,KAAKkH,UAAUM,EAAa9D,MAAM5D,OAAOE,KAAKsE,QAAUtE,KAAK8G,OAAS9G,KAAKsE,QAC1FlD,EAAYnG,EAAKwG,SAASxG,EAAKwG,SAAS4F,EAAajE,IAAKoE,EAAapE,KAAMzH,GAC7E0F,EAAcpG,EAAKwG,SAASxG,EAAKyG,SAAS4F,EAAclE,IAAKoE,EAAapE,KAAM1H,GAChF0L,EAAc,IAAI3D,GACtB+D,EAAa9D,MAAM5D,OAAOE,KAAKsE,QAAUtE,KAAK8G,OAAS9G,KAAKsE,OAC5DrJ,EAAK2C,IAAI3C,EAAK4C,OAAOuD,EAAWC,GAAcjG,UAEzC,CAACgM,EAAa,IAAInC,EAAKoC,EAAazJ,IAAIwJ,GAAcE,EAAc5F,SAAS8F,QAG/EE,mBAAA,SACLC,EACA3B,EACAC,GAEU0B,EAAYjE,MAAM5D,OAAOE,KAAKmG,iBAAxCrJ,UAMI8K,EALE1B,EAAeF,EAAatC,MAAMzD,YAAYgG,EAAavC,OAC7D,CAACsC,EAAcC,GACf,CAACA,EAAcD,MACTE,EAAa,GAAGxC,MAAM5D,OAAOE,KAAKsE,SAAW4B,EAAa,GAAGxC,MAAM5D,OAAOE,KAAK8G,SAAzFhK,MAGI7B,EAAKuG,MAAMmG,EAAYvE,IAAKjI,GAC9ByM,EAAY3M,EAAKyG,SAASnE,GAAKtC,EAAKwG,SAASyE,EAAa,GAAG9C,IAAK8C,EAAa,GAAG9C,MAAOpI,OACpF,KACC6M,EAAU5M,EAAK4C,OAAO5C,EAAKwG,SAASyE,EAAa,GAAG9C,IAAKuE,EAAYvE,KAAMpD,KAAKuE,SAASnB,KACzF0E,EAAU7M,EAAK4C,OAAO5C,EAAKwG,SAASyE,EAAa,GAAG9C,IAAKuE,EAAYvE,KAAMpD,KAAKwE,SAASpB,KAC/FwE,EAAY3M,EAAK8B,gBAAgB8K,EAASC,GAAWD,EAAUC,MAE5D7M,EAAK0C,YAAYiK,EAAWzM,SACzB,IAAIqB,SAEL,IAAIiH,GAAYzD,KAAKmG,eAAgByB,MAGvCG,kBAAA,SACLrE,EACAiE,EACAC,EACAI,EACAC,OAOIC,cARJF,IAAAA,GAAiB,GAGPhI,KAAK6G,cAAcnD,IAA7B5G,MACU6K,EAAYjE,MAAM5D,OAAOE,KAAKmG,iBAAxCrJ,MACU8K,EAAUlE,MAAM5D,OAAOE,KAAKmG,iBAAtCrJ,MACU7B,EAAK8B,gBAAgB6K,EAAUxE,IAAKuE,EAAYvE,MAA1DtG,MAGKkL,EAEE,CACOC,GAAZnL,UACMqL,EAAc/K,GAAe6K,MAC9BhN,EAAKuG,MAAM2G,EAAahN,GAY3B+M,EAAsBP,MAZY,KAC5BS,EAAQ7K,GAAKtC,EAAKwG,SAASzB,KAAKuE,SAASnB,IAAKpD,KAAKwE,SAASpB,MAC5DiF,EAAY9K,GAAK4K,MACnBlN,EAAK0C,YAAYyK,EAAOC,GAAY,KAChCjH,EAAYnG,EAAKwG,SAASkG,EAAYvE,IAAKnI,EAAKyG,SAAS0G,EAAOC,IAChEhH,EAAcpG,EAAK2C,IAAI3C,EAAKwG,SAAS2G,EAAO7M,GAAO8M,GACnDC,EAAerN,EAAK4C,OAAOuD,EAAWC,GAC5C6G,EAAsBP,EAAY/J,IAAI,IAAI6F,GAAYzD,KAAKmG,eAAgBmC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,SAoBjB,IAAIlE,GACTC,EACAzI,EAAK4C,OAAO5C,EAAKwG,SAASmG,EAAUxE,IAAKpD,KAAKkH,UAAUxD,GAAON,KAAM8E,EAAoB9E,mCAtJ7F,kBACS,IAAIO,GAAM3D,KAAKsE,OAAQtE,KAAK8G,OAAQ9G,KAAKkG,aAAa,GAAG9C,IAAKpD,KAAKkG,aAAa,GAAG9C,8BAM5F,kBACS,IAAIO,GAAM3D,KAAK8G,OAAQ9G,KAAKsE,OAAQtE,KAAKkG,aAAa,GAAG9C,IAAKpD,KAAKkG,aAAa,GAAG9C,0BAe5F,kBACSpD,KAAKsE,OAAO1E,4BAGrB,kBACSI,KAAKkG,aAAa,GAAGxC,0BAG9B,kBACS1D,KAAKkG,aAAa,GAAGxC,4BAG9B,kBACS1D,KAAKkG,aAAa,yBAG3B,kBACSlG,KAAKkG,aAAa,YC1HhBqC,yBAOQrE,EAAesE,EAAiBC,GACvCvE,EAAM9F,OAAS,GAAzBtB,MAEEoH,EAAMwE,OAAM,SAAAtE,UAAQA,EAAKxE,UAAYsE,EAAM,GAAGtE,YADhD9C,MAKG0L,aAAiB7I,IAASuE,EAAM,GAAG2C,cAAc2B,IACjDA,IAAUzJ,GAAYmF,EAAM,GAAGtE,UAAYsE,EAAM,GAAG2C,cAAcrG,GAAuB0D,EAAM,GAAGtE,WAFrG9C,WAMoB,IAAX2L,GACNA,aAAkB9I,IAASuE,EAAMA,EAAM9F,OAAS,GAAGyI,cAAc4B,IACjEA,IAAW1J,GAAYmF,EAAM,GAAGtE,UAAYsE,EAAMA,EAAM9F,OAAS,GAAGyI,cAAcrG,GAAuB0D,EAAM,GAAGtE,WAHrH9C,gBAOMuH,EAAgB,CAACmE,aAAiB7I,GAAQ6I,EAAQhI,GAAuB0D,EAAM,GAAGtE,cAChEsE,EAAMC,0BAAW,eAA1BC,OACPuE,EAAetE,QACXsE,EAAa7I,OAAOsE,EAAKE,SAAWqE,EAAa7I,OAAOsE,EAAK0C,SAAvEhK,UACM2L,EAASE,EAAa7I,OAAOsE,EAAKE,QAAUF,EAAK0C,OAAS1C,EAAKE,OACrED,EAAKhG,KAAKoK,QAGPvE,MAAQA,OACRG,KAAOA,OACPuE,SAAWjF,GAAMI,UAAU/D,WAC3BwI,MAAQA,OACRC,OAASA,MAAAA,EAAAA,EAAUpE,EAAKA,EAAKjG,OAAS,kCAG7C,kBACS4B,KAAKkE,MAAM,GAAGtE,iBC9CnBiJ,GAAe,IAAI1H,GAAS1F,GAErBqN,mGACJlH,cAAA,SAAcC,EAA+BC,EAAiBC,mBAAhDF,IAAAA,EAA4B,GACxC7B,KAAKyB,SAASoH,IAAcjH,cAAcC,EAAmBC,EAAQC,MAGvEU,QAAA,SAAQD,EAA2BV,EAAiBC,mBAA5CS,IAAAA,EAAwB,GAC9BxC,KAAKyB,SAASoH,IAAcpG,QAAQD,EAAeV,EAAQC,OANzCZ,aCwBb4H,GAAsBC,EAAgBC,UAE1C9I,GAAe6I,EAAE5B,YAAYtE,SAAUmG,EAAE7B,YAAYtE,WAA/DhG,MACUqD,GAAe6I,EAAExB,aAAa1E,SAAUmG,EAAEzB,aAAa1E,WAAjEhG,MACIkM,EAAExB,aAAa7F,QAAQsH,EAAEzB,cACvBwB,EAAE5B,YAAYzF,QAAQsH,EAAE7B,aACnB,EAGL4B,EAAE5B,YAAYtJ,SAASmL,EAAE7B,cACnB,EAED,EAIL4B,EAAExB,aAAa1J,SAASmL,EAAEzB,cACrB,GAEC,WAME0B,GAAgBF,EAAUC,OAClCE,EAASJ,GAAsBC,EAAGC,UACzB,IAAXE,EACKA,EAILH,EAAEI,YAAYtL,SAASmL,EAAEG,cACnB,EACCJ,EAAEI,YAAYzL,YAAYsL,EAAEG,aAC9B,EAIFJ,EAAEhF,MAAMK,KAAKjG,OAAS6K,EAAEjF,MAAMK,KAAKjG,OAe5C,SAASiL,GAAczD,EAAgChG,UACjDgG,aAA0BnC,GAAoBmC,EAC9CA,EAAe9C,WAAa/D,GAAYa,GAAiB,IAAI6D,GAAYjD,GAAuBZ,GAAUgG,EAAexC,UAC7HtG,MAGF,SAASwM,GAAgBxG,EAAoBlD,UACvCkD,aAAoBnD,GAAcmD,EAClCA,IAAa/D,GAAYa,GAAiBY,GAAuBZ,QACrE9C,MAOF,IAAayM,yBAgDQvF,EAAcjB,EAAwByG,OA/HehC,EAClEiC,EAEAC,EA6HEC,EAAyB,IAAIC,MAAM5F,EAAMK,KAAKjG,QAC9CyL,EAAoB,IAAID,MAAM5F,EAAME,MAAM9F,WAC5CoL,IAAcjP,kBAAUuP,YAAa,CAC7B3J,GAAe4C,EAAOD,SAAUkB,EAAMwE,QAAhD1L,MACA6M,EAAQ,GAAKN,GAActG,EAAQiB,EAAMpE,aACpC,IAAImK,EAAI,EAAGA,EAAI/F,EAAMK,KAAKjG,OAAS,EAAG2L,IAAK,OACjC/F,EAAME,MAAM6F,GACa5C,gBAAgBwC,EAAQI,IAAzCC,OACrBL,EAAQI,EAAI,QACZF,EAAUE,GAAKC,OAEZ,CACK7J,GAAe4C,EAAOD,SAAUkB,EAAMyE,SAAhD3L,MACA6M,EAAQA,EAAQvL,OAAS,GAAKiL,GAActG,EAAQiB,EAAMpE,aACrD,IAAImK,EAAI/F,EAAMK,KAAKjG,OAAS,EAAG2L,EAAI,EAAGA,IAAK,OACjC/F,EAAME,MAAM6F,EAAI,GACQtC,eAAekC,EAAQI,IAAxCC,OACpBL,EAAQI,EAAI,QACZF,EAAUE,EAAI,GAAKC,QAIlBhG,MAAQA,OACRwF,UAAYA,OACZpC,YACHoC,IAAcjP,kBAAUuP,YACpB/G,EACAiB,EAAMwE,QAAUzJ,GAAYiF,EAAMpE,SAChCiD,GAAeM,iBAAiBa,EAAMpE,QAAQ+J,EAAQ,GAAGvG,KACzDuG,EAAQ,QACXnC,aACHgC,IAAcjP,kBAAU0P,aACpBlH,EACAiB,EAAMyE,SAAW1J,GAAYiF,EAAMpE,SACjCiD,GAAeM,iBAAiBa,EAAMpE,QAAQ+J,EAAQA,EAAQvL,OAAS,GAAGgF,KAC1EuG,EAAQA,EAAQvL,OAAS,QAC5B8L,eAAiB,IAAIvG,GACxB3D,KAAKoH,YAAYtE,SACjB9C,KAAKwH,aAAa1E,SAClB9C,KAAKoH,YAAYhE,IACjBpD,KAAKwH,aAAapE,UAEf+G,aAAexG,GAAMI,UAAU,IAAIwE,GAAMsB,EAAW7F,EAAMwE,aAC1DY,aA3KiE5B,EA2KExH,KAAKwH,aAxKzEkC,GAFAD,EA0KkCzF,EAAM4E,SA1KlBxF,IAAI3B,SA0KwBzB,KAAKoH,YA1KRhE,MAEzB1B,SAAS8F,EAAapE,KAAKvF,OAAO4L,GACvD,IAAIX,GAAQY,EAAStI,UAAWsI,EAASrI,gBA8GlC+I,QAAP,SAAepG,EAAcqG,UAC3B,IAAId,EAAMvF,EAAOqG,EAAU9P,kBAAUuP,gBAQhCQ,SAAP,SAAgBtG,EAAcuG,UAC5B,IAAIhB,EAAMvF,EAAOuG,EAAWhQ,kBAAU0P,0CAsDxCO,iBAAA,SAAiBC,MACXA,EAAkB3M,SAAS3C,IAAtC2B,MACIkD,KAAKwJ,YAAcjP,kBAAU0P,oBACxBjK,KAAKwH,iBAENkD,EAA4B,IAAIvJ,GAAS/F,GAC5CwC,IAAI6M,GACJnJ,SACAG,SAASzB,KAAKwH,aAAapE,KAAKf,gBAC5BrC,KAAKwH,wBAAwB/D,GAChC,IAAIA,GAAYzD,KAAKwH,aAAa9D,MAAOgH,GACzC7H,GAAeM,iBAAiBnD,KAAKgE,MAAMpE,QAAS8K,MAQrDC,gBAAA,SAAgBF,MACVA,EAAkB3M,SAAS3C,IAAtC2B,MACIkD,KAAKwJ,YAAcjP,kBAAUuP,mBACxB9J,KAAKoH,gBAENwD,EAA2B,IAAIzJ,GAAS/F,GAAKwC,IAAI6M,GAAmBhJ,SAASzB,KAAKoH,YAAYhE,KAAKf,gBAClGrC,KAAKoH,uBAAuB3D,GAC/B,IAAIA,GAAYzD,KAAKoH,YAAY1D,MAAOkH,GACxC/H,GAAeM,iBAAiBnD,KAAKgE,MAAMpE,QAAQgL,MAkB7CC,iBAAP,SACL3G,EACA4G,EACAC,IAGAC,EACAC,EACAC,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCH,YACnCI,IAAAA,EAAsB,IAEZhH,EAAM9F,OAAS,GAAzBtB,MACUsO,EAAU,GAApBtO,MACUmO,IAAqBH,GAAoBE,EAAa5M,OAAS,GAAzEtB,UACM8C,EACJkL,aAA4BrH,GACxBqH,EAAiBpH,MAAM9D,QACvBmL,aAAuBpL,GACrBoL,EAAYnL,aACZ2G,OACcA,IAAZ3G,GAAV9C,cAEMuN,EAAWhB,GAAcyB,EAAkBlL,GAC3CyL,EAAW/B,GAAgByB,EAAanL,GACrCmK,EAAI,EAAGA,EAAI7F,EAAM9F,OAAQ2L,IAAK,KAC/B3F,EAAOF,EAAM6F,OAEd3F,EAAKE,OAAOxE,OAAOuK,EAAS3G,QAAWU,EAAK0C,OAAOhH,OAAOuK,EAAS3G,UACpEU,EAAKG,SAAS5C,QAAQxG,KAASiJ,EAAKI,SAAS7C,QAAQxG,QAErDoP,aAEAA,EAAanG,EAAK+C,gBAAgBkD,MACpC,MAAOlN,MAEFA,EAAcmO,8CAGbnO,KAGJoN,EAAU7G,MAAM5D,OAAOuL,GACzBrN,GACEkN,EACA,IAAI3B,EACF,IAAIhB,aAAUyC,GAAc5G,IAAO6G,EAAiBnI,SAAUiI,GAC9DE,EACA1Q,kBAAUuP,aAEZqB,EACAjC,SAEG,GAAIkC,EAAU,GAAKlH,EAAM9F,OAAS,EAAG,KACpCmN,EAAyBrH,EAAMO,MAAM,EAAGsF,GAAGyB,OAAOtH,EAAMO,MAAMsF,EAAI,EAAG7F,EAAM9F,SAGjFmL,EAAMsB,iBACJU,EACAhB,EACAQ,EACA,CACEI,cAAAA,EACAC,QAASA,EAAU,aAEjBJ,GAAc5G,IAClB6G,EACAC,YAKCA,KAkBKO,kBAAP,SACLvH,EACAwH,EACAC,IAGAX,EACAY,EACAV,oBAJuD,SAArDC,cAAAA,aAAgB,QAAGC,QAAAA,aAAU,aAE/BJ,IAAAA,EAAuB,aACvBY,IAAAA,EAAoCD,YACpCT,IAAAA,EAAsB,IAEZhH,EAAM9F,OAAS,GAAzBtB,MACUsO,EAAU,GAApBtO,MACU8O,IAAsBD,GAAqBX,EAAa5M,OAAS,GAA3EtB,UACM8C,EACJ+L,aAA6BlI,GACzBkI,EAAkBjI,MAAM9D,QACxB8L,aAAsB/L,GACpB+L,EAAW9L,aACX2G,OACcA,IAAZ3G,GAAV9C,cAEMyN,EAAYlB,GAAcsC,EAAmB/L,GAC7CiM,EAAUvC,GAAgBoC,EAAY9L,GACnCmK,EAAI,EAAGA,EAAI7F,EAAM9F,OAAQ2L,IAAK,KAC/B3F,EAAOF,EAAM6F,OAEd3F,EAAKE,OAAOxE,OAAOyK,EAAU7G,QAAWU,EAAK0C,OAAOhH,OAAOyK,EAAU7G,UACtEU,EAAKG,SAAS5C,QAAQxG,KAASiJ,EAAKI,SAAS7C,QAAQxG,QAErDkP,aAEAA,EAAYjG,EAAKqD,eAAe8C,MAClC,MAAOpN,MAEFA,EAAc2O,2CAGb3O,KAGJkN,EAAS3G,MAAM5D,OAAO+L,GACxB7N,GACEkN,EACA,IAAI3B,EACF,IAAIhB,IAAOnE,UAAS4G,GAAeU,EAAYE,EAAkB9I,UACjE8I,EACArR,kBAAU0P,cAEZkB,EACAjC,SAEG,GAAIkC,EAAU,GAAKlH,EAAM9F,OAAS,EAAG,KACpCmN,EAAyBrH,EAAMO,MAAM,EAAGsF,GAAGyB,OAAOtH,EAAMO,MAAMsF,EAAI,EAAG7F,EAAM9F,SAGjFmL,EAAMkC,kBACJF,EACAG,EACArB,EACA,CACEc,cAAAA,EACAC,QAASA,EAAU,IAEpBhH,UAAS4G,GACVY,EACAV,YAKCA,QC9YL/P,GAAOoI,YAAUC,KAAK,GACtBpI,GAAMmI,YAAUC,KAAK,GACrBnI,GAAMkI,YAAUC,KAAK,GACrBuI,GAAOxI,YAAUC,KAAK,KACtBwI,GAAOzI,YAAUC,KAAK,OACtByI,GAAO1I,YAAUC,KAAK,OAItB0I,GAAU3I,YAAUC,KAAK,uCACzB2I,GAAU5I,YAAUC,KAAK,uCACzB4I,GAAU7I,YAAUC,KAAK,uCAEzB6I,GAAgB9I,YAAUC,KAAK,qCAC/B8I,GAAkB/I,YAAUC,KAAK,qCAEjC+I,GAAkBhJ,YAAUC,KAAK,uCACjCgJ,GAAkBjJ,YAAUC,KAAK,uCASjCiJ,GAAc,IAAI7C,MAAiB,KAkGzC,SAAS8C,GAAUC,EAAgBC,UACxBD,EAAIE,IAAIxR,GAAIyR,IAAIF,IAG3B,SAASG,GAAiBJ,EAAgBC,UAC/BD,EAAIrK,IAAIjH,GAAIyR,IAAIF,IAqB3B,SAAgBI,GACZC,EACAC,EACAC,EACAC,GAEUH,EAAOI,GAAGH,IAApBpQ,MACUmQ,EAAOK,GAAGlB,KAApBtP,UAGIyQ,EAAQN,EAAOJ,IAAIX,IAAU5J,IAAI4K,GAOjCM,GANAD,EAAKD,GAAGf,IACEkB,GAAWF,GAEXG,GAAWH,IAGMV,IAAIM,GAAQ7K,IAAI8K,MAC3CI,EAAgBF,GAAGd,UACZ,CAACmB,GAAWH,GAlKL,SAoKVpL,EAAYwL,GAA0BJ,SACnC,CAACK,GAAWd,GAAiBS,EAAiBjK,YAAUC,KArKjD,IAqKsEpB,IAAamB,YAAUC,KAAKpB,IAAaA,YAgCrHsL,GAAWjQ,OACnBqQ,EAAM3S,MAENsC,EAAEsQ,IAAI5B,IAAU,KACV6B,EA7Bd,SAAmBC,OACXH,EAAM3S,MACN8S,EAAGX,GAAGtB,SAECiC,EAAGZ,GAAGjS,KACT6S,EAAKlB,GAAiBkB,EAAI7S,IAC1B0S,EAAMA,EAAIlQ,IAAIxC,aAIb,IAAI8S,EAAIjC,GAAMiC,EAAEb,GAAGlS,IAAO+S,EAAInB,GAAiBmB,EAAG9S,IAC/C6S,EAAGZ,GAAGX,GAAUtR,GAAK8S,MACrBD,EAAKlB,GAAiBkB,EAAIC,GAC1BJ,EAAMA,EAAIK,GAAGD,WAKlBJ,EAWWM,CAAU3Q,EAAE6E,IAAI4J,KAC9BzO,EAAIsP,GAAiBtP,EAAGuQ,GAExBF,EAAME,EAAMnB,IAAIX,OAIhBzO,EAAE4P,GAAGnB,QACA,IAAInC,EAjNK,IAiNcA,EAAI,IAAKA,GACjCtM,EAAKA,EAAEoP,IAAIpP,GAAI6E,IAAI4J,KAEb6B,IAAI5B,MACN1O,EAAIsP,GAAiBtP,EAAGrC,IAExB0S,EAAMA,EAAIlQ,IAAI8O,GAAUtR,GAAKmI,YAAUC,KAAKuG,EAAI,aAKpD+D,EAAIjB,IAAIR,IAAgB/J,IAAIgK,aAcxBmB,GAAWhQ,OAGnBD,EACAE,EACA2Q,EAJAP,EAAM3S,UAMNsC,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAGxC/F,EAAEsQ,IAAI,wCACND,EAAMA,EAAIlQ,IAAI2F,YAAUC,KAAK,uCAC7B/F,EAAKA,EAAEoP,IAAIX,IAAU5J,IAAIiB,YAAUC,KAAK,wCAI5C9F,EAAIF,EAAIC,EAAE6Q,IAAIpC,IACdmC,EAAK7Q,EAAEqP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,yCACrG9F,EAAKA,EAAEmP,IAAIwB,GAAI/L,IAAI4J,IAEb4B,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,uCAAuC8K,IAAI9Q,IAAI8E,IAAIiB,YAAUC,KAAK,kDAMzFmK,GAAWlQ,OAGnBD,EACAE,EAHAoQ,EAAM3S,UAOVuC,GAFAA,EAAIF,EAAIC,EAAE8Q,IAAIhL,YAAUC,KAAK,wCAEtBqJ,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IACnB4B,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,wBAEnC9F,EAAKA,EAAEmP,IAAIrP,GAAI8E,IAAI4J,IAGnB4B,GAFAA,EAAMA,EAAIlQ,IAAIF,EAAEmP,IAAItJ,YAAUC,KAAK,yBAEzBlB,IAAIiB,YAAUC,KAAK,uBAAuB5F,IAAIJ,GAAGI,IAAIsO,IAGzDzO,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAElK/F,EAAE+Q,IAAIjL,YAAUC,KAAK,wCAAwCiL,WAAWX,EAAOA,EAAIjB,IAAItJ,YAAUC,KAAK,wCAAyClB,IAAIiB,YAAUC,KAAK,yCAGjKsK,WAUKD,GAAWa,EAAeC,OAClCC,EAAKF,EACLZ,EAAM3S,UAEVyT,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,GAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,sCAErB+B,EAAK7B,GAAiB6B,EAAG/B,IAAI6B,GAAKC,IAClCb,EAAMA,EAAIlQ,IAAIgR,EAAG/B,IAAI,uCAITvK,IAAIiB,YAAUC,KAAK,sCAAuC5F,IAAI8Q,GAAI9Q,IAAI8O,GAAUtR,GAAKuT,aASrFf,GAA0Bc,WAClCnQ,EArgBc,GAsgBdC,EArgBc,IAugBXD,EAAK,EAAIC,GAAI,KACZC,GAAOF,EAAKC,GAAM,EAClBiO,GAAYhO,GAAKsP,IAAIW,GAAKnQ,EAAKE,EAC9BD,EAAKC,SAGVgO,GAAYjO,GAAIuP,IAAIW,GAAYlQ,EAChCiO,GAAYlO,GAAIwP,IAAIW,GAAYnQ,OAEpCzB,eAkBY+R,GACZxE,EACAyE,EACAC,EACAC,EACAC,EACAC,GAGU7E,EAASgD,GAAGlS,KAAtB2B,MAIUgS,EAAUzB,GAAGlS,KAAS4T,EAAW1B,GAAGlS,KAA9C2B,UACMqS,EAAkB9E,EAASwC,IAAId,GAAKuC,IAAIY,OAE1CF,EAAcI,GAAGH,UACTF,EAAWlC,IAAIsC,GAAkB7M,IAAIwM,EAAUjC,IAAId,IAAMnO,IAAIuR,UAM7CnC,GADb8B,EAAUjC,IAAId,IAAOnO,IAAIuR,GACCL,EAAUjC,IAAId,IAAOiD,EAAeC,GAAtEI,OAAQjN,OAETkN,EAAQP,EAAWlC,IAAIwC,GACvBE,EAAQ7C,GAAUqC,EAAYxL,YAAUC,KAAKpB,WAE3CkN,EAAMhB,IAAIiB,GAAQjN,IAAI+M,YAkBlBG,GACZjF,EACAuE,EACAC,EACAC,EACAC,EACAC,MAGU3E,EAAU8C,GAAGlS,KAAvB2B,MAKUgS,EAAUzB,GAAGlS,KAAS4T,EAAW1B,GAAGlS,KAA9C2B,MAEIkS,EAAcI,GAAGH,GAAiB,KAC5B7N,EAAY0N,EAAUjC,IAAItC,GAAWsC,IAAId,IACzC1K,EAAc0N,EAAWT,IAAI/D,GAAWsC,IAAId,GAAKuC,IAAIY,WACnD9N,EAAUkB,IAAIjB,GAAczD,IAAI,OAGtC6R,EAAQV,EAAWT,IAAI/D,KACDyC,GAAM+B,EAAYU,EAAOR,EAAgBD,GAA9DK,OAAQjN,OACTsN,EAAgBZ,EAAUjC,IAAId,IAC9BuD,EAAQI,EAAc7C,IAAIwC,GAC1BE,EAAQ7C,GAAUgD,EAAenM,YAAUC,KAAKpB,WAC9C2K,GAAiBuC,EAAMhB,IAAIiB,GAAQhM,YAAUC,KAAKpB,IAAYE,IAAIyJ,GAAKuC,IAAIY,IAAWtR,IAAI,GAvlBtG6O,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,IAAMlJ,YAAUC,KAAK,wCACjCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAAUC,KAAK,wCAClCiJ,GAAY,KAAOlJ,YAA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"}